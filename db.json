{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/assets/blogImg/avatar.jpg","path":"assets/blogImg/avatar.jpg","modified":1,"renderable":0},{"_id":"source/assets/blogImg/onepiece.png","path":"assets/blogImg/onepiece.png","modified":1,"renderable":0},{"_id":"source/assets/blogImg/女神.jpg","path":"assets/blogImg/女神.jpg","modified":1,"renderable":0},{"_id":"source/assets/blogImg/女神2.jpg","path":"assets/blogImg/女神2.jpg","modified":1,"renderable":0},{"_id":"source/assets/blogImg/终端截图.png","path":"assets/blogImg/终端截图.png","modified":1,"renderable":0},{"_id":"source/assets/blogImg/选择主题.png","path":"assets/blogImg/选择主题.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"source/assets/blogImg/p478446624 (1).jpg","path":"assets/blogImg/p478446624 (1).jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/assets/blogImg/litten.png","path":"assets/blogImg/litten.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/assets/blogImg/Packagist.gif","path":"assets/blogImg/Packagist.gif","modified":1,"renderable":0},{"_id":"source/assets/blogImg/Graychen-Container.gif","path":"assets/blogImg/Graychen-Container.gif","modified":1,"renderable":0},{"_id":"source/assets/blogImg/多窗终端.png","path":"assets/blogImg/多窗终端.png","modified":1,"renderable":0},{"_id":"source/assets/blogImg/桌面带终端效果图.png","path":"assets/blogImg/桌面带终端效果图.png","modified":1,"renderable":0},{"_id":"source/assets/blogImg/桌面效果图.png","path":"assets/blogImg/桌面效果图.png","modified":1,"renderable":0}],"Cache":[{"_id":"themes/yilia/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1494168876759},{"_id":"themes/yilia/README.md","hash":"dd311f8e8696bd89cf1790328d12b49d0e6b36da","modified":1494168876759},{"_id":"themes/yilia/_config.yml","hash":"9dbfc36aa14344009cf9253f5dd1a210ae25c7a2","modified":1494251692868},{"_id":"themes/yilia/package.json","hash":"00357ef6f24eb049074da81809e98f973f528cca","modified":1494168876759},{"_id":"source/_posts/lnmp源码搭建.md","hash":"96d3115f66a939d6b4ef0b601d1a1dd83dfd4331","modified":1494257702373},{"_id":"source/_posts/composer包是怎样炼成的.md","hash":"c74d72b92b3a8cb254c0957fffff604204c0e111","modified":1494166807502},{"_id":"source/_posts/vichrome像vi一样操作你的chrome浏览器.md","hash":"a3fcdf121d2e0a6f4d731b620e636ad3fe0ddd32","modified":1494166807502},{"_id":"source/_posts/vi的使用总结.md","hash":"bb7954a76570da4de62aefe3a950273f1dcb1311","modified":1494166807502},{"_id":"source/_posts/变身吧！我的linux配置环境.md","hash":"673c36d0b237b1c55892843829325dc4c15f584c","modified":1494166807502},{"_id":"source/_posts/深入解析php的容器模式.md","hash":"b0d4c1e42db061b1269a86f4daa04f618c5f0c7e","modified":1494166807502},{"_id":"source/_posts/计划虽然不酷，但是很有用.md","hash":"4cbf49520c6f2072dd0d797c08159a87ed3c1da7","modified":1494166807502},{"_id":"source/images/avatar.jpg","hash":"f88f6b513f90be947234de853271119eda312d64","modified":1494166807538},{"_id":"themes/yilia/.git/config","hash":"45dbf7cad960774e3ebd63f878005463a78e4c69","modified":1494168876747},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1494168876747},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1494168876755},{"_id":"themes/yilia/.git/index","hash":"0112a8b35758b51a4bcfcfc5d22d492af1a91eeb","modified":1494251796297},{"_id":"themes/yilia/.git/packed-refs","hash":"96b5be830c70a3d4da20b4afa2d44d326cdc257d","modified":1494168876755},{"_id":"themes/yilia/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1494168876759},{"_id":"themes/yilia/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1494168876759},{"_id":"themes/yilia/languages/en.yml","hash":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1494168876759},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1494168876759},{"_id":"themes/yilia/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1494168876759},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1494168876759},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1494168876759},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1494168876759},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494168876759},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494168876755},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1494168876759},{"_id":"themes/yilia/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1494168876755},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494168876759},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494168876759},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494168876759},{"_id":"source/assets/blogImg/avatar.jpg","hash":"b899370064d7289319e837799a3df29e60d8b72c","modified":1494166807506},{"_id":"source/assets/blogImg/onepiece.png","hash":"ee8123247a0342cbe097dbad2eef320392bc97ca","modified":1494166807506},{"_id":"source/assets/blogImg/女神.jpg","hash":"bdcdc004db6bbf439d3695c67c0b27ac6eac705c","modified":1494166807510},{"_id":"source/assets/blogImg/女神2.jpg","hash":"b3c333fca3dec309251423fa2a02180555791271","modified":1494166807510},{"_id":"source/assets/blogImg/终端截图.png","hash":"2dd559ffae900981a00a560119a1e9bb2c14dca8","modified":1494166807538},{"_id":"source/assets/blogImg/选择主题.png","hash":"b5d7347639b85bcb7e3063aca3289f49e8e2eaa6","modified":1494166807538},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1494168876747},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1494168876747},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1494168876747},{"_id":"themes/yilia/.git/logs/HEAD","hash":"797ff988273679f17f9af0e78592644584898b2c","modified":1494168876747},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"a33f073cf85def0d0a26180167507eaf8e660767","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1494168876759},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1494168876759},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"4ddbfcced6533d1b2a695c65e19ed8791f4634da","modified":1494168876759},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b4bfac250b2791efc8a33c759ee3e13a8f00f98c","modified":1494168876759},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1494168876759},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"e525570c39e9a1b46e58c33860dbb83d7e16c6ce","modified":1494168876755},{"_id":"themes/yilia/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1494168876759},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1494168876759},{"_id":"themes/yilia/source/css/_variables.styl","hash":"b1e1116c01604fa87ae264a39c488ba69ca178cd","modified":1494168876759},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494168876759},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1494168876759},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1494168876759},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1494168876759},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1494168876759},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1494168876759},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1494168876759},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1494168876759},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1494168876759},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1494168876759},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1494168876759},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1494168876759},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1494168876759},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1494168876759},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494168876759},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1494168876759},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1494168876759},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1494168876759},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1494168876759},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1494168876759},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"0654e5d7429bdd0665c94182ef17514c831586eb","modified":1494168876759},{"_id":"themes/yilia/source/js/main.js","hash":"9da8d0386bf0902582f9c5e4e2cfc8cbaa0d55e4","modified":1494168876759},{"_id":"themes/yilia/source/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1494168876759},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1494168876759},{"_id":"source/assets/blogImg/p478446624 (1).jpg","hash":"806f0fa94f9f3ddf0ef8ac0bf103e0ce8f6a2711","modified":1494166807506},{"_id":"themes/yilia/.git/objects/pack/pack-ebeec68badede9419151169286df54109737d91b.idx","hash":"04c222e9d0c7564eb8b126834adbf6a3fddcb43e","modified":1494168876747},{"_id":"themes/yilia/.git/refs/heads/master","hash":"d3c75a359449952a87885e1421d5cd3023c6b831","modified":1494168876747},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"924744aa3c1bce9056ba03cec02e19e095009126","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1494168876755},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1494168876755},{"_id":"themes/yilia/source/assets/blogImg/litten.png","hash":"f88f6b513f90be947234de853271119eda312d64","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"712e809ddeaa8c6bf172286ccf81d005edbf1afd","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1494168876759},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1494168876759},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1494168876759},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1494168876759},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1494168876759},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1494168876759},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1494168876759},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494168876759},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494168876759},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1494168876759},{"_id":"source/assets/blogImg/Packagist.gif","hash":"b0744949057774ef4364b195a11b2958003070d7","modified":1494166807506},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"797ff988273679f17f9af0e78592644584898b2c","modified":1494168876747},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1494168876747},{"_id":"source/assets/blogImg/Graychen-Container.gif","hash":"38bd85eaaa94bafc1857313a5df2c0bb17683b3b","modified":1494166807502},{"_id":"source/assets/blogImg/多窗终端.png","hash":"f9b4e6565694fe37667fb36297a6e72b51661236","modified":1494166807510},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"797ff988273679f17f9af0e78592644584898b2c","modified":1494168876747},{"_id":"source/assets/blogImg/桌面带终端效果图.png","hash":"12e66fac2eb3b201e740f7329996ef51733dd648","modified":1494166807522},{"_id":"source/assets/blogImg/桌面效果图.png","hash":"e510b8bffd661e1e5ddd64809513f823ccd09782","modified":1494166807538},{"_id":"themes/yilia/.git/objects/pack/pack-ebeec68badede9419151169286df54109737d91b.pack","hash":"af4de33c88fba22921f6933cecd3361259ccb8a9","modified":1494168876755},{"_id":"public/atom.xml","hash":"606d273d486c1da6159d566561e9f3c3907007e0","modified":1494258150610},{"_id":"public/sitemap.xml","hash":"25aafcfdf6ccf4ac750ec7d02d3c9f3d15f17a3e","modified":1494258150931},{"_id":"public/2017/02/04/计划虽然不酷，但是很有用/index.html","hash":"a2de6a341323f8d99b70db097b9e872a532d4a53","modified":1494258150944},{"_id":"public/2016/10/18/变身吧！我的linux配置环境/index.html","hash":"604034a189859ff48f02717dd22aa9ab99326bdc","modified":1494258150944},{"_id":"public/2016/10/18/vichrome像vi一样操作你的chrome浏览器/index.html","hash":"45cbf00f68b97853ea43e4cbef06ce39bee37937","modified":1494258150945},{"_id":"public/archives/index.html","hash":"972456fbf79007480eaa6331d01c3d409e0964ee","modified":1494258150945},{"_id":"public/2016/09/21/vi的使用总结/index.html","hash":"21fa48c440ada63bff81013d9b5e5f4b29b76435","modified":1494258150945},{"_id":"public/archives/2016/index.html","hash":"88054389fcdeea3c5cad75d3c2f006eae9f8b506","modified":1494258150945},{"_id":"public/archives/2016/09/index.html","hash":"44bc503413cefa6f50d17fcf46d7a0e8c79c803f","modified":1494258150945},{"_id":"public/archives/2016/10/index.html","hash":"326c7f33d307aa6f20254eeb70624d974bf978a6","modified":1494258150945},{"_id":"public/archives/2017/index.html","hash":"ba9e3dd80a196a156ecad556e148bb94fb1f704a","modified":1494258150945},{"_id":"public/archives/2017/02/index.html","hash":"5735fadf82e96f9c8c185691fcefda7e8ac9fa05","modified":1494258150945},{"_id":"public/archives/2017/05/index.html","hash":"fde4740bfcc33048804fc7440aaa2e76dff71a0d","modified":1494258150945},{"_id":"public/categories/技术/index.html","hash":"38d8807b239ce719d617803c5455d8772d890912","modified":1494258150945},{"_id":"public/categories/随笔/index.html","hash":"d4fa5a3adb69e6d72b91d71c87730566669bb6dc","modified":1494258150945},{"_id":"public/tags/php/index.html","hash":"268118c7d7cec3afb7895aca396218dc865d0143","modified":1494258150945},{"_id":"public/tags/工具/index.html","hash":"d6f3d97741ff1d76bcb96cdaca4dfdf3bde7aa4d","modified":1494258150945},{"_id":"public/tags/linux/index.html","hash":"2ef4a99ab161f75d8d5616050da3f879ed38b432","modified":1494258150946},{"_id":"public/tags/编辑器/index.html","hash":"d153c33387ae55b1ccd87e8ea1483abc13a73847","modified":1494258150946},{"_id":"public/2017/05/08/lnmp源码搭建/index.html","hash":"9fc7b045d06b88bef396ed5745c88a228cdb9b5b","modified":1494258150946},{"_id":"public/2016/10/19/composer包是怎样炼成的/index.html","hash":"4937a096a015a0140e9374153b8d8a37edf10871","modified":1494258150947},{"_id":"public/2016/10/19/深入解析php的容器模式/index.html","hash":"51eb6e8111285c83c9c1c90bffee53224a0ac154","modified":1494258150947},{"_id":"public/index.html","hash":"45d60763b8d6d541bd078d4be705ebb1bb767eca","modified":1494258150947},{"_id":"public/assets/blogImg/avatar.jpg","hash":"b899370064d7289319e837799a3df29e60d8b72c","modified":1494258150965},{"_id":"public/images/avatar.jpg","hash":"f88f6b513f90be947234de853271119eda312d64","modified":1494258150966},{"_id":"public/assets/blogImg/onepiece.png","hash":"ee8123247a0342cbe097dbad2eef320392bc97ca","modified":1494258150966},{"_id":"public/assets/blogImg/女神.jpg","hash":"bdcdc004db6bbf439d3695c67c0b27ac6eac705c","modified":1494258150966},{"_id":"public/assets/blogImg/女神2.jpg","hash":"b3c333fca3dec309251423fa2a02180555791271","modified":1494258150966},{"_id":"public/assets/blogImg/终端截图.png","hash":"2dd559ffae900981a00a560119a1e9bb2c14dca8","modified":1494258150966},{"_id":"public/assets/blogImg/选择主题.png","hash":"b5d7347639b85bcb7e3063aca3289f49e8e2eaa6","modified":1494258150966},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494258150966},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494258150966},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494258150967},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494258150967},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494258150967},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494258150967},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1494258150967},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1494258150967},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1494258150967},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1494258150968},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1494258150968},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1494258150968},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1494258150969},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1494258150969},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1494258150969},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1494258150969},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1494258150969},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1494258150969},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1494258150969},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1494258150969},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1494258150969},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1494258150969},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1494258150969},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1494258150969},{"_id":"public/assets/blogImg/litten.png","hash":"f88f6b513f90be947234de853271119eda312d64","modified":1494258150969},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1494258150970},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1494258150970},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1494258150970},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1494258150970},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494258150970},{"_id":"public/assets/blogImg/p478446624 (1).jpg","hash":"806f0fa94f9f3ddf0ef8ac0bf103e0ce8f6a2711","modified":1494258151857},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1494258151865},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1494258151865},{"_id":"public/js/jquery.lazyload.js","hash":"0654e5d7429bdd0665c94182ef17514c831586eb","modified":1494258151865},{"_id":"public/js/main.js","hash":"ad27ff5176a99280e73af80fc08e2e5a469841bd","modified":1494258151865},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1494258151865},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1494258151865},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494258151865},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494258151865},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494258151865},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494258151865},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494258151865},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1494258151865},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494258151865},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1494258151866},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1494258151866},{"_id":"public/assets/blogImg/Packagist.gif","hash":"b0744949057774ef4364b195a11b2958003070d7","modified":1494258151874},{"_id":"public/assets/blogImg/Graychen-Container.gif","hash":"38bd85eaaa94bafc1857313a5df2c0bb17683b3b","modified":1494258151875},{"_id":"public/assets/blogImg/多窗终端.png","hash":"f9b4e6565694fe37667fb36297a6e72b51661236","modified":1494258151875},{"_id":"public/assets/blogImg/桌面带终端效果图.png","hash":"12e66fac2eb3b201e740f7329996ef51733dd648","modified":1494258151889},{"_id":"public/assets/blogImg/桌面效果图.png","hash":"e510b8bffd661e1e5ddd64809513f823ccd09782","modified":1494258151898}],"Category":[{"name":"技术","_id":"cj2gapzcc0002ur7ytvyhkkvk"},{"name":"随笔","_id":"cj2gapzd0000jur7ywaqbvma6"}],"Data":[],"Page":[],"Post":[{"title":"lnmp源码搭建","date":"2017-05-08T14:47:02.000Z","_content":"## mysql源码安装\n1.安装编译源码需要的包\n``` shell\nsudo apt-get install make cmake gcc g++ bison libncurses5-dev\n```\n2.下载相应源码包\n``` shell\n[root@graychen ~]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\n[root@graychen ~]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.13.tar.gz\n```\n3.新建MySQL用户和用户组\n``` shell\n[root@graychen ~]# groupadd -r mysql && useradd -r -g mysql -s /sbin/nologin -M mysql\n```\n4.预编译\n\n``` shell\n[root@graychen ~]# tar -zxvf boost_1_59_0.tar.gz\n[root@graychen data]# md5sum mysql-5.7.13.tar.gz \n8fab75dbcafcd1374d07796bff88ae00  mysql-5.7.13.tar.gz\n[root@graychen ~]# tar -zxvf mysql-5.7.13.tar.gz\n[root@graychen data]# mkdir -p /data/mysql\n[root@graychen data]# cd mysql-5.7.13\n[root@graychen data]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n-DMYSQL_DATADIR=/data/mysql \\\n-DWITH_BOOST=../boost_1_59_0 \\\n-DSYSCONFDIR=/etc \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DENABLE_DTRACE=0 \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_EMBEDDED_SERVER=1\n```\n5.编译安装\n\n``` shell\n[root@graychen mysql-5.7.13]# make -j `grep processor /proc/cpuinfo | wc -l`\n#编译很消耗系统资源，小内存可能编译通不过make install\n[root@graychen mysql-5.7.13]# make install\n```\n6.设置启动脚本，开机自启动\n\n``` shell\n[root@graychen mysql-5.7.13]# ls -lrt /usr/local/mysql\n[root@graychen mysql-5.7.13]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\n[root@graychen mysql-5.7.13]# chmod +x /etc/init.d/mysqld\n[root@graychen mysql-5.7.13]# systemctl enable mysqld\nmysqld.service is not a native service, redirecting to /sbin/chkconfig.\nExecuting /sbin/chkconfig mysqld on\n```\n7.配置文件\n\n``` shell\n/etc/my.cnf，仅供参考 \n[root@graychen mysql-5.7.13]# cat > /etc/my.cnf << EOF\n[client]\nport = 3306\nsocket = /dev/shm/mysql.sock\n[mysqld]\nport = 3306\nsocket = /dev/shm/mysql.sock\nbasedir = /usr/local/mysql\ndatadir = /data/mysql\npid-file = /data/mysql/mysql.pid\nuser = mysql\nbind-address = 0.0.0.0\nserver-id = 1\ninit-connect = 'SET NAMES utf8mb4'\ncharacter-set-server = utf8mb4\n#skip-name-resolve\n#skip-networking\nback_log = 300\nmax_connections = 1000\nmax_connect_errors = 6000\nopen_files_limit = 65535\ntable_open_cache = 128\nmax_allowed_packet = 4M\nbinlog_cache_size = 1M\nmax_heap_table_size = 8M\ntmp_table_size = 16M\nread_buffer_size = 2M\nread_rnd_buffer_size = 8M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\nkey_buffer_size = 4M\nthread_cache_size = 8\nquery_cache_type = 1\nquery_cache_size = 8M\nquery_cache_limit = 2M\nft_min_word_len = 4\nlog_bin = mysql-bin\nbinlog_format = mixed\nexpire_logs_days = 30\nlog_error = /data/mysql/mysql-error.log\nslow_query_log = 1\nlong_query_time = 1\nslow_query_log_file = /data/mysql/mysql-slow.log\nperformance_schema = 0\nexplicit_defaults_for_timestamp\n#lower_case_table_names = 1\nskip-external-locking\ndefault_storage_engine = InnoDB\n#default-storage-engine = MyISAM\ninnodb_file_per_table = 1\ninnodb_open_files = 500\ninnodb_buffer_pool_size = 64M\ninnodb_write_io_threads = 4\ninnodb_read_io_threads = 4\ninnodb_thread_concurrency = 0\ninnodb_purge_threads = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_log_buffer_size = 2M\ninnodb_log_file_size = 32M\ninnodb_log_files_in_group = 3\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\nbulk_insert_buffer_size = 8M\nmyisam_sort_buffer_size = 8M\nmyisam_max_sort_file_size = 10G\nmyisam_repair_threads = 1\ninteractive_timeout = 28800\nwait_timeout = 28800\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n[myisamchk]\nkey_buffer_size = 8M\nsort_buffer_size = 8M\nread_buffer = 4M\nwrite_buffer = 4M\nEOF\n```\n9.添加mysql的环境变量\n\n``` shell\n[root@graychen mysql-5.7.13]# echo -e '\\n\\nexport PATH=/usr/local/mysql/bin:$PATH\\n' >> /etc/profile && source /etc/profile\n```\n10.初始化数据库\n\n``` shell\n[root@graychen mysql-5.7.13]# mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql\n```\n11.启动数据库\n\n``` shell\n[root@graychen mysql-5.7.13]# systemctl start mysqld\n[root@graychen mysql-5.7.13]# systemctl status mysqld\n● mysqld.service - LSB: start and stop MySQL\nLoaded: loaded (/etc/rc.d/init.d/mysqld)\nActive: active (running) since 一 2016-07-18 11:15:35 CST; 8s ago\nDocs: man:systemd-sysv-generator(8)\nProcess: 23927 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)\nCGroup: /system.slice/mysqld.service\n├─23940 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid\n└─24776 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-err...\n\n7月 18 11:15:32 graychen systemd[1]: Starting LSB: start and stop MySQL...\n7月 18 11:15:35 graychen mysqld[23927]: Starting MySQL..[  OK   ]\n7月 18 11:15:35 graychen systemd[1]: Started LSB: start and stop MySQL.\n```\n12.查看MySQL服务进程和端口\n``` shell\n[root@graychen mysql-5.7.13]# ps -ef | grep mysql\nroot     23940     1  0 11:15 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid\nmysql    24776 23940  0 11:15 ?        00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-error.log --open-files-limit=65535 --pid-file=/data/mysql/mysql.pid --socket=/dev/shm/mysql.sock --port=3306\n[root@graychen mysql-5.7.13]# netstat -tunpl | grep 3306\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      24776/mysqld\n```\n13.设置数据库root用户密码\n\nMySQL和Oracle数据库一样，数据库也默认自带了一个 root 用户（这个和当前Linux主机上的root用户是完全不搭边的），我们在设置好MySQL数据库的安全配置后初始化root用户的密码。配制过程中，一路输入 y 就行了。这里只说明下MySQL5.7.13版本中，用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！\n\n``` shell\n[root@graychen mysql-5.7.13]# mysql_secure_installation\n```\n","source":"_posts/lnmp源码搭建.md","raw":"---\ntitle: lnmp源码搭建\ndate: 2017-05-08 22:47:02\ncategories: 技术\n---\n## mysql源码安装\n1.安装编译源码需要的包\n``` shell\nsudo apt-get install make cmake gcc g++ bison libncurses5-dev\n```\n2.下载相应源码包\n``` shell\n[root@graychen ~]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz\n[root@graychen ~]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.13.tar.gz\n```\n3.新建MySQL用户和用户组\n``` shell\n[root@graychen ~]# groupadd -r mysql && useradd -r -g mysql -s /sbin/nologin -M mysql\n```\n4.预编译\n\n``` shell\n[root@graychen ~]# tar -zxvf boost_1_59_0.tar.gz\n[root@graychen data]# md5sum mysql-5.7.13.tar.gz \n8fab75dbcafcd1374d07796bff88ae00  mysql-5.7.13.tar.gz\n[root@graychen ~]# tar -zxvf mysql-5.7.13.tar.gz\n[root@graychen data]# mkdir -p /data/mysql\n[root@graychen data]# cd mysql-5.7.13\n[root@graychen data]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\\n-DMYSQL_DATADIR=/data/mysql \\\n-DWITH_BOOST=../boost_1_59_0 \\\n-DSYSCONFDIR=/etc \\\n-DWITH_INNOBASE_STORAGE_ENGINE=1 \\\n-DWITH_PARTITION_STORAGE_ENGINE=1 \\\n-DWITH_FEDERATED_STORAGE_ENGINE=1 \\\n-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\\n-DWITH_MYISAM_STORAGE_ENGINE=1 \\\n-DENABLED_LOCAL_INFILE=1 \\\n-DENABLE_DTRACE=0 \\\n-DDEFAULT_CHARSET=utf8mb4 \\\n-DDEFAULT_COLLATION=utf8mb4_general_ci \\\n-DWITH_EMBEDDED_SERVER=1\n```\n5.编译安装\n\n``` shell\n[root@graychen mysql-5.7.13]# make -j `grep processor /proc/cpuinfo | wc -l`\n#编译很消耗系统资源，小内存可能编译通不过make install\n[root@graychen mysql-5.7.13]# make install\n```\n6.设置启动脚本，开机自启动\n\n``` shell\n[root@graychen mysql-5.7.13]# ls -lrt /usr/local/mysql\n[root@graychen mysql-5.7.13]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\n[root@graychen mysql-5.7.13]# chmod +x /etc/init.d/mysqld\n[root@graychen mysql-5.7.13]# systemctl enable mysqld\nmysqld.service is not a native service, redirecting to /sbin/chkconfig.\nExecuting /sbin/chkconfig mysqld on\n```\n7.配置文件\n\n``` shell\n/etc/my.cnf，仅供参考 \n[root@graychen mysql-5.7.13]# cat > /etc/my.cnf << EOF\n[client]\nport = 3306\nsocket = /dev/shm/mysql.sock\n[mysqld]\nport = 3306\nsocket = /dev/shm/mysql.sock\nbasedir = /usr/local/mysql\ndatadir = /data/mysql\npid-file = /data/mysql/mysql.pid\nuser = mysql\nbind-address = 0.0.0.0\nserver-id = 1\ninit-connect = 'SET NAMES utf8mb4'\ncharacter-set-server = utf8mb4\n#skip-name-resolve\n#skip-networking\nback_log = 300\nmax_connections = 1000\nmax_connect_errors = 6000\nopen_files_limit = 65535\ntable_open_cache = 128\nmax_allowed_packet = 4M\nbinlog_cache_size = 1M\nmax_heap_table_size = 8M\ntmp_table_size = 16M\nread_buffer_size = 2M\nread_rnd_buffer_size = 8M\nsort_buffer_size = 8M\njoin_buffer_size = 8M\nkey_buffer_size = 4M\nthread_cache_size = 8\nquery_cache_type = 1\nquery_cache_size = 8M\nquery_cache_limit = 2M\nft_min_word_len = 4\nlog_bin = mysql-bin\nbinlog_format = mixed\nexpire_logs_days = 30\nlog_error = /data/mysql/mysql-error.log\nslow_query_log = 1\nlong_query_time = 1\nslow_query_log_file = /data/mysql/mysql-slow.log\nperformance_schema = 0\nexplicit_defaults_for_timestamp\n#lower_case_table_names = 1\nskip-external-locking\ndefault_storage_engine = InnoDB\n#default-storage-engine = MyISAM\ninnodb_file_per_table = 1\ninnodb_open_files = 500\ninnodb_buffer_pool_size = 64M\ninnodb_write_io_threads = 4\ninnodb_read_io_threads = 4\ninnodb_thread_concurrency = 0\ninnodb_purge_threads = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_log_buffer_size = 2M\ninnodb_log_file_size = 32M\ninnodb_log_files_in_group = 3\ninnodb_max_dirty_pages_pct = 90\ninnodb_lock_wait_timeout = 120\nbulk_insert_buffer_size = 8M\nmyisam_sort_buffer_size = 8M\nmyisam_max_sort_file_size = 10G\nmyisam_repair_threads = 1\ninteractive_timeout = 28800\nwait_timeout = 28800\n[mysqldump]\nquick\nmax_allowed_packet = 16M\n[myisamchk]\nkey_buffer_size = 8M\nsort_buffer_size = 8M\nread_buffer = 4M\nwrite_buffer = 4M\nEOF\n```\n9.添加mysql的环境变量\n\n``` shell\n[root@graychen mysql-5.7.13]# echo -e '\\n\\nexport PATH=/usr/local/mysql/bin:$PATH\\n' >> /etc/profile && source /etc/profile\n```\n10.初始化数据库\n\n``` shell\n[root@graychen mysql-5.7.13]# mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql\n```\n11.启动数据库\n\n``` shell\n[root@graychen mysql-5.7.13]# systemctl start mysqld\n[root@graychen mysql-5.7.13]# systemctl status mysqld\n● mysqld.service - LSB: start and stop MySQL\nLoaded: loaded (/etc/rc.d/init.d/mysqld)\nActive: active (running) since 一 2016-07-18 11:15:35 CST; 8s ago\nDocs: man:systemd-sysv-generator(8)\nProcess: 23927 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)\nCGroup: /system.slice/mysqld.service\n├─23940 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid\n└─24776 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-err...\n\n7月 18 11:15:32 graychen systemd[1]: Starting LSB: start and stop MySQL...\n7月 18 11:15:35 graychen mysqld[23927]: Starting MySQL..[  OK   ]\n7月 18 11:15:35 graychen systemd[1]: Started LSB: start and stop MySQL.\n```\n12.查看MySQL服务进程和端口\n``` shell\n[root@graychen mysql-5.7.13]# ps -ef | grep mysql\nroot     23940     1  0 11:15 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid\nmysql    24776 23940  0 11:15 ?        00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-error.log --open-files-limit=65535 --pid-file=/data/mysql/mysql.pid --socket=/dev/shm/mysql.sock --port=3306\n[root@graychen mysql-5.7.13]# netstat -tunpl | grep 3306\ntcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      24776/mysqld\n```\n13.设置数据库root用户密码\n\nMySQL和Oracle数据库一样，数据库也默认自带了一个 root 用户（这个和当前Linux主机上的root用户是完全不搭边的），我们在设置好MySQL数据库的安全配置后初始化root用户的密码。配制过程中，一路输入 y 就行了。这里只说明下MySQL5.7.13版本中，用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！\n\n``` shell\n[root@graychen mysql-5.7.13]# mysql_secure_installation\n```\n","slug":"lnmp源码搭建","published":1,"updated":"2017-05-08T15:35:02.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzc00000ur7y4kv0gzzm","content":"<h2 id=\"mysql源码安装\"><a href=\"#mysql源码安装\" class=\"headerlink\" title=\"mysql源码安装\"></a>mysql源码安装</h2><p>1.安装编译源码需要的包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install make cmake gcc g++ bison libncurses5-dev</div></pre></td></tr></table></figure></p>\n<p>2.下载相应源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</div><div class=\"line\">[root@graychen ~]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.13.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.新建MySQL用户和用户组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# groupadd -r mysql &amp;&amp; useradd -r -g mysql -s /sbin/nologin -M mysql</div></pre></td></tr></table></figure></p>\n<p>4.预编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# tar -zxvf boost_1_59_0.tar.gz</div><div class=\"line\">[root@graychen data]# md5sum mysql-5.7.13.tar.gz </div><div class=\"line\">8fab75dbcafcd1374d07796bff88ae00  mysql-5.7.13.tar.gz</div><div class=\"line\">[root@graychen ~]# tar -zxvf mysql-5.7.13.tar.gz</div><div class=\"line\">[root@graychen data]# mkdir -p /data/mysql</div><div class=\"line\">[root@graychen data]# cd mysql-5.7.13</div><div class=\"line\">[root@graychen data]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\</div><div class=\"line\">-DMYSQL_DATADIR=/data/mysql \\</div><div class=\"line\">-DWITH_BOOST=../boost_1_59_0 \\</div><div class=\"line\">-DSYSCONFDIR=/etc \\</div><div class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_FEDERATED_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</div><div class=\"line\">-DENABLE_DTRACE=0 \\</div><div class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</div><div class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</div><div class=\"line\">-DWITH_EMBEDDED_SERVER=1</div></pre></td></tr></table></figure>\n<p>5.编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# make -j `grep processor /proc/cpuinfo | wc -l`</div><div class=\"line\">#编译很消耗系统资源，小内存可能编译通不过make install</div><div class=\"line\">[root@graychen mysql-5.7.13]# make install</div></pre></td></tr></table></figure>\n<p>6.设置启动脚本，开机自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# ls -lrt /usr/local/mysql</div><div class=\"line\">[root@graychen mysql-5.7.13]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# chmod +x /etc/init.d/mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl enable mysqld</div><div class=\"line\">mysqld.service is not a native service, redirecting to /sbin/chkconfig.</div><div class=\"line\">Executing /sbin/chkconfig mysqld on</div></pre></td></tr></table></figure>\n<p>7.配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/my.cnf，仅供参考 </div><div class=\"line\">[root@graychen mysql-5.7.13]# cat &gt; /etc/my.cnf &lt;&lt; EOF</div><div class=\"line\">[client]</div><div class=\"line\">port = 3306</div><div class=\"line\">socket = /dev/shm/mysql.sock</div><div class=\"line\">[mysqld]</div><div class=\"line\">port = 3306</div><div class=\"line\">socket = /dev/shm/mysql.sock</div><div class=\"line\">basedir = /usr/local/mysql</div><div class=\"line\">datadir = /data/mysql</div><div class=\"line\">pid-file = /data/mysql/mysql.pid</div><div class=\"line\">user = mysql</div><div class=\"line\">bind-address = 0.0.0.0</div><div class=\"line\">server-id = 1</div><div class=\"line\">init-connect = &apos;SET NAMES utf8mb4&apos;</div><div class=\"line\">character-set-server = utf8mb4</div><div class=\"line\">#skip-name-resolve</div><div class=\"line\">#skip-networking</div><div class=\"line\">back_log = 300</div><div class=\"line\">max_connections = 1000</div><div class=\"line\">max_connect_errors = 6000</div><div class=\"line\">open_files_limit = 65535</div><div class=\"line\">table_open_cache = 128</div><div class=\"line\">max_allowed_packet = 4M</div><div class=\"line\">binlog_cache_size = 1M</div><div class=\"line\">max_heap_table_size = 8M</div><div class=\"line\">tmp_table_size = 16M</div><div class=\"line\">read_buffer_size = 2M</div><div class=\"line\">read_rnd_buffer_size = 8M</div><div class=\"line\">sort_buffer_size = 8M</div><div class=\"line\">join_buffer_size = 8M</div><div class=\"line\">key_buffer_size = 4M</div><div class=\"line\">thread_cache_size = 8</div><div class=\"line\">query_cache_type = 1</div><div class=\"line\">query_cache_size = 8M</div><div class=\"line\">query_cache_limit = 2M</div><div class=\"line\">ft_min_word_len = 4</div><div class=\"line\">log_bin = mysql-bin</div><div class=\"line\">binlog_format = mixed</div><div class=\"line\">expire_logs_days = 30</div><div class=\"line\">log_error = /data/mysql/mysql-error.log</div><div class=\"line\">slow_query_log = 1</div><div class=\"line\">long_query_time = 1</div><div class=\"line\">slow_query_log_file = /data/mysql/mysql-slow.log</div><div class=\"line\">performance_schema = 0</div><div class=\"line\">explicit_defaults_for_timestamp</div><div class=\"line\">#lower_case_table_names = 1</div><div class=\"line\">skip-external-locking</div><div class=\"line\">default_storage_engine = InnoDB</div><div class=\"line\">#default-storage-engine = MyISAM</div><div class=\"line\">innodb_file_per_table = 1</div><div class=\"line\">innodb_open_files = 500</div><div class=\"line\">innodb_buffer_pool_size = 64M</div><div class=\"line\">innodb_write_io_threads = 4</div><div class=\"line\">innodb_read_io_threads = 4</div><div class=\"line\">innodb_thread_concurrency = 0</div><div class=\"line\">innodb_purge_threads = 1</div><div class=\"line\">innodb_flush_log_at_trx_commit = 2</div><div class=\"line\">innodb_log_buffer_size = 2M</div><div class=\"line\">innodb_log_file_size = 32M</div><div class=\"line\">innodb_log_files_in_group = 3</div><div class=\"line\">innodb_max_dirty_pages_pct = 90</div><div class=\"line\">innodb_lock_wait_timeout = 120</div><div class=\"line\">bulk_insert_buffer_size = 8M</div><div class=\"line\">myisam_sort_buffer_size = 8M</div><div class=\"line\">myisam_max_sort_file_size = 10G</div><div class=\"line\">myisam_repair_threads = 1</div><div class=\"line\">interactive_timeout = 28800</div><div class=\"line\">wait_timeout = 28800</div><div class=\"line\">[mysqldump]</div><div class=\"line\">quick</div><div class=\"line\">max_allowed_packet = 16M</div><div class=\"line\">[myisamchk]</div><div class=\"line\">key_buffer_size = 8M</div><div class=\"line\">sort_buffer_size = 8M</div><div class=\"line\">read_buffer = 4M</div><div class=\"line\">write_buffer = 4M</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p>9.添加mysql的环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# echo -e &apos;\\n\\nexport PATH=/usr/local/mysql/bin:$PATH\\n&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</div></pre></td></tr></table></figure>\n<p>10.初始化数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql</div></pre></td></tr></table></figure>\n<p>11.启动数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl start mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl status mysqld</div><div class=\"line\">● mysqld.service - LSB: start and stop MySQL</div><div class=\"line\">Loaded: loaded (/etc/rc.d/init.d/mysqld)</div><div class=\"line\">Active: active (running) since 一 2016-07-18 11:15:35 CST; 8s ago</div><div class=\"line\">Docs: man:systemd-sysv-generator(8)</div><div class=\"line\">Process: 23927 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)</div><div class=\"line\">CGroup: /system.slice/mysqld.service</div><div class=\"line\">├─23940 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class=\"line\">└─24776 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-err...</div><div class=\"line\"></div><div class=\"line\">7月 18 11:15:32 graychen systemd[1]: Starting LSB: start and stop MySQL...</div><div class=\"line\">7月 18 11:15:35 graychen mysqld[23927]: Starting MySQL..[  OK   ]</div><div class=\"line\">7月 18 11:15:35 graychen systemd[1]: Started LSB: start and stop MySQL.</div></pre></td></tr></table></figure>\n<p>12.查看MySQL服务进程和端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# ps -ef | grep mysql</div><div class=\"line\">root     23940     1  0 11:15 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class=\"line\">mysql    24776 23940  0 11:15 ?        00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-error.log --open-files-limit=65535 --pid-file=/data/mysql/mysql.pid --socket=/dev/shm/mysql.sock --port=3306</div><div class=\"line\">[root@graychen mysql-5.7.13]# netstat -tunpl | grep 3306</div><div class=\"line\">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      24776/mysqld</div></pre></td></tr></table></figure></p>\n<p>13.设置数据库root用户密码</p>\n<p>MySQL和Oracle数据库一样，数据库也默认自带了一个 root 用户（这个和当前Linux主机上的root用户是完全不搭边的），我们在设置好MySQL数据库的安全配置后初始化root用户的密码。配制过程中，一路输入 y 就行了。这里只说明下MySQL5.7.13版本中，用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# mysql_secure_installation</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"mysql源码安装\"><a href=\"#mysql源码安装\" class=\"headerlink\" title=\"mysql源码安装\"></a>mysql源码安装</h2><p>1.安装编译源码需要的包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install make cmake gcc g++ bison libncurses5-dev</div></pre></td></tr></table></figure></p>\n<p>2.下载相应源码包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</div><div class=\"line\">[root@graychen ~]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.13.tar.gz</div></pre></td></tr></table></figure></p>\n<p>3.新建MySQL用户和用户组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# groupadd -r mysql &amp;&amp; useradd -r -g mysql -s /sbin/nologin -M mysql</div></pre></td></tr></table></figure></p>\n<p>4.预编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen ~]# tar -zxvf boost_1_59_0.tar.gz</div><div class=\"line\">[root@graychen data]# md5sum mysql-5.7.13.tar.gz </div><div class=\"line\">8fab75dbcafcd1374d07796bff88ae00  mysql-5.7.13.tar.gz</div><div class=\"line\">[root@graychen ~]# tar -zxvf mysql-5.7.13.tar.gz</div><div class=\"line\">[root@graychen data]# mkdir -p /data/mysql</div><div class=\"line\">[root@graychen data]# cd mysql-5.7.13</div><div class=\"line\">[root@graychen data]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \\</div><div class=\"line\">-DMYSQL_DATADIR=/data/mysql \\</div><div class=\"line\">-DWITH_BOOST=../boost_1_59_0 \\</div><div class=\"line\">-DSYSCONFDIR=/etc \\</div><div class=\"line\">-DWITH_INNOBASE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_PARTITION_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_FEDERATED_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DWITH_MYISAM_STORAGE_ENGINE=1 \\</div><div class=\"line\">-DENABLED_LOCAL_INFILE=1 \\</div><div class=\"line\">-DENABLE_DTRACE=0 \\</div><div class=\"line\">-DDEFAULT_CHARSET=utf8mb4 \\</div><div class=\"line\">-DDEFAULT_COLLATION=utf8mb4_general_ci \\</div><div class=\"line\">-DWITH_EMBEDDED_SERVER=1</div></pre></td></tr></table></figure>\n<p>5.编译安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# make -j `grep processor /proc/cpuinfo | wc -l`</div><div class=\"line\">#编译很消耗系统资源，小内存可能编译通不过make install</div><div class=\"line\">[root@graychen mysql-5.7.13]# make install</div></pre></td></tr></table></figure>\n<p>6.设置启动脚本，开机自启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# ls -lrt /usr/local/mysql</div><div class=\"line\">[root@graychen mysql-5.7.13]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# chmod +x /etc/init.d/mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl enable mysqld</div><div class=\"line\">mysqld.service is not a native service, redirecting to /sbin/chkconfig.</div><div class=\"line\">Executing /sbin/chkconfig mysqld on</div></pre></td></tr></table></figure>\n<p>7.配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/my.cnf，仅供参考 </div><div class=\"line\">[root@graychen mysql-5.7.13]# cat &gt; /etc/my.cnf &lt;&lt; EOF</div><div class=\"line\">[client]</div><div class=\"line\">port = 3306</div><div class=\"line\">socket = /dev/shm/mysql.sock</div><div class=\"line\">[mysqld]</div><div class=\"line\">port = 3306</div><div class=\"line\">socket = /dev/shm/mysql.sock</div><div class=\"line\">basedir = /usr/local/mysql</div><div class=\"line\">datadir = /data/mysql</div><div class=\"line\">pid-file = /data/mysql/mysql.pid</div><div class=\"line\">user = mysql</div><div class=\"line\">bind-address = 0.0.0.0</div><div class=\"line\">server-id = 1</div><div class=\"line\">init-connect = &apos;SET NAMES utf8mb4&apos;</div><div class=\"line\">character-set-server = utf8mb4</div><div class=\"line\">#skip-name-resolve</div><div class=\"line\">#skip-networking</div><div class=\"line\">back_log = 300</div><div class=\"line\">max_connections = 1000</div><div class=\"line\">max_connect_errors = 6000</div><div class=\"line\">open_files_limit = 65535</div><div class=\"line\">table_open_cache = 128</div><div class=\"line\">max_allowed_packet = 4M</div><div class=\"line\">binlog_cache_size = 1M</div><div class=\"line\">max_heap_table_size = 8M</div><div class=\"line\">tmp_table_size = 16M</div><div class=\"line\">read_buffer_size = 2M</div><div class=\"line\">read_rnd_buffer_size = 8M</div><div class=\"line\">sort_buffer_size = 8M</div><div class=\"line\">join_buffer_size = 8M</div><div class=\"line\">key_buffer_size = 4M</div><div class=\"line\">thread_cache_size = 8</div><div class=\"line\">query_cache_type = 1</div><div class=\"line\">query_cache_size = 8M</div><div class=\"line\">query_cache_limit = 2M</div><div class=\"line\">ft_min_word_len = 4</div><div class=\"line\">log_bin = mysql-bin</div><div class=\"line\">binlog_format = mixed</div><div class=\"line\">expire_logs_days = 30</div><div class=\"line\">log_error = /data/mysql/mysql-error.log</div><div class=\"line\">slow_query_log = 1</div><div class=\"line\">long_query_time = 1</div><div class=\"line\">slow_query_log_file = /data/mysql/mysql-slow.log</div><div class=\"line\">performance_schema = 0</div><div class=\"line\">explicit_defaults_for_timestamp</div><div class=\"line\">#lower_case_table_names = 1</div><div class=\"line\">skip-external-locking</div><div class=\"line\">default_storage_engine = InnoDB</div><div class=\"line\">#default-storage-engine = MyISAM</div><div class=\"line\">innodb_file_per_table = 1</div><div class=\"line\">innodb_open_files = 500</div><div class=\"line\">innodb_buffer_pool_size = 64M</div><div class=\"line\">innodb_write_io_threads = 4</div><div class=\"line\">innodb_read_io_threads = 4</div><div class=\"line\">innodb_thread_concurrency = 0</div><div class=\"line\">innodb_purge_threads = 1</div><div class=\"line\">innodb_flush_log_at_trx_commit = 2</div><div class=\"line\">innodb_log_buffer_size = 2M</div><div class=\"line\">innodb_log_file_size = 32M</div><div class=\"line\">innodb_log_files_in_group = 3</div><div class=\"line\">innodb_max_dirty_pages_pct = 90</div><div class=\"line\">innodb_lock_wait_timeout = 120</div><div class=\"line\">bulk_insert_buffer_size = 8M</div><div class=\"line\">myisam_sort_buffer_size = 8M</div><div class=\"line\">myisam_max_sort_file_size = 10G</div><div class=\"line\">myisam_repair_threads = 1</div><div class=\"line\">interactive_timeout = 28800</div><div class=\"line\">wait_timeout = 28800</div><div class=\"line\">[mysqldump]</div><div class=\"line\">quick</div><div class=\"line\">max_allowed_packet = 16M</div><div class=\"line\">[myisamchk]</div><div class=\"line\">key_buffer_size = 8M</div><div class=\"line\">sort_buffer_size = 8M</div><div class=\"line\">read_buffer = 4M</div><div class=\"line\">write_buffer = 4M</div><div class=\"line\">EOF</div></pre></td></tr></table></figure>\n<p>9.添加mysql的环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# echo -e &apos;\\n\\nexport PATH=/usr/local/mysql/bin:$PATH\\n&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</div></pre></td></tr></table></figure>\n<p>10.初始化数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql</div></pre></td></tr></table></figure>\n<p>11.启动数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl start mysqld</div><div class=\"line\">[root@graychen mysql-5.7.13]# systemctl status mysqld</div><div class=\"line\">● mysqld.service - LSB: start and stop MySQL</div><div class=\"line\">Loaded: loaded (/etc/rc.d/init.d/mysqld)</div><div class=\"line\">Active: active (running) since 一 2016-07-18 11:15:35 CST; 8s ago</div><div class=\"line\">Docs: man:systemd-sysv-generator(8)</div><div class=\"line\">Process: 23927 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)</div><div class=\"line\">CGroup: /system.slice/mysqld.service</div><div class=\"line\">├─23940 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class=\"line\">└─24776 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-err...</div><div class=\"line\"></div><div class=\"line\">7月 18 11:15:32 graychen systemd[1]: Starting LSB: start and stop MySQL...</div><div class=\"line\">7月 18 11:15:35 graychen mysqld[23927]: Starting MySQL..[  OK   ]</div><div class=\"line\">7月 18 11:15:35 graychen systemd[1]: Started LSB: start and stop MySQL.</div></pre></td></tr></table></figure>\n<p>12.查看MySQL服务进程和端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# ps -ef | grep mysql</div><div class=\"line\">root     23940     1  0 11:15 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class=\"line\">mysql    24776 23940  0 11:15 ?        00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-error.log --open-files-limit=65535 --pid-file=/data/mysql/mysql.pid --socket=/dev/shm/mysql.sock --port=3306</div><div class=\"line\">[root@graychen mysql-5.7.13]# netstat -tunpl | grep 3306</div><div class=\"line\">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      24776/mysqld</div></pre></td></tr></table></figure></p>\n<p>13.设置数据库root用户密码</p>\n<p>MySQL和Oracle数据库一样，数据库也默认自带了一个 root 用户（这个和当前Linux主机上的root用户是完全不搭边的），我们在设置好MySQL数据库的安全配置后初始化root用户的密码。配制过程中，一路输入 y 就行了。这里只说明下MySQL5.7.13版本中，用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@graychen mysql-5.7.13]# mysql_secure_installation</div></pre></td></tr></table></figure>\n"},{"title":"Composer包是怎样炼成的","date":"2016-10-19T03:20:43.000Z","_content":"\n>**Composer**是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 --[Composer中文网](http://www.phpcomposer.com/)\n\n关于Composer的安装和下载可以直接点击上方的链接查看，本篇博文主要讲解该怎样创建自己的Composer包，并把它提交到[packgist](https://packagist.org/)\n\n## 创建组件\n### 产商名称和包名\n在设置命名空间之前，先要确定产商名称和包名，类似于**laravel/framework**,确保它的唯一性，在packgist中不存在.厂商名称和包名是为了让packgist识别组件，而组件的命名空间是为了在php中使用组件，这是两个概念。\n### 文件系统结构\n- **src**:这个目录用于存放组件的源码   \n- **tests**:这个目录用于存放测试代码   \n- **composer.json**:Composer配置文件，用于描述组件，声明组件依赖以及自动加载配置等   \n- **README.md**:这个Markdown提供组件的相关信息,使用文档说明软件许可证等   \n- **CONTRIBUTING.md**:这个Markdown文件告知别人如何为这个组件做贡献  \n- **LICENSE**：纯文本文件，声明组件的软件许可证\n- **CHANGELOG.md**：Markdown文件，列出组件在每个版本中引入的改动\n\n### 文件系统结构\n我们新建一个组件目录（~/Packages/urlscanner），然后在urlscanner目录下通过如下命令生成composer.json文件：\ncomposer init\n\n然后在终端会让我们按照提示向导一步步填写composer.json内容：\n最后回车，会生成相应的composer.json文件，我们对该文件作如下修改：\n``` javascript\n{\n    \"name\": \"graychen/container\",\n    \"description\": \"a container for interface and container\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Graychen\",\n            \"email\": \"13780185250@sina.cn\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"require\": {},\n    \"require-dev\": {\n            \"phpunit/phpunit\" : \"~4.3\" \n        },\n    \"autoload\":{\n        \"psr-4\":{\n            \"graychen\\\\container\\\\\" : \"src\"\n        }\n    },\n    \"autoload-dev\":{\n        \"psr-4\":{\n            \"graychen\\\\container\\\\Tests\\\\\":\"tests/\"\n        }\n    }\n}\n\n```\n我们来仔细研究一下这个文件，看看每个部分究竟是什么意思：\n\n- name：组件的厂商名和包名，也是Packagist中的组件名\n- description：简要说明组件\n- keywords：描述属性的关键字\n- homepage：组件网站URL\n- license：PHP组件采用的软件许可证（更多软件许可证参考：http://choosealicense.com/）\n- authors：作者信息数组\n- support：组件用户获取技术支持的方式\n- require：组件自身依赖的组件\n- require-dev：开发这个组件所需的依赖\n- suggest：建议安装的组件\n- autoload：告诉Composer自动加载器如何自动加载这个组件\n\nREADEME.md\n\n通常这个是用户最先阅读的文件，对托管在Github和Bitbucket中的组件来说，更是如此。标准的READEME.md文件至少提供以下信息：\n- 组件的名称和描述\n- 安装说明\n- 使用说明\n- 测试说明\n- 贡献方式\n- 支持资源\n- 作者信息\n- 软件许可证\n\n实现组件\n\n开始之前我们使用如下命令安装依赖：\n``` php\ncomposer install\n```\n该命令会把依赖组件安装到vendor目录并生成自动加载器。\n安装好以后我们来实现组件的具体功能。将所有的类，接口和Trait都放到src这个目录下。\n``` php\n<?php\nnamespace container;\n/**\n* @brief 服务容器\n* author Graychen\n */\nclass Container implements \\ArrayAccess{\n    private $_bindings = [];//服务列表\n    private $_instances= [];//已经实例化的服务\n    //获取服务\n    public function get($name,$params=[]){\n        //先从实例化的列表中查找\n        if(isset($this->$_instances[$name])){\n            return $this->$_instances[$name]; \n        }\n        //检测有没有注册该服务\n        if(!isset($this->$_bindings[$name])){\n            return null;\n        }\n        $concrete = $this->$_bindings[$name]['class'];//对象具体注册内容\n        $obj = null;\n        if($concrete instanceof \\Closure){ //匿名函数方式\n            $obj = call_user_func_array($concrete,$params);\n        }elseif(is_string($concrete)){     //字符串方式\n            if(empty($params)){\n                $obj = new $concrete;\n            }else{\n                //带参数的类实例化,使用反射\n                $class = new \\reflectionClass($concrete);\n                $obj = $class->newInstanceArgs($params);\n            }\n        }\n        //如果是共享服务，则写入_instances列表，下次直接取回\n        if($this->_bindings[$name]['shared']==true && $ojb){\n            $this->_instances[$name]=$obj;\n        }\n        return $obj;\n    } \n    //检测是否已经绑定\n    public function has($name){\n        return isset($this->_bindings[$name]) or isset($this->_instances[$name]);\n    }\n    //卸载服务\n    public function remove($name){\n        unset($this->_bindings[$name],$this->_instances[$name]);\n    }\n    //设置服务\n    public function set($name,$class){\n        $this->_registerService($name,$class);\n    }\n    //设置共享服务\n    public function setShared($name,$class){\n        $this->_registerService($name,$class,true);\n    }\n    //注册服务\n    private function _registerService($name,$class,$shared=false){\n        $this->remove($name);\n        if(!($class instanceof \\Closure) && is_object($class)){\n            $this->_instances[$name]=$class;\n        }else{\n            $this->_bindings[$name]=array(\"class\"=>$class,\"shared\"=>$shared); \n        }\n    }\n    //ArrayAccess接口，检测服务是否存在\n    public function offsetExists($offset){\n        return $this->has($offset);\n    }\n    //ArrayAccess接口,以$di[$name]方式获取服务\n    public function offsetGet($offset){\n       return $this->get($offset); \n    }\n    //ArrayAccess接口,以$di[$name]方式获取服务\n    public function offsetSet($offset,$value){\n        return $this->set($offset,$value);\n    }\n    //卸载服务\n    public function offsetUnset($offset){\n        return $this->remove($offset);\n    }\n} \n```\n### 提交到packglist\n我们先将代码提交到GitHub,注意将vendor目录添加到.gitignore仓库,我的是graychen/container：\n``` git\ngit init\ngit remote add origin https://github.com/nonfu/urlscanner.git\ngit add .\ngit commit -m “urlscanner\"\ngit pull origin master\ngit push origin master\n```\n ![\"我是傲娇的效果图\"](/assets/blogImg/Graychen-Container.gif)\n 然后在Packagist中通过GitHub账户登录，通过https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：\n check成功后点击submit即可将组件提交到Packagist：\n ![\"我是傲娇的效果图\"](/assets/blogImg/Packagist.gif)\n## 使用组件\n 至此，我们已经成功将自己的组件提交到Packagist，现在任何人都可以使用Composer安装这个URL扫描器组件，然后在自己的PHP应用中使用。在终端执行如下命令安装这个组件：\n\n composer require graychen/container dev-master\n","source":"_posts/composer包是怎样炼成的.md","raw":"---\ntitle: Composer包是怎样炼成的\ndate: 2016-10-19 11:20:43\ntag: php\ncategories: 技术\n---\n\n>**Composer**是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 --[Composer中文网](http://www.phpcomposer.com/)\n\n关于Composer的安装和下载可以直接点击上方的链接查看，本篇博文主要讲解该怎样创建自己的Composer包，并把它提交到[packgist](https://packagist.org/)\n\n## 创建组件\n### 产商名称和包名\n在设置命名空间之前，先要确定产商名称和包名，类似于**laravel/framework**,确保它的唯一性，在packgist中不存在.厂商名称和包名是为了让packgist识别组件，而组件的命名空间是为了在php中使用组件，这是两个概念。\n### 文件系统结构\n- **src**:这个目录用于存放组件的源码   \n- **tests**:这个目录用于存放测试代码   \n- **composer.json**:Composer配置文件，用于描述组件，声明组件依赖以及自动加载配置等   \n- **README.md**:这个Markdown提供组件的相关信息,使用文档说明软件许可证等   \n- **CONTRIBUTING.md**:这个Markdown文件告知别人如何为这个组件做贡献  \n- **LICENSE**：纯文本文件，声明组件的软件许可证\n- **CHANGELOG.md**：Markdown文件，列出组件在每个版本中引入的改动\n\n### 文件系统结构\n我们新建一个组件目录（~/Packages/urlscanner），然后在urlscanner目录下通过如下命令生成composer.json文件：\ncomposer init\n\n然后在终端会让我们按照提示向导一步步填写composer.json内容：\n最后回车，会生成相应的composer.json文件，我们对该文件作如下修改：\n``` javascript\n{\n    \"name\": \"graychen/container\",\n    \"description\": \"a container for interface and container\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Graychen\",\n            \"email\": \"13780185250@sina.cn\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"require\": {},\n    \"require-dev\": {\n            \"phpunit/phpunit\" : \"~4.3\" \n        },\n    \"autoload\":{\n        \"psr-4\":{\n            \"graychen\\\\container\\\\\" : \"src\"\n        }\n    },\n    \"autoload-dev\":{\n        \"psr-4\":{\n            \"graychen\\\\container\\\\Tests\\\\\":\"tests/\"\n        }\n    }\n}\n\n```\n我们来仔细研究一下这个文件，看看每个部分究竟是什么意思：\n\n- name：组件的厂商名和包名，也是Packagist中的组件名\n- description：简要说明组件\n- keywords：描述属性的关键字\n- homepage：组件网站URL\n- license：PHP组件采用的软件许可证（更多软件许可证参考：http://choosealicense.com/）\n- authors：作者信息数组\n- support：组件用户获取技术支持的方式\n- require：组件自身依赖的组件\n- require-dev：开发这个组件所需的依赖\n- suggest：建议安装的组件\n- autoload：告诉Composer自动加载器如何自动加载这个组件\n\nREADEME.md\n\n通常这个是用户最先阅读的文件，对托管在Github和Bitbucket中的组件来说，更是如此。标准的READEME.md文件至少提供以下信息：\n- 组件的名称和描述\n- 安装说明\n- 使用说明\n- 测试说明\n- 贡献方式\n- 支持资源\n- 作者信息\n- 软件许可证\n\n实现组件\n\n开始之前我们使用如下命令安装依赖：\n``` php\ncomposer install\n```\n该命令会把依赖组件安装到vendor目录并生成自动加载器。\n安装好以后我们来实现组件的具体功能。将所有的类，接口和Trait都放到src这个目录下。\n``` php\n<?php\nnamespace container;\n/**\n* @brief 服务容器\n* author Graychen\n */\nclass Container implements \\ArrayAccess{\n    private $_bindings = [];//服务列表\n    private $_instances= [];//已经实例化的服务\n    //获取服务\n    public function get($name,$params=[]){\n        //先从实例化的列表中查找\n        if(isset($this->$_instances[$name])){\n            return $this->$_instances[$name]; \n        }\n        //检测有没有注册该服务\n        if(!isset($this->$_bindings[$name])){\n            return null;\n        }\n        $concrete = $this->$_bindings[$name]['class'];//对象具体注册内容\n        $obj = null;\n        if($concrete instanceof \\Closure){ //匿名函数方式\n            $obj = call_user_func_array($concrete,$params);\n        }elseif(is_string($concrete)){     //字符串方式\n            if(empty($params)){\n                $obj = new $concrete;\n            }else{\n                //带参数的类实例化,使用反射\n                $class = new \\reflectionClass($concrete);\n                $obj = $class->newInstanceArgs($params);\n            }\n        }\n        //如果是共享服务，则写入_instances列表，下次直接取回\n        if($this->_bindings[$name]['shared']==true && $ojb){\n            $this->_instances[$name]=$obj;\n        }\n        return $obj;\n    } \n    //检测是否已经绑定\n    public function has($name){\n        return isset($this->_bindings[$name]) or isset($this->_instances[$name]);\n    }\n    //卸载服务\n    public function remove($name){\n        unset($this->_bindings[$name],$this->_instances[$name]);\n    }\n    //设置服务\n    public function set($name,$class){\n        $this->_registerService($name,$class);\n    }\n    //设置共享服务\n    public function setShared($name,$class){\n        $this->_registerService($name,$class,true);\n    }\n    //注册服务\n    private function _registerService($name,$class,$shared=false){\n        $this->remove($name);\n        if(!($class instanceof \\Closure) && is_object($class)){\n            $this->_instances[$name]=$class;\n        }else{\n            $this->_bindings[$name]=array(\"class\"=>$class,\"shared\"=>$shared); \n        }\n    }\n    //ArrayAccess接口，检测服务是否存在\n    public function offsetExists($offset){\n        return $this->has($offset);\n    }\n    //ArrayAccess接口,以$di[$name]方式获取服务\n    public function offsetGet($offset){\n       return $this->get($offset); \n    }\n    //ArrayAccess接口,以$di[$name]方式获取服务\n    public function offsetSet($offset,$value){\n        return $this->set($offset,$value);\n    }\n    //卸载服务\n    public function offsetUnset($offset){\n        return $this->remove($offset);\n    }\n} \n```\n### 提交到packglist\n我们先将代码提交到GitHub,注意将vendor目录添加到.gitignore仓库,我的是graychen/container：\n``` git\ngit init\ngit remote add origin https://github.com/nonfu/urlscanner.git\ngit add .\ngit commit -m “urlscanner\"\ngit pull origin master\ngit push origin master\n```\n ![\"我是傲娇的效果图\"](/assets/blogImg/Graychen-Container.gif)\n 然后在Packagist中通过GitHub账户登录，通过https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：\n check成功后点击submit即可将组件提交到Packagist：\n ![\"我是傲娇的效果图\"](/assets/blogImg/Packagist.gif)\n## 使用组件\n 至此，我们已经成功将自己的组件提交到Packagist，现在任何人都可以使用Composer安装这个URL扫描器组件，然后在自己的PHP应用中使用。在终端执行如下命令安装这个组件：\n\n composer require graychen/container dev-master\n","slug":"composer包是怎样炼成的","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzc70001ur7y1ra184rd","content":"<blockquote>\n<p><strong>Composer</strong>是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 –<a href=\"http://www.phpcomposer.com/\" target=\"_blank\" rel=\"external\">Composer中文网</a></p>\n</blockquote>\n<p>关于Composer的安装和下载可以直接点击上方的链接查看，本篇博文主要讲解该怎样创建自己的Composer包，并把它提交到<a href=\"https://packagist.org/\" target=\"_blank\" rel=\"external\">packgist</a></p>\n<h2 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h2><h3 id=\"产商名称和包名\"><a href=\"#产商名称和包名\" class=\"headerlink\" title=\"产商名称和包名\"></a>产商名称和包名</h3><p>在设置命名空间之前，先要确定产商名称和包名，类似于<strong>laravel/framework</strong>,确保它的唯一性，在packgist中不存在.厂商名称和包名是为了让packgist识别组件，而组件的命名空间是为了在php中使用组件，这是两个概念。</p>\n<h3 id=\"文件系统结构\"><a href=\"#文件系统结构\" class=\"headerlink\" title=\"文件系统结构\"></a>文件系统结构</h3><ul>\n<li><strong>src</strong>:这个目录用于存放组件的源码   </li>\n<li><strong>tests</strong>:这个目录用于存放测试代码   </li>\n<li><strong>composer.json</strong>:Composer配置文件，用于描述组件，声明组件依赖以及自动加载配置等   </li>\n<li><strong>README.md</strong>:这个Markdown提供组件的相关信息,使用文档说明软件许可证等   </li>\n<li><strong>CONTRIBUTING.md</strong>:这个Markdown文件告知别人如何为这个组件做贡献  </li>\n<li><strong>LICENSE</strong>：纯文本文件，声明组件的软件许可证</li>\n<li><strong>CHANGELOG.md</strong>：Markdown文件，列出组件在每个版本中引入的改动</li>\n</ul>\n<h3 id=\"文件系统结构-1\"><a href=\"#文件系统结构-1\" class=\"headerlink\" title=\"文件系统结构\"></a>文件系统结构</h3><p>我们新建一个组件目录（~/Packages/urlscanner），然后在urlscanner目录下通过如下命令生成composer.json文件：<br>composer init</p>\n<p>然后在终端会让我们按照提示向导一步步填写composer.json内容：<br>最后回车，会生成相应的composer.json文件，我们对该文件作如下修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"graychen/container\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"a container for interface and container\"</span>,</div><div class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Graychen\"</span>,</div><div class=\"line\">            <span class=\"string\">\"email\"</span>: <span class=\"string\">\"13780185250@sina.cn\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"string\">\"require\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"string\">\"require-dev\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"phpunit/phpunit\"</span> : <span class=\"string\">\"~4.3\"</span> </div><div class=\"line\">        &#125;,</div><div class=\"line\">    <span class=\"string\">\"autoload\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"psr-4\"</span>:&#123;</div><div class=\"line\">            <span class=\"string\">\"graychen\\\\container\\\\\"</span> : <span class=\"string\">\"src\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"autoload-dev\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"psr-4\"</span>:&#123;</div><div class=\"line\">            <span class=\"string\">\"graychen\\\\container\\\\Tests\\\\\"</span>:<span class=\"string\">\"tests/\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来仔细研究一下这个文件，看看每个部分究竟是什么意思：</p>\n<ul>\n<li>name：组件的厂商名和包名，也是Packagist中的组件名</li>\n<li>description：简要说明组件</li>\n<li>keywords：描述属性的关键字</li>\n<li>homepage：组件网站URL</li>\n<li>license：PHP组件采用的软件许可证（更多软件许可证参考：<a href=\"http://choosealicense.com/）\" target=\"_blank\" rel=\"external\">http://choosealicense.com/）</a></li>\n<li>authors：作者信息数组</li>\n<li>support：组件用户获取技术支持的方式</li>\n<li>require：组件自身依赖的组件</li>\n<li>require-dev：开发这个组件所需的依赖</li>\n<li>suggest：建议安装的组件</li>\n<li>autoload：告诉Composer自动加载器如何自动加载这个组件</li>\n</ul>\n<p>READEME.md</p>\n<p>通常这个是用户最先阅读的文件，对托管在Github和Bitbucket中的组件来说，更是如此。标准的READEME.md文件至少提供以下信息：</p>\n<ul>\n<li>组件的名称和描述</li>\n<li>安装说明</li>\n<li>使用说明</li>\n<li>测试说明</li>\n<li>贡献方式</li>\n<li>支持资源</li>\n<li>作者信息</li>\n<li>软件许可证</li>\n</ul>\n<p>实现组件</p>\n<p>开始之前我们使用如下命令安装依赖：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer install</div></pre></td></tr></table></figure></p>\n<p>该命令会把依赖组件安装到vendor目录并生成自动加载器。<br>安装好以后我们来实现组件的具体功能。将所有的类，接口和Trait都放到src这个目录下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">container</span>;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* <span class=\"doctag\">@brief</span> 服务容器</div><div class=\"line\">* author Graychen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">ArrayAccess</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_bindings = [];<span class=\"comment\">//服务列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_instances= [];<span class=\"comment\">//已经实例化的服务</span></div><div class=\"line\">    <span class=\"comment\">//获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$_instances[$name]))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;$_instances[$name]; </div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$_bindings[$name]))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $concrete = <span class=\"keyword\">$this</span>-&gt;$_bindings[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\">        $obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">            $obj = call_user_func_array($concrete,$params);</div><div class=\"line\">        &#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123;     <span class=\"comment\">//字符串方式</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">                $obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">                $class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">                $obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $obj;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"comment\">//检测是否已经绑定</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">has</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name]) <span class=\"keyword\">or</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//卸载服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name],<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置共享服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setShared</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class,<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//注册服务</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_registerService</span><span class=\"params\">($name,$class,$shared=false)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;remove($name);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!($class <span class=\"keyword\">instanceof</span> \\Closure) &amp;&amp; is_object($class))&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$class;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_bindings[$name]=<span class=\"keyword\">array</span>(<span class=\"string\">\"class\"</span>=&gt;$class,<span class=\"string\">\"shared\"</span>=&gt;$shared); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口，检测服务是否存在</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;has($offset);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get($offset); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span><span class=\"params\">($offset,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;set($offset,$value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//卸载服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;remove($offset);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到packglist\"><a href=\"#提交到packglist\" class=\"headerlink\" title=\"提交到packglist\"></a>提交到packglist</h3><p>我们先将代码提交到GitHub,注意将vendor目录添加到.gitignore仓库,我的是graychen/container：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin https://github.com/nonfu/urlscanner.git</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m “urlscanner&quot;</div><div class=\"line\">git pull origin master</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure></p>\n<p> <img src=\"/assets/blogImg/Graychen-Container.gif\" alt=\"&quot;我是傲娇的效果图&quot;\"><br> 然后在Packagist中通过GitHub账户登录，通过<a href=\"https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：\" target=\"_blank\" rel=\"external\">https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：</a><br> check成功后点击submit即可将组件提交到Packagist：<br> <img src=\"/assets/blogImg/Packagist.gif\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h2 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h2><p> 至此，我们已经成功将自己的组件提交到Packagist，现在任何人都可以使用Composer安装这个URL扫描器组件，然后在自己的PHP应用中使用。在终端执行如下命令安装这个组件：</p>\n<p> composer require graychen/container dev-master</p>\n","excerpt":"","more":"<blockquote>\n<p><strong>Composer</strong>是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 –<a href=\"http://www.phpcomposer.com/\">Composer中文网</a></p>\n</blockquote>\n<p>关于Composer的安装和下载可以直接点击上方的链接查看，本篇博文主要讲解该怎样创建自己的Composer包，并把它提交到<a href=\"https://packagist.org/\">packgist</a></p>\n<h2 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h2><h3 id=\"产商名称和包名\"><a href=\"#产商名称和包名\" class=\"headerlink\" title=\"产商名称和包名\"></a>产商名称和包名</h3><p>在设置命名空间之前，先要确定产商名称和包名，类似于<strong>laravel/framework</strong>,确保它的唯一性，在packgist中不存在.厂商名称和包名是为了让packgist识别组件，而组件的命名空间是为了在php中使用组件，这是两个概念。</p>\n<h3 id=\"文件系统结构\"><a href=\"#文件系统结构\" class=\"headerlink\" title=\"文件系统结构\"></a>文件系统结构</h3><ul>\n<li><strong>src</strong>:这个目录用于存放组件的源码   </li>\n<li><strong>tests</strong>:这个目录用于存放测试代码   </li>\n<li><strong>composer.json</strong>:Composer配置文件，用于描述组件，声明组件依赖以及自动加载配置等   </li>\n<li><strong>README.md</strong>:这个Markdown提供组件的相关信息,使用文档说明软件许可证等   </li>\n<li><strong>CONTRIBUTING.md</strong>:这个Markdown文件告知别人如何为这个组件做贡献  </li>\n<li><strong>LICENSE</strong>：纯文本文件，声明组件的软件许可证</li>\n<li><strong>CHANGELOG.md</strong>：Markdown文件，列出组件在每个版本中引入的改动</li>\n</ul>\n<h3 id=\"文件系统结构-1\"><a href=\"#文件系统结构-1\" class=\"headerlink\" title=\"文件系统结构\"></a>文件系统结构</h3><p>我们新建一个组件目录（~/Packages/urlscanner），然后在urlscanner目录下通过如下命令生成composer.json文件：<br>composer init</p>\n<p>然后在终端会让我们按照提示向导一步步填写composer.json内容：<br>最后回车，会生成相应的composer.json文件，我们对该文件作如下修改：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"graychen/container\"</span>,</div><div class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"a container for interface and container\"</span>,</div><div class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"string\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Graychen\"</span>,</div><div class=\"line\">            <span class=\"string\">\"email\"</span>: <span class=\"string\">\"13780185250@sina.cn\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"string\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"string\">\"require\"</span>: &#123;&#125;,</div><div class=\"line\">    <span class=\"string\">\"require-dev\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"phpunit/phpunit\"</span> : <span class=\"string\">\"~4.3\"</span> </div><div class=\"line\">        &#125;,</div><div class=\"line\">    <span class=\"string\">\"autoload\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"psr-4\"</span>:&#123;</div><div class=\"line\">            <span class=\"string\">\"graychen\\\\container\\\\\"</span> : <span class=\"string\">\"src\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"autoload-dev\"</span>:&#123;</div><div class=\"line\">        <span class=\"string\">\"psr-4\"</span>:&#123;</div><div class=\"line\">            <span class=\"string\">\"graychen\\\\container\\\\Tests\\\\\"</span>:<span class=\"string\">\"tests/\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们来仔细研究一下这个文件，看看每个部分究竟是什么意思：</p>\n<ul>\n<li>name：组件的厂商名和包名，也是Packagist中的组件名</li>\n<li>description：简要说明组件</li>\n<li>keywords：描述属性的关键字</li>\n<li>homepage：组件网站URL</li>\n<li>license：PHP组件采用的软件许可证（更多软件许可证参考：<a href=\"http://choosealicense.com/）\">http://choosealicense.com/）</a></li>\n<li>authors：作者信息数组</li>\n<li>support：组件用户获取技术支持的方式</li>\n<li>require：组件自身依赖的组件</li>\n<li>require-dev：开发这个组件所需的依赖</li>\n<li>suggest：建议安装的组件</li>\n<li>autoload：告诉Composer自动加载器如何自动加载这个组件</li>\n</ul>\n<p>READEME.md</p>\n<p>通常这个是用户最先阅读的文件，对托管在Github和Bitbucket中的组件来说，更是如此。标准的READEME.md文件至少提供以下信息：</p>\n<ul>\n<li>组件的名称和描述</li>\n<li>安装说明</li>\n<li>使用说明</li>\n<li>测试说明</li>\n<li>贡献方式</li>\n<li>支持资源</li>\n<li>作者信息</li>\n<li>软件许可证</li>\n</ul>\n<p>实现组件</p>\n<p>开始之前我们使用如下命令安装依赖：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer install</div></pre></td></tr></table></figure></p>\n<p>该命令会把依赖组件安装到vendor目录并生成自动加载器。<br>安装好以后我们来实现组件的具体功能。将所有的类，接口和Trait都放到src这个目录下。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">container</span>;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* <span class=\"doctag\">@brief</span> 服务容器</div><div class=\"line\">* author Graychen</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">ArrayAccess</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> $_bindings = [];<span class=\"comment\">//服务列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> $_instances= [];<span class=\"comment\">//已经实例化的服务</span></div><div class=\"line\">    <span class=\"comment\">//获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$_instances[$name]))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;$_instances[$name]; </div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$_bindings[$name]))&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $concrete = <span class=\"keyword\">$this</span>-&gt;$_bindings[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\">        $obj = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">            $obj = call_user_func_array($concrete,$params);</div><div class=\"line\">        &#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123;     <span class=\"comment\">//字符串方式</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">                $obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                <span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">                $class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">                $obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $obj;</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"comment\">//检测是否已经绑定</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">has</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name]) <span class=\"keyword\">or</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//卸载服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_bindings[$name],<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置共享服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setShared</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class,<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//注册服务</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_registerService</span><span class=\"params\">($name,$class,$shared=false)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">$this</span>-&gt;remove($name);</div><div class=\"line\">        <span class=\"keyword\">if</span>(!($class <span class=\"keyword\">instanceof</span> \\Closure) &amp;&amp; is_object($class))&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$class;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">$this</span>-&gt;_bindings[$name]=<span class=\"keyword\">array</span>(<span class=\"string\">\"class\"</span>=&gt;$class,<span class=\"string\">\"shared\"</span>=&gt;$shared); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口，检测服务是否存在</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;has($offset);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get($offset); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span><span class=\"params\">($offset,$value)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;set($offset,$value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//卸载服务</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;remove($offset);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"提交到packglist\"><a href=\"#提交到packglist\" class=\"headerlink\" title=\"提交到packglist\"></a>提交到packglist</h3><p>我们先将代码提交到GitHub,注意将vendor目录添加到.gitignore仓库,我的是graychen/container：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin https://github.com/nonfu/urlscanner.git</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m “urlscanner&quot;</div><div class=\"line\">git pull origin master</div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure></p>\n<p> <img src=\"/assets/blogImg/Graychen-Container.gif\" alt=\"&quot;我是傲娇的效果图&quot;\"><br> 然后在Packagist中通过GitHub账户登录，通过<a href=\"https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：\">https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：</a><br> check成功后点击submit即可将组件提交到Packagist：<br> <img src=\"/assets/blogImg/Packagist.gif\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h2 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h2><p> 至此，我们已经成功将自己的组件提交到Packagist，现在任何人都可以使用Composer安装这个URL扫描器组件，然后在自己的PHP应用中使用。在终端执行如下命令安装这个组件：</p>\n<p> composer require graychen/container dev-master</p>\n"},{"title":"vichrome像vi一样操作你的chrome浏览器","date":"2016-10-18T01:24:53.000Z","_content":"**vichrome**是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。\n下面是它的操作命令：\n## 基础篇\n- k 上移 \n- j 下移 \n- H 后退 \n- L 前进\n- gg 飞到顶部 \n- G 掉到底部 \n- gt 去下一个标签 (ctrl+l) \n- gT 去上一个标签 (ctrl+h)\n- t 新开一个标签 \n- x 关闭当前标签页 \n- X 关闭当前标签页并跳到下一个标签页  \n- u 恢复刚刚的标签页 \n- r 刷新 \n- f 进入f模式(可以点击链接) \n- F 在新标签中进入f模式 \n- i 聚焦在第一个输入框\n- esc 退出\n## 进阶篇\n- ctrl+f 下一页\n- ctrl+b 上一页\n- ctrl+d 下半页\n- ctrl+u 上半页\n- / 搜索\n- ? 反向搜索\n- a 在带链接的文本中搜索\n- n 下一个搜索结果\n- N 上一个搜索结果\n- tab 下一个候补选项\n- shift+tab 上一个候补选项\n- : 进入命令模式\n- yy 复制url\n- p/P 打开刚刚复制的url\n- o/O 打开(输入url)\n- s/S 用搜索引擎搜索\n- b/B 打开收藏夹\n## 高级篇\n- gp 新开一个窗口(对当前标签页)\n\n\n\n","source":"_posts/vichrome像vi一样操作你的chrome浏览器.md","raw":"---\ntitle: vichrome像vi一样操作你的chrome浏览器\ndate: 2016-10-18 09:24:53\ntag: 工具\ncategories: 技术\n\n---\n**vichrome**是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。\n下面是它的操作命令：\n## 基础篇\n- k 上移 \n- j 下移 \n- H 后退 \n- L 前进\n- gg 飞到顶部 \n- G 掉到底部 \n- gt 去下一个标签 (ctrl+l) \n- gT 去上一个标签 (ctrl+h)\n- t 新开一个标签 \n- x 关闭当前标签页 \n- X 关闭当前标签页并跳到下一个标签页  \n- u 恢复刚刚的标签页 \n- r 刷新 \n- f 进入f模式(可以点击链接) \n- F 在新标签中进入f模式 \n- i 聚焦在第一个输入框\n- esc 退出\n## 进阶篇\n- ctrl+f 下一页\n- ctrl+b 上一页\n- ctrl+d 下半页\n- ctrl+u 上半页\n- / 搜索\n- ? 反向搜索\n- a 在带链接的文本中搜索\n- n 下一个搜索结果\n- N 上一个搜索结果\n- tab 下一个候补选项\n- shift+tab 上一个候补选项\n- : 进入命令模式\n- yy 复制url\n- p/P 打开刚刚复制的url\n- o/O 打开(输入url)\n- s/S 用搜索引擎搜索\n- b/B 打开收藏夹\n## 高级篇\n- gp 新开一个窗口(对当前标签页)\n\n\n\n","slug":"vichrome像vi一样操作你的chrome浏览器","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzcg0003ur7y686wvdyj","content":"<p><strong>vichrome</strong>是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。<br>下面是它的操作命令：</p>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li>k 上移 </li>\n<li>j 下移 </li>\n<li>H 后退 </li>\n<li>L 前进</li>\n<li>gg 飞到顶部 </li>\n<li>G 掉到底部 </li>\n<li>gt 去下一个标签 (ctrl+l) </li>\n<li>gT 去上一个标签 (ctrl+h)</li>\n<li>t 新开一个标签 </li>\n<li>x 关闭当前标签页 </li>\n<li>X 关闭当前标签页并跳到下一个标签页  </li>\n<li>u 恢复刚刚的标签页 </li>\n<li>r 刷新 </li>\n<li>f 进入f模式(可以点击链接) </li>\n<li>F 在新标签中进入f模式 </li>\n<li>i 聚焦在第一个输入框</li>\n<li>esc 退出<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2></li>\n<li>ctrl+f 下一页</li>\n<li>ctrl+b 上一页</li>\n<li>ctrl+d 下半页</li>\n<li>ctrl+u 上半页</li>\n<li>/ 搜索</li>\n<li>? 反向搜索</li>\n<li>a 在带链接的文本中搜索</li>\n<li>n 下一个搜索结果</li>\n<li>N 上一个搜索结果</li>\n<li>tab 下一个候补选项</li>\n<li>shift+tab 上一个候补选项</li>\n<li>: 进入命令模式</li>\n<li>yy 复制url</li>\n<li>p/P 打开刚刚复制的url</li>\n<li>o/O 打开(输入url)</li>\n<li>s/S 用搜索引擎搜索</li>\n<li>b/B 打开收藏夹<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2></li>\n<li>gp 新开一个窗口(对当前标签页)</li>\n</ul>\n","excerpt":"","more":"<p><strong>vichrome</strong>是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。<br>下面是它的操作命令：</p>\n<h2 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h2><ul>\n<li>k 上移 </li>\n<li>j 下移 </li>\n<li>H 后退 </li>\n<li>L 前进</li>\n<li>gg 飞到顶部 </li>\n<li>G 掉到底部 </li>\n<li>gt 去下一个标签 (ctrl+l) </li>\n<li>gT 去上一个标签 (ctrl+h)</li>\n<li>t 新开一个标签 </li>\n<li>x 关闭当前标签页 </li>\n<li>X 关闭当前标签页并跳到下一个标签页  </li>\n<li>u 恢复刚刚的标签页 </li>\n<li>r 刷新 </li>\n<li>f 进入f模式(可以点击链接) </li>\n<li>F 在新标签中进入f模式 </li>\n<li>i 聚焦在第一个输入框</li>\n<li>esc 退出<h2 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h2></li>\n<li>ctrl+f 下一页</li>\n<li>ctrl+b 上一页</li>\n<li>ctrl+d 下半页</li>\n<li>ctrl+u 上半页</li>\n<li>/ 搜索</li>\n<li>? 反向搜索</li>\n<li>a 在带链接的文本中搜索</li>\n<li>n 下一个搜索结果</li>\n<li>N 上一个搜索结果</li>\n<li>tab 下一个候补选项</li>\n<li>shift+tab 上一个候补选项</li>\n<li>: 进入命令模式</li>\n<li>yy 复制url</li>\n<li>p/P 打开刚刚复制的url</li>\n<li>o/O 打开(输入url)</li>\n<li>s/S 用搜索引擎搜索</li>\n<li>b/B 打开收藏夹<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2></li>\n<li>gp 新开一个窗口(对当前标签页)</li>\n</ul>\n"},{"title":"vi的使用总结","date":"2016-09-21T14:15:36.000Z","_content":"# 初级篇\n## 移动篇\n- 上 k\n- 下 j\n- 左 h\n- 右 l\n\n- 至顶 gg\n- 至尾部 Shift+g\n- 行跳转 行号+gg\n\n- 行首 Shift+6 (^)\n- 行尾 Shift+4 ($) \n\n- 词组移动(词首) w \n- 词组移动(词首) W \n- 词组移动(词尾) e \n- 词组移动(词尾) E \n\n- 移动到查找的字母后 f\n- 移动到查找的字母后 F\n\n## 操作篇\n### 增    \n- 在单词前插入 i\n- 在单词前插入 a\n- 在句首前插入 I\n- 在句尾插入 A\n- 在下一行插入 o\n- 在上一行插入 O\n### 删    \n- 删除光标行内容 d\n- 删除光标至尾行内容 D\n- 删除当前行及n-1行数 数字dd\n### 改    \n- 复制 yy\n- 粘贴 p\n- 替换插入 s\n- 替换整句插入 S\n- 替换单个字母 r\n- 接下来的子都要替换 R\n- 当前行替换第一个单词 :s/oldwords/newwords/\n- 替换当前行所有单词 :s/oldwords/newwords/g\n- 替换每一行的第一个单词 :%s/oldwords/newwords/\n- 替换每一行的单词 :%s/oldwords/newwords/g\n\n### 查    \n- 向后查找 /\n- 向前查找 ?\n\n## 选中篇\n- 左选择 v+h\n- 右选择 v+l\n- 上选择 v+k\n- 下选择 v+j\n\n- 选择当前行V(shift+v) \n- 选择向上行V+k(shift+v) \n- 选择向下行V+j(shift+v) \n\n- 括号内的选择 v+i+) (不含括号)\n- 括号内的选择 v+a+) (包含括号)\n\n- 居中显示 zz \n- 头部显示 zt \n- 尾巴显示 zb \n## 退出篇\n- 不保存退出 :q \n- 保存退出 :wq \n- 保存 :w \n- 强制退出 :q! \n- 强制退出 ctrl+z \n- 恢复 fg\n## 文件切换篇\n- 向右切换 tg\n- 向左切换 tG\n\n","source":"_posts/vi的使用总结.md","raw":"---\ntitle: vi的使用总结\ndate: 2016-09-21 22:15:36\ntags: 编辑器\ncategories: 技术\n\n---\n# 初级篇\n## 移动篇\n- 上 k\n- 下 j\n- 左 h\n- 右 l\n\n- 至顶 gg\n- 至尾部 Shift+g\n- 行跳转 行号+gg\n\n- 行首 Shift+6 (^)\n- 行尾 Shift+4 ($) \n\n- 词组移动(词首) w \n- 词组移动(词首) W \n- 词组移动(词尾) e \n- 词组移动(词尾) E \n\n- 移动到查找的字母后 f\n- 移动到查找的字母后 F\n\n## 操作篇\n### 增    \n- 在单词前插入 i\n- 在单词前插入 a\n- 在句首前插入 I\n- 在句尾插入 A\n- 在下一行插入 o\n- 在上一行插入 O\n### 删    \n- 删除光标行内容 d\n- 删除光标至尾行内容 D\n- 删除当前行及n-1行数 数字dd\n### 改    \n- 复制 yy\n- 粘贴 p\n- 替换插入 s\n- 替换整句插入 S\n- 替换单个字母 r\n- 接下来的子都要替换 R\n- 当前行替换第一个单词 :s/oldwords/newwords/\n- 替换当前行所有单词 :s/oldwords/newwords/g\n- 替换每一行的第一个单词 :%s/oldwords/newwords/\n- 替换每一行的单词 :%s/oldwords/newwords/g\n\n### 查    \n- 向后查找 /\n- 向前查找 ?\n\n## 选中篇\n- 左选择 v+h\n- 右选择 v+l\n- 上选择 v+k\n- 下选择 v+j\n\n- 选择当前行V(shift+v) \n- 选择向上行V+k(shift+v) \n- 选择向下行V+j(shift+v) \n\n- 括号内的选择 v+i+) (不含括号)\n- 括号内的选择 v+a+) (包含括号)\n\n- 居中显示 zz \n- 头部显示 zt \n- 尾巴显示 zb \n## 退出篇\n- 不保存退出 :q \n- 保存退出 :wq \n- 保存 :w \n- 强制退出 :q! \n- 强制退出 ctrl+z \n- 恢复 fg\n## 文件切换篇\n- 向右切换 tg\n- 向左切换 tG\n\n","slug":"vi的使用总结","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzcm0005ur7y2isn8pkk","content":"<h1 id=\"初级篇\"><a href=\"#初级篇\" class=\"headerlink\" title=\"初级篇\"></a>初级篇</h1><h2 id=\"移动篇\"><a href=\"#移动篇\" class=\"headerlink\" title=\"移动篇\"></a>移动篇</h2><ul>\n<li>上 k</li>\n<li>下 j</li>\n<li>左 h</li>\n<li><p>右 l</p>\n</li>\n<li><p>至顶 gg</p>\n</li>\n<li>至尾部 Shift+g</li>\n<li><p>行跳转 行号+gg</p>\n</li>\n<li><p>行首 Shift+6 (^)</p>\n</li>\n<li><p>行尾 Shift+4 ($) </p>\n</li>\n<li><p>词组移动(词首) w </p>\n</li>\n<li>词组移动(词首) W </li>\n<li>词组移动(词尾) e </li>\n<li><p>词组移动(词尾) E </p>\n</li>\n<li><p>移动到查找的字母后 f</p>\n</li>\n<li>移动到查找的字母后 F</li>\n</ul>\n<h2 id=\"操作篇\"><a href=\"#操作篇\" class=\"headerlink\" title=\"操作篇\"></a>操作篇</h2><h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h3><ul>\n<li>在单词前插入 i</li>\n<li>在单词前插入 a</li>\n<li>在句首前插入 I</li>\n<li>在句尾插入 A</li>\n<li>在下一行插入 o</li>\n<li>在上一行插入 O<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h3></li>\n<li>删除光标行内容 d</li>\n<li>删除光标至尾行内容 D</li>\n<li>删除当前行及n-1行数 数字dd<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h3></li>\n<li>复制 yy</li>\n<li>粘贴 p</li>\n<li>替换插入 s</li>\n<li>替换整句插入 S</li>\n<li>替换单个字母 r</li>\n<li>接下来的子都要替换 R</li>\n<li>当前行替换第一个单词 :s/oldwords/newwords/</li>\n<li>替换当前行所有单词 :s/oldwords/newwords/g</li>\n<li>替换每一行的第一个单词 :%s/oldwords/newwords/</li>\n<li>替换每一行的单词 :%s/oldwords/newwords/g</li>\n</ul>\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h3><ul>\n<li>向后查找 /</li>\n<li>向前查找 ?</li>\n</ul>\n<h2 id=\"选中篇\"><a href=\"#选中篇\" class=\"headerlink\" title=\"选中篇\"></a>选中篇</h2><ul>\n<li>左选择 v+h</li>\n<li>右选择 v+l</li>\n<li>上选择 v+k</li>\n<li><p>下选择 v+j</p>\n</li>\n<li><p>选择当前行V(shift+v) </p>\n</li>\n<li>选择向上行V+k(shift+v) </li>\n<li><p>选择向下行V+j(shift+v) </p>\n</li>\n<li><p>括号内的选择 v+i+) (不含括号)</p>\n</li>\n<li><p>括号内的选择 v+a+) (包含括号)</p>\n</li>\n<li><p>居中显示 zz </p>\n</li>\n<li>头部显示 zt </li>\n<li>尾巴显示 zb <h2 id=\"退出篇\"><a href=\"#退出篇\" class=\"headerlink\" title=\"退出篇\"></a>退出篇</h2></li>\n<li>不保存退出 :q </li>\n<li>保存退出 :wq </li>\n<li>保存 :w </li>\n<li>强制退出 :q! </li>\n<li>强制退出 ctrl+z </li>\n<li>恢复 fg<h2 id=\"文件切换篇\"><a href=\"#文件切换篇\" class=\"headerlink\" title=\"文件切换篇\"></a>文件切换篇</h2></li>\n<li>向右切换 tg</li>\n<li>向左切换 tG</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"初级篇\"><a href=\"#初级篇\" class=\"headerlink\" title=\"初级篇\"></a>初级篇</h1><h2 id=\"移动篇\"><a href=\"#移动篇\" class=\"headerlink\" title=\"移动篇\"></a>移动篇</h2><ul>\n<li>上 k</li>\n<li>下 j</li>\n<li>左 h</li>\n<li><p>右 l</p>\n</li>\n<li><p>至顶 gg</p>\n</li>\n<li>至尾部 Shift+g</li>\n<li><p>行跳转 行号+gg</p>\n</li>\n<li><p>行首 Shift+6 (^)</p>\n</li>\n<li><p>行尾 Shift+4 ($) </p>\n</li>\n<li><p>词组移动(词首) w </p>\n</li>\n<li>词组移动(词首) W </li>\n<li>词组移动(词尾) e </li>\n<li><p>词组移动(词尾) E </p>\n</li>\n<li><p>移动到查找的字母后 f</p>\n</li>\n<li>移动到查找的字母后 F</li>\n</ul>\n<h2 id=\"操作篇\"><a href=\"#操作篇\" class=\"headerlink\" title=\"操作篇\"></a>操作篇</h2><h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h3><ul>\n<li>在单词前插入 i</li>\n<li>在单词前插入 a</li>\n<li>在句首前插入 I</li>\n<li>在句尾插入 A</li>\n<li>在下一行插入 o</li>\n<li>在上一行插入 O<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h3></li>\n<li>删除光标行内容 d</li>\n<li>删除光标至尾行内容 D</li>\n<li>删除当前行及n-1行数 数字dd<h3 id=\"改\"><a href=\"#改\" class=\"headerlink\" title=\"改\"></a>改</h3></li>\n<li>复制 yy</li>\n<li>粘贴 p</li>\n<li>替换插入 s</li>\n<li>替换整句插入 S</li>\n<li>替换单个字母 r</li>\n<li>接下来的子都要替换 R</li>\n<li>当前行替换第一个单词 :s/oldwords/newwords/</li>\n<li>替换当前行所有单词 :s/oldwords/newwords/g</li>\n<li>替换每一行的第一个单词 :%s/oldwords/newwords/</li>\n<li>替换每一行的单词 :%s/oldwords/newwords/g</li>\n</ul>\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h3><ul>\n<li>向后查找 /</li>\n<li>向前查找 ?</li>\n</ul>\n<h2 id=\"选中篇\"><a href=\"#选中篇\" class=\"headerlink\" title=\"选中篇\"></a>选中篇</h2><ul>\n<li>左选择 v+h</li>\n<li>右选择 v+l</li>\n<li>上选择 v+k</li>\n<li><p>下选择 v+j</p>\n</li>\n<li><p>选择当前行V(shift+v) </p>\n</li>\n<li>选择向上行V+k(shift+v) </li>\n<li><p>选择向下行V+j(shift+v) </p>\n</li>\n<li><p>括号内的选择 v+i+) (不含括号)</p>\n</li>\n<li><p>括号内的选择 v+a+) (包含括号)</p>\n</li>\n<li><p>居中显示 zz </p>\n</li>\n<li>头部显示 zt </li>\n<li>尾巴显示 zb <h2 id=\"退出篇\"><a href=\"#退出篇\" class=\"headerlink\" title=\"退出篇\"></a>退出篇</h2></li>\n<li>不保存退出 :q </li>\n<li>保存退出 :wq </li>\n<li>保存 :w </li>\n<li>强制退出 :q! </li>\n<li>强制退出 ctrl+z </li>\n<li>恢复 fg<h2 id=\"文件切换篇\"><a href=\"#文件切换篇\" class=\"headerlink\" title=\"文件切换篇\"></a>文件切换篇</h2></li>\n<li>向右切换 tg</li>\n<li>向左切换 tG</li>\n</ul>\n"},{"title":"变身吧！我的linux配置环境","date":"2016-10-18T06:35:17.000Z","_content":" 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。\n# 先上效果图\n ![\"我是傲娇的效果图\"](/assets/blogImg/桌面带终端效果图.png)\n## 终端改造  Terminator\nubuntu自带的终端原本也不错，只是缺少分屏功能和强大的复制粘贴功能，所以就用Terminator来代替，其强大的分屏功能真是我的最爱了。\n### 安装方式\nsudo apt-get install terminator\n### 常用快捷键\n垂直分割窗口 `Ctrl+Shift+e`\n水平分割窗口 `Ctrl+Shift+o`\n复制         `Ctrl+Shift+c`\n粘贴         `Ctrl+Shift+v`\n切换窗口     `Ctrl+Shift+n`\n将分割的某个窗口放大至全屏使用         `Ctrl+Shift+x`\n从放大的某一窗口回到多窗口格局         `Ctrl+Shift+z`\n ![\"我是傲娇的效果图\"](/assets/blogImg/多窗终端.png)\n\n### 终端主题\n ``` shell\n apt-get install zsh\n wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh\n chsh -s `which zsh`\n sudo shutdown -r 0\n ```\n 我用的主题是`ys`\n\n### 桌面主题\n 首先在这里[下载](https://github.com/anmoljagetia/Flatabulous/archive/master.zip)主题包，将文件解压后移动到`/usr/share/themes/`,接着安装图标:\n ```shell\n sudo add-apt-repository ppa:noobslab/icons\n sudo apt-get update\n sudo apt-get install ultra-flat-icons```\n \n 然后需要`unity-tweak-tool`\n ```shell\n sudo apt-get install unity-tweak-tool\n sudo unity-tweak-tool\n```\n在Themes和icons下分别选择刚刚的主题和图标，大功告成！\n\n ![\"我是傲娇的效果图\"](/assets/blogImg/选择主题.png)\n \n完成后的样子 \n ![\"我是傲娇的效果图\"](/assets/blogImg/桌面效果图.png)\n\n","source":"_posts/变身吧！我的linux配置环境.md","raw":"---\ntitle: 变身吧！我的linux配置环境\ndate: 2016-10-18 14:35:17\ntags: linux\ncategories: 技术\n\n---\n 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。\n# 先上效果图\n ![\"我是傲娇的效果图\"](/assets/blogImg/桌面带终端效果图.png)\n## 终端改造  Terminator\nubuntu自带的终端原本也不错，只是缺少分屏功能和强大的复制粘贴功能，所以就用Terminator来代替，其强大的分屏功能真是我的最爱了。\n### 安装方式\nsudo apt-get install terminator\n### 常用快捷键\n垂直分割窗口 `Ctrl+Shift+e`\n水平分割窗口 `Ctrl+Shift+o`\n复制         `Ctrl+Shift+c`\n粘贴         `Ctrl+Shift+v`\n切换窗口     `Ctrl+Shift+n`\n将分割的某个窗口放大至全屏使用         `Ctrl+Shift+x`\n从放大的某一窗口回到多窗口格局         `Ctrl+Shift+z`\n ![\"我是傲娇的效果图\"](/assets/blogImg/多窗终端.png)\n\n### 终端主题\n ``` shell\n apt-get install zsh\n wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh\n chsh -s `which zsh`\n sudo shutdown -r 0\n ```\n 我用的主题是`ys`\n\n### 桌面主题\n 首先在这里[下载](https://github.com/anmoljagetia/Flatabulous/archive/master.zip)主题包，将文件解压后移动到`/usr/share/themes/`,接着安装图标:\n ```shell\n sudo add-apt-repository ppa:noobslab/icons\n sudo apt-get update\n sudo apt-get install ultra-flat-icons```\n \n 然后需要`unity-tweak-tool`\n ```shell\n sudo apt-get install unity-tweak-tool\n sudo unity-tweak-tool\n```\n在Themes和icons下分别选择刚刚的主题和图标，大功告成！\n\n ![\"我是傲娇的效果图\"](/assets/blogImg/选择主题.png)\n \n完成后的样子 \n ![\"我是傲娇的效果图\"](/assets/blogImg/桌面效果图.png)\n\n","slug":"变身吧！我的linux配置环境","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzcn0006ur7y9afcjw9u","content":"<p> 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。</p>\n<h1 id=\"先上效果图\"><a href=\"#先上效果图\" class=\"headerlink\" title=\"先上效果图\"></a>先上效果图</h1><p> <img src=\"/assets/blogImg/桌面带终端效果图.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h2 id=\"终端改造-Terminator\"><a href=\"#终端改造-Terminator\" class=\"headerlink\" title=\"终端改造  Terminator\"></a>终端改造  Terminator</h2><p>ubuntu自带的终端原本也不错，只是缺少分屏功能和强大的复制粘贴功能，所以就用Terminator来代替，其强大的分屏功能真是我的最爱了。</p>\n<h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3><p>sudo apt-get install terminator</p>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p>垂直分割窗口 <code>Ctrl+Shift+e</code><br>水平分割窗口 <code>Ctrl+Shift+o</code><br>复制         <code>Ctrl+Shift+c</code><br>粘贴         <code>Ctrl+Shift+v</code><br>切换窗口     <code>Ctrl+Shift+n</code><br>将分割的某个窗口放大至全屏使用         <code>Ctrl+Shift+x</code><br>从放大的某一窗口回到多窗口格局         <code>Ctrl+Shift+z</code><br> <img src=\"/assets/blogImg/多窗终端.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h3 id=\"终端主题\"><a href=\"#终端主题\" class=\"headerlink\" title=\"终端主题\"></a>终端主题</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install zsh</div><div class=\"line\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh</div><div class=\"line\">chsh -s `which zsh`</div><div class=\"line\">sudo shutdown -r 0</div></pre></td></tr></table></figure>\n<p> 我用的主题是<code>ys</code></p>\n<h3 id=\"桌面主题\"><a href=\"#桌面主题\" class=\"headerlink\" title=\"桌面主题\"></a>桌面主题</h3><p> 首先在这里<a href=\"https://github.com/anmoljagetia/Flatabulous/archive/master.zip\" target=\"_blank\" rel=\"external\">下载</a>主题包，将文件解压后移动到<code>/usr/share/themes/</code>,接着安装图标:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:noobslab/icons</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install ultra-flat-icons</div></pre></td></tr></table></figure></p>\n<p> 然后需要<code>unity-tweak-tool</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install unity-tweak-tool</div><div class=\"line\">sudo unity-tweak-tool</div></pre></td></tr></table></figure></p>\n<p>在Themes和icons下分别选择刚刚的主题和图标，大功告成！</p>\n<p> <img src=\"/assets/blogImg/选择主题.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<p>完成后的样子<br> <img src=\"/assets/blogImg/桌面效果图.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n","excerpt":"","more":"<p> 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。</p>\n<h1 id=\"先上效果图\"><a href=\"#先上效果图\" class=\"headerlink\" title=\"先上效果图\"></a>先上效果图</h1><p> <img src=\"/assets/blogImg/桌面带终端效果图.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h2 id=\"终端改造-Terminator\"><a href=\"#终端改造-Terminator\" class=\"headerlink\" title=\"终端改造  Terminator\"></a>终端改造  Terminator</h2><p>ubuntu自带的终端原本也不错，只是缺少分屏功能和强大的复制粘贴功能，所以就用Terminator来代替，其强大的分屏功能真是我的最爱了。</p>\n<h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3><p>sudo apt-get install terminator</p>\n<h3 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h3><p>垂直分割窗口 <code>Ctrl+Shift+e</code><br>水平分割窗口 <code>Ctrl+Shift+o</code><br>复制         <code>Ctrl+Shift+c</code><br>粘贴         <code>Ctrl+Shift+v</code><br>切换窗口     <code>Ctrl+Shift+n</code><br>将分割的某个窗口放大至全屏使用         <code>Ctrl+Shift+x</code><br>从放大的某一窗口回到多窗口格局         <code>Ctrl+Shift+z</code><br> <img src=\"/assets/blogImg/多窗终端.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<h3 id=\"终端主题\"><a href=\"#终端主题\" class=\"headerlink\" title=\"终端主题\"></a>终端主题</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install zsh</div><div class=\"line\">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh</div><div class=\"line\">chsh -s `which zsh`</div><div class=\"line\">sudo shutdown -r 0</div></pre></td></tr></table></figure>\n<p> 我用的主题是<code>ys</code></p>\n<h3 id=\"桌面主题\"><a href=\"#桌面主题\" class=\"headerlink\" title=\"桌面主题\"></a>桌面主题</h3><p> 首先在这里<a href=\"https://github.com/anmoljagetia/Flatabulous/archive/master.zip\">下载</a>主题包，将文件解压后移动到<code>/usr/share/themes/</code>,接着安装图标:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:noobslab/icons</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install ultra-flat-icons</div></pre></td></tr></table></figure></p>\n<p> 然后需要<code>unity-tweak-tool</code><br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install unity-tweak-tool</div><div class=\"line\">sudo unity-tweak-tool</div></pre></td></tr></table></figure></p>\n<p>在Themes和icons下分别选择刚刚的主题和图标，大功告成！</p>\n<p> <img src=\"/assets/blogImg/选择主题.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n<p>完成后的样子<br> <img src=\"/assets/blogImg/桌面效果图.png\" alt=\"&quot;我是傲娇的效果图&quot;\"></p>\n"},{"title":"深入解析php的容器模式","date":"2016-10-19T03:20:43.000Z","_content":"先说结论，**容器**在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。\n### 我是傲娇的代码块:\n\n``` php\n\n<?php\n/**\n* @brief 服务容器\n* author Graychen\n */\nclass Container implements \\ArrayAccess{\n  private $_binContainerngs = [];//服务列表\n  private $_instances= [];//已经实例化的服务\n\n  //获取服务\n  public function get($name,$params=[]){\n  //先从实例化的列表中查找\n  if(isset($this->_instances[$name])){\n  return $this->_instances[$name];\n  }\n\n  //检测有没有注册该服务\n  if(!isset($this->_binContainerngs[$name])){\n  return null;\n  }\n\n  $concrete = $this->_binContainerngs[$name]['class'];//对象具体注册内容\n\n  $obj = null;\n\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }else{\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  }\n  }\n  //如果是共享服务，则写入_instances列表，下次直接取回\n  if($this->_binContainerngs[$name]['shared']==true && $ojb){\n  $this->_instances[$name]=$obj;\n  }\n\n  return $obj;\n  }\n\n  //检测是否已经绑定\n  public function has($name){\n  return isset($this->_binContainerngs[$name]) or isset($this->_instances[$name]);\n  }\n\n  //卸载服务\n  public function remove($name){\n  unset($this->_binContainerngs[$name],$this->_instances[$name]);\n  }\n  //设置服务\n  public function set($name,$class){\n  $this->_registerService($name,$class);\n  }\n  //设置共享服务\n  public function setShared($name,$class){\n  $this->_registerService($name,$class,true);\n  }\n  //注册服务\n  private function _registerService($name,$class,$shared=false){\n  $this->remove($name);\n  if(!($class instanceof \\Closure) && is_object($class)){\n  $this->_instances[$name]=$class;\n  }else{\n  $this->_binContainerngs[$name]=array(\"class\"=>$class,\"shared\"=>$shared);\n  }\n  }\n  //ArrayAccess接口，检测服务是否存在\n  public function offsetExists($offset){\n  return $this->has($offset);\n  }\n  //ArrayAccess接口,以$Container[$name]方式获取服务\n  public function offsetGet($offset){\n  return $this->get($offset);\n  }\n  //ArrayAccess接口,以$Container[$name]方式获取服务\n  public function offsetSet($offset,$value){\n  return $this->set($offset,$value);\n  }\n  //卸载服务\n  public function offsetUnset($offset){\n  return $this->remove($offset);\n  }\n}\n\n```\n\n### 使用方式\n\n``` php\n\n<?php\nheader(\"Content-Type:text/html;charset=utf8\");\nclass A{\n  public $name;\n  public $age;\n  public function __construct($name=\"\"){\n  $this->name = $name;\n\n  }\n\n}\n\ninclude \"Container.class.php\";\n$Container = new Container();\n\n/**\n* @brief $Container->setShared 匿名函数方式注册一个名为a1的服务\n*\n* @param 'a1'\n* @param\n*/\n$Container->setShared('a1',function($name=\"\"){\n  return new A($name);\n  });\n\n$a1 = $Container->get('a1',array(\"小李\"));\necho $a1->name.\"<br/>\";//小李\n/**\n* @brief $Container->set 直接以类名方式注册\n*\n* @param 'a2'\n* @param 'A'\n*/\n$Container->set('a2','A');\n\n$a2 = $Container->get('a2',array(\"小张\"));\necho $a2->name.\"<br/>\";//小张\n/**\n* @brief $Container->set 直接传入实例化的对象\n*\n* @param 'a3'\n* @param \"小唐\"\n*/\n$Container->set('a3',new A(\"小唐\"));\necho $a3->name.\"<br/>\";//小唐\n\n```\n### 分析\n通过上面的代码实例，我们可以看到php注入容器(数组)的三种方式\n- 匿名函数方式注册\n- 类名方式注册\n- 直接传入实例化的对象的注册\n然后get方法\n``` php\n  //获取服务\n  public function get($name,$params=[]){\n  //先从实例化的列表中查找\n  if(isset($this->_instances[$name])){\n  return $this->_instances[$name];\n  }\n\n  //检测有没有注册该服务\n  if(!isset($this->_binContainerngs[$name])){\n  return null;\n  }\n\n  $concrete = $this->_binContainerngs[$name]['class'];//对象具体注册内容\n\n  $obj = null;\n\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }else{\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  }\n  }\n  //如果是共享服务，则写入_instances列表，下次直接取回\n  if($this->_binContainerngs[$name]['shared']==true && $ojb){\n  $this->_instances[$name]=$obj;\n  }\n\n  return $obj;\n  }\n\n```\n\n实际上通过分析get方法对这三种注入方式的数组都做了对应的处理\n# 匿名方式\n\n``` php\n$Container->setShared('a1',function($name=\"\"){\n  return new A($name);\n  });\n```\n\n``` php\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }\n```\n  \n\n  首先通过**$concrete instanceof \\Closure**来判断是否是匿名函数，然后通过**call_user_func_array($concrete,$params)**来调用这个函数，匿名方式注册的本身就是一个已经new的方法，自然get的时候就成功调用了这个已经实例化的方法。换句话说，匿名方式写的时候写的就是实例化的方法，容器的数组里面就存在了这个已经new的方法，只要判断是回调函数，就调用到了这个已经实例化的方法。\n# 类名方式注册\n\n``` php\n$Container->set('a2','A');\n\n```\n\n``` php\n\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }\n  }\n\n```\n\n 直接以类名注册的方式比较简单，只要判断是字符串并且参数为空那么对应的get方法就会直接实例化（new）这个方法名，就比如上面的例子，直接就会实例化A这个方法名\n# 带参数的类实例化,使用反射(接口方式)\n\n``` php\n$Container->set('a3',new A(\"小唐\"));\n```\n``` php\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  \n```\n> **reflectionClass**: ReflectionClass 类报告了一个类的有关信息。\n> **newInstanceArgs**: ReflectionClass::newInstanceArgs — 从给出的参数创建一个新的类实例。\n","source":"_posts/深入解析php的容器模式.md","raw":"\ntitle: 深入解析php的容器模式\ndate: 2016-10-19 11:20:43\ntag: php\ncategories: 技术\n---\n先说结论，**容器**在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。\n### 我是傲娇的代码块:\n\n``` php\n\n<?php\n/**\n* @brief 服务容器\n* author Graychen\n */\nclass Container implements \\ArrayAccess{\n  private $_binContainerngs = [];//服务列表\n  private $_instances= [];//已经实例化的服务\n\n  //获取服务\n  public function get($name,$params=[]){\n  //先从实例化的列表中查找\n  if(isset($this->_instances[$name])){\n  return $this->_instances[$name];\n  }\n\n  //检测有没有注册该服务\n  if(!isset($this->_binContainerngs[$name])){\n  return null;\n  }\n\n  $concrete = $this->_binContainerngs[$name]['class'];//对象具体注册内容\n\n  $obj = null;\n\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }else{\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  }\n  }\n  //如果是共享服务，则写入_instances列表，下次直接取回\n  if($this->_binContainerngs[$name]['shared']==true && $ojb){\n  $this->_instances[$name]=$obj;\n  }\n\n  return $obj;\n  }\n\n  //检测是否已经绑定\n  public function has($name){\n  return isset($this->_binContainerngs[$name]) or isset($this->_instances[$name]);\n  }\n\n  //卸载服务\n  public function remove($name){\n  unset($this->_binContainerngs[$name],$this->_instances[$name]);\n  }\n  //设置服务\n  public function set($name,$class){\n  $this->_registerService($name,$class);\n  }\n  //设置共享服务\n  public function setShared($name,$class){\n  $this->_registerService($name,$class,true);\n  }\n  //注册服务\n  private function _registerService($name,$class,$shared=false){\n  $this->remove($name);\n  if(!($class instanceof \\Closure) && is_object($class)){\n  $this->_instances[$name]=$class;\n  }else{\n  $this->_binContainerngs[$name]=array(\"class\"=>$class,\"shared\"=>$shared);\n  }\n  }\n  //ArrayAccess接口，检测服务是否存在\n  public function offsetExists($offset){\n  return $this->has($offset);\n  }\n  //ArrayAccess接口,以$Container[$name]方式获取服务\n  public function offsetGet($offset){\n  return $this->get($offset);\n  }\n  //ArrayAccess接口,以$Container[$name]方式获取服务\n  public function offsetSet($offset,$value){\n  return $this->set($offset,$value);\n  }\n  //卸载服务\n  public function offsetUnset($offset){\n  return $this->remove($offset);\n  }\n}\n\n```\n\n### 使用方式\n\n``` php\n\n<?php\nheader(\"Content-Type:text/html;charset=utf8\");\nclass A{\n  public $name;\n  public $age;\n  public function __construct($name=\"\"){\n  $this->name = $name;\n\n  }\n\n}\n\ninclude \"Container.class.php\";\n$Container = new Container();\n\n/**\n* @brief $Container->setShared 匿名函数方式注册一个名为a1的服务\n*\n* @param 'a1'\n* @param\n*/\n$Container->setShared('a1',function($name=\"\"){\n  return new A($name);\n  });\n\n$a1 = $Container->get('a1',array(\"小李\"));\necho $a1->name.\"<br/>\";//小李\n/**\n* @brief $Container->set 直接以类名方式注册\n*\n* @param 'a2'\n* @param 'A'\n*/\n$Container->set('a2','A');\n\n$a2 = $Container->get('a2',array(\"小张\"));\necho $a2->name.\"<br/>\";//小张\n/**\n* @brief $Container->set 直接传入实例化的对象\n*\n* @param 'a3'\n* @param \"小唐\"\n*/\n$Container->set('a3',new A(\"小唐\"));\necho $a3->name.\"<br/>\";//小唐\n\n```\n### 分析\n通过上面的代码实例，我们可以看到php注入容器(数组)的三种方式\n- 匿名函数方式注册\n- 类名方式注册\n- 直接传入实例化的对象的注册\n然后get方法\n``` php\n  //获取服务\n  public function get($name,$params=[]){\n  //先从实例化的列表中查找\n  if(isset($this->_instances[$name])){\n  return $this->_instances[$name];\n  }\n\n  //检测有没有注册该服务\n  if(!isset($this->_binContainerngs[$name])){\n  return null;\n  }\n\n  $concrete = $this->_binContainerngs[$name]['class'];//对象具体注册内容\n\n  $obj = null;\n\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }else{\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  }\n  }\n  //如果是共享服务，则写入_instances列表，下次直接取回\n  if($this->_binContainerngs[$name]['shared']==true && $ojb){\n  $this->_instances[$name]=$obj;\n  }\n\n  return $obj;\n  }\n\n```\n\n实际上通过分析get方法对这三种注入方式的数组都做了对应的处理\n# 匿名方式\n\n``` php\n$Container->setShared('a1',function($name=\"\"){\n  return new A($name);\n  });\n```\n\n``` php\n  if($concrete instanceof \\Closure){ //匿名函数方式\n  $obj = call_user_func_array($concrete,$params);\n  }\n```\n  \n\n  首先通过**$concrete instanceof \\Closure**来判断是否是匿名函数，然后通过**call_user_func_array($concrete,$params)**来调用这个函数，匿名方式注册的本身就是一个已经new的方法，自然get的时候就成功调用了这个已经实例化的方法。换句话说，匿名方式写的时候写的就是实例化的方法，容器的数组里面就存在了这个已经new的方法，只要判断是回调函数，就调用到了这个已经实例化的方法。\n# 类名方式注册\n\n``` php\n$Container->set('a2','A');\n\n```\n\n``` php\n\n  }elseif(is_string($concrete)){ //字符串方式\n  if(empty($params)){\n  $obj = new $concrete;\n  }\n  }\n\n```\n\n 直接以类名注册的方式比较简单，只要判断是字符串并且参数为空那么对应的get方法就会直接实例化（new）这个方法名，就比如上面的例子，直接就会实例化A这个方法名\n# 带参数的类实例化,使用反射(接口方式)\n\n``` php\n$Container->set('a3',new A(\"小唐\"));\n```\n``` php\n  //带参数的类实例化,使用反射\n  $class = new \\reflectionClass($concrete);\n  $obj = $class->newInstanceArgs($params);\n  \n```\n> **reflectionClass**: ReflectionClass 类报告了一个类的有关信息。\n> **newInstanceArgs**: ReflectionClass::newInstanceArgs — 从给出的参数创建一个新的类实例。\n","slug":"深入解析php的容器模式","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzcr0009ur7y9rcm0m9c","content":"<p>先说结论，<strong>容器</strong>在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。</p>\n<h3 id=\"我是傲娇的代码块\"><a href=\"#我是傲娇的代码块\" class=\"headerlink\" title=\"我是傲娇的代码块:\"></a>我是傲娇的代码块:</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* <span class=\"doctag\">@brief</span> 服务容器</div><div class=\"line\">* author Graychen</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">ArrayAccess</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> $_binContainerngs = [];<span class=\"comment\">//服务列表</span></div><div class=\"line\">  <span class=\"keyword\">private</span> $_instances= [];<span class=\"comment\">//已经实例化的服务</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]))&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_instances[$name];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  $concrete = <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\"></div><div class=\"line\">  $obj = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">  $obj = call_user_func_array($concrete,$params);</div><div class=\"line\">  &#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">  $obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">  $class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">  $obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> $obj;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测是否已经绑定</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">has</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]) <span class=\"keyword\">or</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//卸载服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name],<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置共享服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setShared</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class,<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注册服务</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_registerService</span><span class=\"params\">($name,$class,$shared=false)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;remove($name);</div><div class=\"line\">  <span class=\"keyword\">if</span>(!($class <span class=\"keyword\">instanceof</span> \\Closure) &amp;&amp; is_object($class))&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$class;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]=<span class=\"keyword\">array</span>(<span class=\"string\">\"class\"</span>=&gt;$class,<span class=\"string\">\"shared\"</span>=&gt;$shared);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口，检测服务是否存在</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;has($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span><span class=\"params\">($offset,$value)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;set($offset,$value);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//卸载服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;remove($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">header(<span class=\"string\">\"Content-Type:text/html;charset=utf8\"</span>);</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> $name;</div><div class=\"line\">  <span class=\"keyword\">public</span> $age;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;name = $name;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">\"Container.class.php\"</span>;</div><div class=\"line\">$Container = <span class=\"keyword\">new</span> Container();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;setShared 匿名函数方式注册一个名为a1的服务</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a1'</div><div class=\"line\">* <span class=\"doctag\">@param</span></div><div class=\"line\">*/</div><div class=\"line\">$Container-&gt;setShared(<span class=\"string\">'a1'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A($name);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">$a1 = $Container-&gt;get(<span class=\"string\">'a1'</span>,<span class=\"keyword\">array</span>(<span class=\"string\">\"小李\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a1-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小李</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;set 直接以类名方式注册</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a2'</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'A'</div><div class=\"line\">*/</div><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a2'</span>,<span class=\"string\">'A'</span>);</div><div class=\"line\"></div><div class=\"line\">$a2 = $Container-&gt;get(<span class=\"string\">'a2'</span>,<span class=\"keyword\">array</span>(<span class=\"string\">\"小张\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a2-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小张</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;set 直接传入实例化的对象</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a3'</div><div class=\"line\">* <span class=\"doctag\">@param</span> \"小唐\"</div><div class=\"line\">*/</div><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a3'</span>,<span class=\"keyword\">new</span> A(<span class=\"string\">\"小唐\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a3-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小唐</span></div></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>通过上面的代码实例，我们可以看到php注入容器(数组)的三种方式</p>\n<ul>\n<li>匿名函数方式注册</li>\n<li>类名方式注册</li>\n<li>直接传入实例化的对象的注册<br>然后get方法<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取服务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]))&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_instances[$name];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$concrete = <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\"></div><div class=\"line\">$obj = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">$obj = call_user_func_array($concrete,$params);</div><div class=\"line\">&#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">$obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\"><span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">$class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">$obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> $obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>实际上通过分析get方法对这三种注入方式的数组都做了对应的处理</p>\n<h1 id=\"匿名方式\"><a href=\"#匿名方式\" class=\"headerlink\" title=\"匿名方式\"></a>匿名方式</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;setShared(<span class=\"string\">'a1'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A($name);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">$obj = call_user_func_array($concrete,$params);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  首先通过<strong>$concrete instanceof \\Closure</strong>来判断是否是匿名函数，然后通过<strong>call_user_func_array($concrete,$params)</strong>来调用这个函数，匿名方式注册的本身就是一个已经new的方法，自然get的时候就成功调用了这个已经实例化的方法。换句话说，匿名方式写的时候写的就是实例化的方法，容器的数组里面就存在了这个已经new的方法，只要判断是回调函数，就调用到了这个已经实例化的方法。</p>\n<h1 id=\"类名方式注册\"><a href=\"#类名方式注册\" class=\"headerlink\" title=\"类名方式注册\"></a>类名方式注册</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a2'</span>,<span class=\"string\">'A'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">$obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 直接以类名注册的方式比较简单，只要判断是字符串并且参数为空那么对应的get方法就会直接实例化（new）这个方法名，就比如上面的例子，直接就会实例化A这个方法名</p>\n<h1 id=\"带参数的类实例化-使用反射-接口方式\"><a href=\"#带参数的类实例化-使用反射-接口方式\" class=\"headerlink\" title=\"带参数的类实例化,使用反射(接口方式)\"></a>带参数的类实例化,使用反射(接口方式)</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a3'</span>,<span class=\"keyword\">new</span> A(<span class=\"string\">\"小唐\"</span>));</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">$class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">$obj = $class-&gt;newInstanceArgs($params);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>reflectionClass</strong>: ReflectionClass 类报告了一个类的有关信息。<br><strong>newInstanceArgs</strong>: ReflectionClass::newInstanceArgs — 从给出的参数创建一个新的类实例。</p>\n</blockquote>\n","excerpt":"","more":"<p>先说结论，<strong>容器</strong>在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。</p>\n<h3 id=\"我是傲娇的代码块\"><a href=\"#我是傲娇的代码块\" class=\"headerlink\" title=\"我是傲娇的代码块:\"></a>我是傲娇的代码块:</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* <span class=\"doctag\">@brief</span> 服务容器</div><div class=\"line\">* author Graychen</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Container</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">ArrayAccess</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> $_binContainerngs = [];<span class=\"comment\">//服务列表</span></div><div class=\"line\">  <span class=\"keyword\">private</span> $_instances= [];<span class=\"comment\">//已经实例化的服务</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]))&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_instances[$name];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  $concrete = <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\"></div><div class=\"line\">  $obj = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">  $obj = call_user_func_array($concrete,$params);</div><div class=\"line\">  &#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">  $obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">  $class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">  $obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> $obj;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//检测是否已经绑定</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">has</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]) <span class=\"keyword\">or</span> <span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//卸载服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">remove</span><span class=\"params\">($name)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name],<span class=\"keyword\">$this</span>-&gt;_instances[$name]);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">set</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置共享服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setShared</span><span class=\"params\">($name,$class)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_registerService($name,$class,<span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注册服务</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_registerService</span><span class=\"params\">($name,$class,$shared=false)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;remove($name);</div><div class=\"line\">  <span class=\"keyword\">if</span>(!($class <span class=\"keyword\">instanceof</span> \\Closure) &amp;&amp; is_object($class))&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_instances[$name]=$class;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]=<span class=\"keyword\">array</span>(<span class=\"string\">\"class\"</span>=&gt;$class,<span class=\"string\">\"shared\"</span>=&gt;$shared);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口，检测服务是否存在</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetExists</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;has($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetGet</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;get($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetSet</span><span class=\"params\">($offset,$value)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;set($offset,$value);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//卸载服务</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">offsetUnset</span><span class=\"params\">($offset)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;remove($offset);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">header(<span class=\"string\">\"Content-Type:text/html;charset=utf8\"</span>);</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span> $name;</div><div class=\"line\">  <span class=\"keyword\">public</span> $age;</div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">$this</span>-&gt;name = $name;</div><div class=\"line\"></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">\"Container.class.php\"</span>;</div><div class=\"line\">$Container = <span class=\"keyword\">new</span> Container();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;setShared 匿名函数方式注册一个名为a1的服务</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a1'</div><div class=\"line\">* <span class=\"doctag\">@param</span></div><div class=\"line\">*/</span></div><div class=\"line\">$Container-&gt;setShared(<span class=\"string\">'a1'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A($name);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">$a1 = $Container-&gt;get(<span class=\"string\">'a1'</span>,<span class=\"keyword\">array</span>(<span class=\"string\">\"小李\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a1-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小李</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;set 直接以类名方式注册</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a2'</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'A'</div><div class=\"line\">*/</span></div><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a2'</span>,<span class=\"string\">'A'</span>);</div><div class=\"line\"></div><div class=\"line\">$a2 = $Container-&gt;get(<span class=\"string\">'a2'</span>,<span class=\"keyword\">array</span>(<span class=\"string\">\"小张\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a2-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小张</span></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* <span class=\"doctag\">@brief</span> $Container-&gt;set 直接传入实例化的对象</div><div class=\"line\">*</div><div class=\"line\">* <span class=\"doctag\">@param</span> 'a3'</div><div class=\"line\">* <span class=\"doctag\">@param</span> \"小唐\"</div><div class=\"line\">*/</span></div><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a3'</span>,<span class=\"keyword\">new</span> A(<span class=\"string\">\"小唐\"</span>));</div><div class=\"line\"><span class=\"keyword\">echo</span> $a3-&gt;name.<span class=\"string\">\"&lt;br/&gt;\"</span>;<span class=\"comment\">//小唐</span></div></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>通过上面的代码实例，我们可以看到php注入容器(数组)的三种方式</p>\n<ul>\n<li>匿名函数方式注册</li>\n<li>类名方式注册</li>\n<li>直接传入实例化的对象的注册<br>然后get方法<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取服务</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span><span class=\"params\">($name,$params=[])</span></span>&#123;</div><div class=\"line\"><span class=\"comment\">//先从实例化的列表中查找</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_instances[$name]))&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;_instances[$name];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//检测有没有注册该服务</span></div><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$concrete = <span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'class'</span>];<span class=\"comment\">//对象具体注册内容</span></div><div class=\"line\"></div><div class=\"line\">$obj = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">$obj = call_user_func_array($concrete,$params);</div><div class=\"line\">&#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">$obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\"><span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">$class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">$obj = $class-&gt;newInstanceArgs($params);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;_binContainerngs[$name][<span class=\"string\">'shared'</span>]==<span class=\"keyword\">true</span> &amp;&amp; $ojb)&#123;</div><div class=\"line\"><span class=\"keyword\">$this</span>-&gt;_instances[$name]=$obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> $obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>实际上通过分析get方法对这三种注入方式的数组都做了对应的处理</p>\n<h1 id=\"匿名方式\"><a href=\"#匿名方式\" class=\"headerlink\" title=\"匿名方式\"></a>匿名方式</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;setShared(<span class=\"string\">'a1'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">($name=<span class=\"string\">\"\"</span>)</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> A($name);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>($concrete <span class=\"keyword\">instanceof</span> \\Closure)&#123; <span class=\"comment\">//匿名函数方式</span></div><div class=\"line\">$obj = call_user_func_array($concrete,$params);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  首先通过<strong>$concrete instanceof \\Closure</strong>来判断是否是匿名函数，然后通过<strong>call_user_func_array($concrete,$params)</strong>来调用这个函数，匿名方式注册的本身就是一个已经new的方法，自然get的时候就成功调用了这个已经实例化的方法。换句话说，匿名方式写的时候写的就是实例化的方法，容器的数组里面就存在了这个已经new的方法，只要判断是回调函数，就调用到了这个已经实例化的方法。</p>\n<h1 id=\"类名方式注册\"><a href=\"#类名方式注册\" class=\"headerlink\" title=\"类名方式注册\"></a>类名方式注册</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a2'</span>,<span class=\"string\">'A'</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#125;<span class=\"keyword\">elseif</span>(is_string($concrete))&#123; <span class=\"comment\">//字符串方式</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">empty</span>($params))&#123;</div><div class=\"line\">$obj = <span class=\"keyword\">new</span> $concrete;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 直接以类名注册的方式比较简单，只要判断是字符串并且参数为空那么对应的get方法就会直接实例化（new）这个方法名，就比如上面的例子，直接就会实例化A这个方法名</p>\n<h1 id=\"带参数的类实例化-使用反射-接口方式\"><a href=\"#带参数的类实例化-使用反射-接口方式\" class=\"headerlink\" title=\"带参数的类实例化,使用反射(接口方式)\"></a>带参数的类实例化,使用反射(接口方式)</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$Container-&gt;set(<span class=\"string\">'a3'</span>,<span class=\"keyword\">new</span> A(<span class=\"string\">\"小唐\"</span>));</div></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//带参数的类实例化,使用反射</span></div><div class=\"line\">$class = <span class=\"keyword\">new</span> \\reflectionClass($concrete);</div><div class=\"line\">$obj = $class-&gt;newInstanceArgs($params);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>reflectionClass</strong>: ReflectionClass 类报告了一个类的有关信息。<br><strong>newInstanceArgs</strong>: ReflectionClass::newInstanceArgs — 从给出的参数创建一个新的类实例。</p>\n</blockquote>\n"},{"title":"计划虽然不酷，但是很有用","date":"2017-02-04T06:26:37.000Z","_content":"\n这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！\n ![\"我是傲娇的女神\"](/assets/blogImg/女神2.jpg)\n 请收下这波安利，好了，安利结束，我们谈正事，写这篇文章的目的是自己过于散漫，做事不够坚持，然后看到有人凭着年度计划，一步步完善自己，所以我也想试试，学习优秀的人的习惯，总不至于让自己变得太差。\n## 目标\n 我的目标是什么呢？在工作之余，以三个月为限，做出上线运营的项目，也就是说我的2017要产出4个上线的项目，每个季度都要产出一个线上运营的项目，而且这都是业余时间完成的，这对我真是一个不小的挑战了，\n 我希望自己能产出卓越的产品，但是我认为没有量的积累，这永远都不可能，千里之行，始于足下，我这几个产品可能不会优秀,不够细致，过于粗糙，但是\n 完成比完美重要，上线就是我的目的。之前都是学习技术，今年我会转向输出,输出产品。\n## 计划\n 我的计划是什么呢？一个季度是三个月，每个月是4个星期，这是一个系列文章，我会在每个周日的晚上发博文(很可能是微博)来报告这周的完成情况和下周的计划安排,并且这个过程是透明的，我写下的所有源码我都会放到github上，从这个网站上\n 你将会看到我的行动轨迹，我有没有食言，只要方格是绿色的，那就表示我输出了很多的代码，否则我可能就是食言了，但愿不要吧,我还是比较虚的！\n## 计划详情\n 事先声明，这篇博客我会持续更新的，我思考了下决定了我的第一个项目，我会给它起一个有趣的代号，因为我喜欢看一些动漫，所以我决定给他们起动漫中的物品\n## 我是傲娇的分割线O(∩_∩)O~~\n### 第一个项目\n\n#### 代号：**OnePiece**\n![\"我是伟大的OnePiece\"](/assets/blogImg/onepiece.png)\n>这是海贼王的伟大冒险的终点，当然也是所有故事的起点，是引起这个海贼世界变革的重要地点，我特别欣赏里面的对梦想的执着和对友情的重视,所以我的第一个项目以此为名。\n\n#### 项目介绍\n这个项目我决定做一个租借平台,总有一些东西让我们食之无味，弃之可惜，这个项目要把那些人们不舍得的东西放到网上出租，第一个月我想把最核心的浏览列表和上传物品的功能做完，有别于寻常的项目，我这次要从前台开始做起，\n前台做完之后再开始做后台功能，我要倒过来做。\n#### 可能会用到的技术\n- 语言：php+js\n- 框架：laravel+vue.js\n- 平台：移动端\n- 类型：移动端的网站\n做这些项目当然也要提要自己啦，我会尽可能尝试不同的语言，第一个项目我的技术选型相对保守，先从最熟悉的技术开始实现吧。由于我不是专业的设计，前期的页面可能相对粗糙，还请见谅。\n#### 项目时间安排\n今天已经是二月5日了，由于我这个人懒得算数，就以二月份开始吧，那么截止时间就定在4月30号，4月30号我会做项目演示，会公布线上网址（如果我做好的话）\n","source":"_posts/计划虽然不酷，但是很有用.md","raw":"---\ntitle: 计划虽然不酷，但是很有用\ndate: 2017-02-04 14:26:37\ntag: php\ncategories: 随笔\n---\n\n这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！\n ![\"我是傲娇的女神\"](/assets/blogImg/女神2.jpg)\n 请收下这波安利，好了，安利结束，我们谈正事，写这篇文章的目的是自己过于散漫，做事不够坚持，然后看到有人凭着年度计划，一步步完善自己，所以我也想试试，学习优秀的人的习惯，总不至于让自己变得太差。\n## 目标\n 我的目标是什么呢？在工作之余，以三个月为限，做出上线运营的项目，也就是说我的2017要产出4个上线的项目，每个季度都要产出一个线上运营的项目，而且这都是业余时间完成的，这对我真是一个不小的挑战了，\n 我希望自己能产出卓越的产品，但是我认为没有量的积累，这永远都不可能，千里之行，始于足下，我这几个产品可能不会优秀,不够细致，过于粗糙，但是\n 完成比完美重要，上线就是我的目的。之前都是学习技术，今年我会转向输出,输出产品。\n## 计划\n 我的计划是什么呢？一个季度是三个月，每个月是4个星期，这是一个系列文章，我会在每个周日的晚上发博文(很可能是微博)来报告这周的完成情况和下周的计划安排,并且这个过程是透明的，我写下的所有源码我都会放到github上，从这个网站上\n 你将会看到我的行动轨迹，我有没有食言，只要方格是绿色的，那就表示我输出了很多的代码，否则我可能就是食言了，但愿不要吧,我还是比较虚的！\n## 计划详情\n 事先声明，这篇博客我会持续更新的，我思考了下决定了我的第一个项目，我会给它起一个有趣的代号，因为我喜欢看一些动漫，所以我决定给他们起动漫中的物品\n## 我是傲娇的分割线O(∩_∩)O~~\n### 第一个项目\n\n#### 代号：**OnePiece**\n![\"我是伟大的OnePiece\"](/assets/blogImg/onepiece.png)\n>这是海贼王的伟大冒险的终点，当然也是所有故事的起点，是引起这个海贼世界变革的重要地点，我特别欣赏里面的对梦想的执着和对友情的重视,所以我的第一个项目以此为名。\n\n#### 项目介绍\n这个项目我决定做一个租借平台,总有一些东西让我们食之无味，弃之可惜，这个项目要把那些人们不舍得的东西放到网上出租，第一个月我想把最核心的浏览列表和上传物品的功能做完，有别于寻常的项目，我这次要从前台开始做起，\n前台做完之后再开始做后台功能，我要倒过来做。\n#### 可能会用到的技术\n- 语言：php+js\n- 框架：laravel+vue.js\n- 平台：移动端\n- 类型：移动端的网站\n做这些项目当然也要提要自己啦，我会尽可能尝试不同的语言，第一个项目我的技术选型相对保守，先从最熟悉的技术开始实现吧。由于我不是专业的设计，前期的页面可能相对粗糙，还请见谅。\n#### 项目时间安排\n今天已经是二月5日了，由于我这个人懒得算数，就以二月份开始吧，那么截止时间就定在4月30号，4月30号我会做项目演示，会公布线上网址（如果我做好的话）\n","slug":"计划虽然不酷，但是很有用","published":1,"updated":"2017-05-07T14:20:07.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gapzct000cur7ynrabv89h","content":"<p>这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！<br> <img src=\"/assets/blogImg/女神2.jpg\" alt=\"&quot;我是傲娇的女神&quot;\"><br> 请收下这波安利，好了，安利结束，我们谈正事，写这篇文章的目的是自己过于散漫，做事不够坚持，然后看到有人凭着年度计划，一步步完善自己，所以我也想试试，学习优秀的人的习惯，总不至于让自己变得太差。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p> 我的目标是什么呢？在工作之余，以三个月为限，做出上线运营的项目，也就是说我的2017要产出4个上线的项目，每个季度都要产出一个线上运营的项目，而且这都是业余时间完成的，这对我真是一个不小的挑战了，<br> 我希望自己能产出卓越的产品，但是我认为没有量的积累，这永远都不可能，千里之行，始于足下，我这几个产品可能不会优秀,不够细致，过于粗糙，但是<br> 完成比完美重要，上线就是我的目的。之前都是学习技术，今年我会转向输出,输出产品。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p> 我的计划是什么呢？一个季度是三个月，每个月是4个星期，这是一个系列文章，我会在每个周日的晚上发博文(很可能是微博)来报告这周的完成情况和下周的计划安排,并且这个过程是透明的，我写下的所有源码我都会放到github上，从这个网站上<br> 你将会看到我的行动轨迹，我有没有食言，只要方格是绿色的，那就表示我输出了很多的代码，否则我可能就是食言了，但愿不要吧,我还是比较虚的！</p>\n<h2 id=\"计划详情\"><a href=\"#计划详情\" class=\"headerlink\" title=\"计划详情\"></a>计划详情</h2><p> 事先声明，这篇博客我会持续更新的，我思考了下决定了我的第一个项目，我会给它起一个有趣的代号，因为我喜欢看一些动漫，所以我决定给他们起动漫中的物品</p>\n<h2 id=\"我是傲娇的分割线O-∩-∩-O\"><a href=\"#我是傲娇的分割线O-∩-∩-O\" class=\"headerlink\" title=\"我是傲娇的分割线O(∩_∩)O~~\"></a>我是傲娇的分割线O(∩_∩)O~~</h2><h3 id=\"第一个项目\"><a href=\"#第一个项目\" class=\"headerlink\" title=\"第一个项目\"></a>第一个项目</h3><h4 id=\"代号：OnePiece\"><a href=\"#代号：OnePiece\" class=\"headerlink\" title=\"代号：OnePiece\"></a>代号：<strong>OnePiece</strong></h4><p><img src=\"/assets/blogImg/onepiece.png\" alt=\"&quot;我是伟大的OnePiece&quot;\"></p>\n<blockquote>\n<p>这是海贼王的伟大冒险的终点，当然也是所有故事的起点，是引起这个海贼世界变革的重要地点，我特别欣赏里面的对梦想的执着和对友情的重视,所以我的第一个项目以此为名。</p>\n</blockquote>\n<h4 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h4><p>这个项目我决定做一个租借平台,总有一些东西让我们食之无味，弃之可惜，这个项目要把那些人们不舍得的东西放到网上出租，第一个月我想把最核心的浏览列表和上传物品的功能做完，有别于寻常的项目，我这次要从前台开始做起，<br>前台做完之后再开始做后台功能，我要倒过来做。</p>\n<h4 id=\"可能会用到的技术\"><a href=\"#可能会用到的技术\" class=\"headerlink\" title=\"可能会用到的技术\"></a>可能会用到的技术</h4><ul>\n<li>语言：php+js</li>\n<li>框架：laravel+vue.js</li>\n<li>平台：移动端</li>\n<li>类型：移动端的网站<br>做这些项目当然也要提要自己啦，我会尽可能尝试不同的语言，第一个项目我的技术选型相对保守，先从最熟悉的技术开始实现吧。由于我不是专业的设计，前期的页面可能相对粗糙，还请见谅。<h4 id=\"项目时间安排\"><a href=\"#项目时间安排\" class=\"headerlink\" title=\"项目时间安排\"></a>项目时间安排</h4>今天已经是二月5日了，由于我这个人懒得算数，就以二月份开始吧，那么截止时间就定在4月30号，4月30号我会做项目演示，会公布线上网址（如果我做好的话）</li>\n</ul>\n","excerpt":"","more":"<p>这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！<br> <img src=\"/assets/blogImg/女神2.jpg\" alt=\"&quot;我是傲娇的女神&quot;\"><br> 请收下这波安利，好了，安利结束，我们谈正事，写这篇文章的目的是自己过于散漫，做事不够坚持，然后看到有人凭着年度计划，一步步完善自己，所以我也想试试，学习优秀的人的习惯，总不至于让自己变得太差。</p>\n<h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p> 我的目标是什么呢？在工作之余，以三个月为限，做出上线运营的项目，也就是说我的2017要产出4个上线的项目，每个季度都要产出一个线上运营的项目，而且这都是业余时间完成的，这对我真是一个不小的挑战了，<br> 我希望自己能产出卓越的产品，但是我认为没有量的积累，这永远都不可能，千里之行，始于足下，我这几个产品可能不会优秀,不够细致，过于粗糙，但是<br> 完成比完美重要，上线就是我的目的。之前都是学习技术，今年我会转向输出,输出产品。</p>\n<h2 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h2><p> 我的计划是什么呢？一个季度是三个月，每个月是4个星期，这是一个系列文章，我会在每个周日的晚上发博文(很可能是微博)来报告这周的完成情况和下周的计划安排,并且这个过程是透明的，我写下的所有源码我都会放到github上，从这个网站上<br> 你将会看到我的行动轨迹，我有没有食言，只要方格是绿色的，那就表示我输出了很多的代码，否则我可能就是食言了，但愿不要吧,我还是比较虚的！</p>\n<h2 id=\"计划详情\"><a href=\"#计划详情\" class=\"headerlink\" title=\"计划详情\"></a>计划详情</h2><p> 事先声明，这篇博客我会持续更新的，我思考了下决定了我的第一个项目，我会给它起一个有趣的代号，因为我喜欢看一些动漫，所以我决定给他们起动漫中的物品</p>\n<h2 id=\"我是傲娇的分割线O-∩-∩-O\"><a href=\"#我是傲娇的分割线O-∩-∩-O\" class=\"headerlink\" title=\"我是傲娇的分割线O(∩_∩)O~~\"></a>我是傲娇的分割线O(∩_∩)O~~</h2><h3 id=\"第一个项目\"><a href=\"#第一个项目\" class=\"headerlink\" title=\"第一个项目\"></a>第一个项目</h3><h4 id=\"代号：OnePiece\"><a href=\"#代号：OnePiece\" class=\"headerlink\" title=\"代号：OnePiece\"></a>代号：<strong>OnePiece</strong></h4><p><img src=\"/assets/blogImg/onepiece.png\" alt=\"&quot;我是伟大的OnePiece&quot;\"></p>\n<blockquote>\n<p>这是海贼王的伟大冒险的终点，当然也是所有故事的起点，是引起这个海贼世界变革的重要地点，我特别欣赏里面的对梦想的执着和对友情的重视,所以我的第一个项目以此为名。</p>\n</blockquote>\n<h4 id=\"项目介绍\"><a href=\"#项目介绍\" class=\"headerlink\" title=\"项目介绍\"></a>项目介绍</h4><p>这个项目我决定做一个租借平台,总有一些东西让我们食之无味，弃之可惜，这个项目要把那些人们不舍得的东西放到网上出租，第一个月我想把最核心的浏览列表和上传物品的功能做完，有别于寻常的项目，我这次要从前台开始做起，<br>前台做完之后再开始做后台功能，我要倒过来做。</p>\n<h4 id=\"可能会用到的技术\"><a href=\"#可能会用到的技术\" class=\"headerlink\" title=\"可能会用到的技术\"></a>可能会用到的技术</h4><ul>\n<li>语言：php+js</li>\n<li>框架：laravel+vue.js</li>\n<li>平台：移动端</li>\n<li>类型：移动端的网站<br>做这些项目当然也要提要自己啦，我会尽可能尝试不同的语言，第一个项目我的技术选型相对保守，先从最熟悉的技术开始实现吧。由于我不是专业的设计，前期的页面可能相对粗糙，还请见谅。<h4 id=\"项目时间安排\"><a href=\"#项目时间安排\" class=\"headerlink\" title=\"项目时间安排\"></a>项目时间安排</h4>今天已经是二月5日了，由于我这个人懒得算数，就以二月份开始吧，那么截止时间就定在4月30号，4月30号我会做项目演示，会公布线上网址（如果我做好的话）</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2gapzcm0005ur7y2isn8pkk","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzct000bur7yfmfddc52"},{"post_id":"cj2gapzc00000ur7y4kv0gzzm","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzcy000fur7yxf4z3bm4"},{"post_id":"cj2gapzcn0006ur7y9afcjw9u","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzcz000iur7yadizkxdf"},{"post_id":"cj2gapzcr0009ur7y9rcm0m9c","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzd0000lur7y27so71cw"},{"post_id":"cj2gapzc70001ur7y1ra184rd","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzd1000nur7yytmca1ed"},{"post_id":"cj2gapzcg0003ur7y686wvdyj","category_id":"cj2gapzcc0002ur7ytvyhkkvk","_id":"cj2gapzd1000pur7yrm20g57y"},{"post_id":"cj2gapzct000cur7ynrabv89h","category_id":"cj2gapzd0000jur7ywaqbvma6","_id":"cj2gapzd2000qur7y575bjnc7"}],"PostTag":[{"post_id":"cj2gapzc70001ur7y1ra184rd","tag_id":"cj2gapzck0004ur7ywcv0o5b1","_id":"cj2gapzcs000aur7ykvr99gyd"},{"post_id":"cj2gapzcr0009ur7y9rcm0m9c","tag_id":"cj2gapzck0004ur7ywcv0o5b1","_id":"cj2gapzcy000eur7y4iwo4tqj"},{"post_id":"cj2gapzct000cur7ynrabv89h","tag_id":"cj2gapzck0004ur7ywcv0o5b1","_id":"cj2gapzcz000hur7y1u6goze9"},{"post_id":"cj2gapzcg0003ur7y686wvdyj","tag_id":"cj2gapzcq0008ur7yc64a45r5","_id":"cj2gapzd0000kur7yx6qpdf41"},{"post_id":"cj2gapzcm0005ur7y2isn8pkk","tag_id":"cj2gapzcz000gur7y5n6jkemq","_id":"cj2gapzd1000our7y0dhnpeqa"},{"post_id":"cj2gapzcn0006ur7y9afcjw9u","tag_id":"cj2gapzd1000mur7yizrqgomt","_id":"cj2gapzd2000rur7ydycvx5p4"}],"Tag":[{"name":"php","_id":"cj2gapzck0004ur7ywcv0o5b1"},{"name":"工具","_id":"cj2gapzcq0008ur7yc64a45r5"},{"name":"编辑器","_id":"cj2gapzcz000gur7y5n6jkemq"},{"name":"linux","_id":"cj2gapzd1000mur7yizrqgomt"}]}}