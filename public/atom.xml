<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Graychen的博客</title>
  <icon>https://www.gravatar.com/avatar/af04eb82ca0cc2048ba050b18924fae3</icon>
  <subtitle>这个世界需要更多的英雄</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://graychen.git.io/"/>
  <updated>2018-05-27T09:59:36.029Z</updated>
  <id>http://graychen.git.io/</id>
  
  <author>
    <name>Graychen</name>
    <email>13780185250@sina.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hprose使用说明</title>
    <link href="http://graychen.git.io/2018/05/20/Hprose%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://graychen.git.io/2018/05/20/Hprose使用说明/</id>
    <published>2018-05-20T04:37:25.000Z</published>
    <updated>2018-05-27T09:59:36.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hprose(High Performance Remote Object Service Engine)<br>是一款先进的轻量级、跨语言、跨平台、无侵入式、高性能动态远程对象调用引擎库。它不仅简单易用，而且功能强大。 你无需专门学习，只需看上几眼，就能用它轻松构建分布式应用系统。</p><h1 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h1><h1 id="案例-php"><a href="#案例-php" class="headerlink" title="案例(php)"></a>案例(php)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>使用<code>composer require hprose/hprose</code><br>如果你正在使用 composer 管理你的项目，那么你不需要做任何特别处理。只要在 composer.json 中的 require 段添加了对 hprose/hprose 的引用就可以了。如果你需要 swoole 支持，添加 hprose/hprose-swoole 就可以了。<br>然后在代码中这样引用</li></ul><a id="more"></a><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">use Hprose\Swoole\Http\Server;</div><div class="line"></div><div class="line">//定义Hello服务</div><div class="line">function hello($name) &#123;</div><div class="line">    return &quot;Hello $name!&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//发布服务器</div><div class="line">$server = new Server();</div><div class="line"></div><div class="line">//注册hello方法</div><div class="line">$server-&gt;addFunction(&apos;hello&apos;);</div><div class="line"></div><div class="line">$server-&gt;start();</div></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">Hprose</span>\<span class="title">Client</span>;</div><div class="line"></div><div class="line">$client=Client::create(<span class="string">'http://localhost/'</span>,<span class="keyword">false</span>);</div><div class="line"><span class="keyword">echo</span> $client-&gt;hello(<span class="string">"World"</span>);</div></pre></td></tr></table></figure><p>#案例(go)</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">go get github.com/gorilla/websocket</div><div class="line">go get github.com/valyala/fasthttp</div><div class="line">go get github.com/hprose/hprose-golang</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import(</div><div class="line">    &quot;net/http&quot;</div><div class="line">    &quot;github.com/hprose/hprose-golang/rpc&quot;</div><div class="line">      )</div><div class="line"></div><div class="line">func hello(name string) string &#123;</div><div class="line">    return &quot;Hello&quot; + name + &quot;!&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">    service := rpc.NewHTTPService()</div><div class="line">    service.AddFunction(&quot;hello&quot;, hello, rpc.Options&#123;&#125;)</div><div class="line">    http.ListenAndServer(&quot;:8080&quot;,service)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">        <span class="string">"fmt"</span></div><div class="line">        <span class="string">"github.com/hprose/hprose-golang/rpc"</span></div><div class="line">       )</div><div class="line"></div><div class="line"><span class="keyword">type</span> Stub <span class="keyword">struct</span> &#123;</div><div class="line">    Hello <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span></div><div class="line">    <span class="title">AsyncHello</span> <span class="title">func</span><span class="params">(<span class="keyword">func</span>(<span class="keyword">string</span>, error)</span>,<span class="title">string</span>) `<span class="title">name</span>:"<span class="title">hello</span>"`</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">main</span><span class="params">()</span> &#123;</div><div class="line">    client := rpc.NewClient(<span class="string">"http://127.0.0.1:8080/"</span>)</div><div class="line">    <span class="keyword">var</span> stub *Stub</div><div class="line">    client.UseService(&amp;stub)</div><div class="line">    stub.AsyncHello(<span class="function"><span class="keyword">func</span><span class="params">(result <span class="keyword">string</span>,err error)</span></span> &#123;</div><div class="line">            fmt.Println(result, error)</div><div class="line">            &#125;,<span class="string">"async world"</span>)</div><div class="line">            fmt.Println(stub.Hello(<span class="string">"world"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Hprose(High Performance Remote Object Service Engine)&lt;br&gt;是一款先进的轻量级、跨语言、跨平台、无侵入式、高性能动态远程对象调用引擎库。它不仅简单易用，而且功能强大。 你无需专门学习，只需看上几眼，就能用它轻松构建分布式应用系统。&lt;/p&gt;
&lt;h1 id=&quot;使用手册&quot;&gt;&lt;a href=&quot;#使用手册&quot; class=&quot;headerlink&quot; title=&quot;使用手册&quot;&gt;&lt;/a&gt;使用手册&lt;/h1&gt;&lt;h1 id=&quot;案例-php&quot;&gt;&lt;a href=&quot;#案例-php&quot; class=&quot;headerlink&quot; title=&quot;案例(php)&quot;&gt;&lt;/a&gt;案例(php)&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;composer require hprose/hprose&lt;/code&gt;&lt;br&gt;如果你正在使用 composer 管理你的项目，那么你不需要做任何特别处理。只要在 composer.json 中的 require 段添加了对 hprose/hprose 的引用就可以了。如果你需要 swoole 支持，添加 hprose/hprose-swoole 就可以了。&lt;br&gt;然后在代码中这样引用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://graychen.git.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用gitlab进行持续部署</title>
    <link href="http://graychen.git.io/2018/02/12/%E5%88%A9%E7%94%A8gitlab%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>http://graychen.git.io/2018/02/12/利用gitlab进行持续部署/</id>
    <published>2018-02-12T15:55:00.000Z</published>
    <updated>2018-05-27T09:59:36.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitLab-CI使用Docker进行持续部署"><a href="#GitLab-CI使用Docker进行持续部署" class="headerlink" title="GitLab-CI使用Docker进行持续部署"></a>GitLab-CI使用Docker进行持续部署</h2><p>Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker login -u username -p password registry.demo.com</div><div class="line">docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</div><div class="line">docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</div></pre></td></tr></table></figure></p><p>其中 <code>username</code>是用户名, <code>password</code>是密码, registry.demo.com是私有镜像库地址,<br><code>$CI_PROJECT_NAME</code> 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t registry.demo.com/repos/image-name:latest .</div></pre></td></tr></table></figure></p><p><code>image-name</code>, 就是要构建的镜像名称, <code>latest</code>是TAG标签, <code>repos</code>是仓库的空间名称</p><p>在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库, 部署时通过拉取最新的镜像库, 进行部署<br><a id="more"></a><br>项目的deploy目录中, 放置一些配置文件, 如Dockerfile, docker-compose.yml等, 通过rsync同步到部署服务器上, 用于部署所需<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">image: zacksleo/docker-composer:1.1</div><div class="line"></div><div class="line">before_script:</div><div class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</div><div class="line">    - apk add rsync</div><div class="line">    - eval $(ssh-agent -s)</div><div class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</div><div class="line">    - chmod 0600 ~/deploy.key</div><div class="line">    - ssh-add ~/deploy.key</div><div class="line">    - mkdir -p ~/.ssh</div><div class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</div><div class="line">    - export APP_ENV=testing</div><div class="line"></div><div class="line">stages:</div><div class="line">    - prepare    </div><div class="line">    - build</div><div class="line">    - deploy</div><div class="line"></div><div class="line">variables:</div><div class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</div><div class="line">    DOCKER_DRIVER: overlay</div><div class="line"></div><div class="line">installing-dependencies:</div><div class="line">    stage: prepare</div><div class="line">    script:</div><div class="line">        - composer install --prefer-dist -n --no-interaction -v --no-suggest</div><div class="line">    artifacts:</div><div class="line">        name: &quot;vendor&quot;</div><div class="line">        untracked: true</div><div class="line">        expire_in: 60 mins</div><div class="line">        paths:</div><div class="line">            - $CI_PROJECT_DIR/vendor    </div><div class="line">test-image:</div><div class="line">    stage: build</div><div class="line">    image: docker:latest</div><div class="line">    services:</div><div class="line">        - docker:dind</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:</div><div class="line">        - docker login -u username -p password registry.demo.com</div><div class="line">        - docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</div><div class="line">        - docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</div><div class="line">testing-server:</div><div class="line">    stage: deploy</div><div class="line">    image: alpine</div><div class="line">    variables:</div><div class="line">        DEPLOY_SERVER: &quot;server-host&quot;</div><div class="line">    script:</div><div class="line">        - cd deploy</div><div class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats        </div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u username -p password registry.demo.com&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose pull &amp;&amp; docker-compose up -d&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME chown www-data:www-data web/assets&quot;</div><div class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME ./yii migrate/up --interactive=0&quot;</div></pre></td></tr></table></figure></p><h2 id="GitLab-CI使用LFTP进行持续部署"><a href="#GitLab-CI使用LFTP进行持续部署" class="headerlink" title="GitLab-CI使用LFTP进行持续部署"></a>GitLab-CI使用LFTP进行持续部署</h2><p>LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。</p><p>本文介绍如何使用 LFTP 将文件同步到远程FTP服务器上, 从而实现自动部署</p><p>mirror 命令及主要参数</p><p>-R 反向传输, 因为是上传(put)到远程服务器, 所以使用该参数 (默认是从远程服务器下载)<br>-L 下载符号链接作为文件, 主要处理文件软链接的问题<br>-v 详细输出日志<br>-n 只传输新文件 (相同的旧文件不会传输, 大大提升了传输效率)<br>–transfer-all 传输所有文件, 不论新旧<br>–parallel 同时传输的文件数<br>–file 本地文件<br>–target-directory 目标目录</p><p>配置参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    stage: deploy</div><div class="line">    dependencies:</div><div class="line">        - installing-dependencies</div><div class="line">    script:</div><div class="line">        - apk add lftp</div><div class="line">        # 只上传新文件</div><div class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST; cd /wwwroot; mirror -RLnv ./ /wwwroot --ignore-time --parallel=50 --exclude-glob .git* --exclude .git/&quot;</div><div class="line">        # 指定目录覆盖上传 (强制更新)</div><div class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -RLv ./vendor/composer /wwwroot/vendor/composer --ignore-time --transfer-all --parallel=50 --exclude-glob .git* --exclude .git/&quot;</div><div class="line">        # 单独上传autoload文件(强制更新)</div><div class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -Rv --file=vendor/autoload.php --target-directory=/wwwroot/vendor/ --transfer-all&quot;</div><div class="line">    only:</div><div class="line">        - master</div></pre></td></tr></table></figure></p><h2 id="GitLab-CI使用Rsync进行持续部署"><a href="#GitLab-CI使用Rsync进行持续部署" class="headerlink" title="GitLab-CI使用Rsync进行持续部署"></a>GitLab-CI使用Rsync进行持续部署</h2><p>rsync命令是一个远程数据同步工具<br>主要参数<br>-r 递归目录<br>-t 保留修改时间<br>-v 详细日志<br>-h 输出数字以人类可读的格式<br>-z 在传输过程中压缩文件数据<br>-e 指定要使用的远程shell, 注意该过程需要注入SSH</p><p>配置参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">before_script:</div><div class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</div><div class="line">    - apk add rsync</div><div class="line">    - eval $(ssh-agent -s)</div><div class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</div><div class="line">    - chmod 0600 ~/deploy.key</div><div class="line">    - ssh-add ~/deploy.key</div><div class="line">    - mkdir -p ~/.ssh</div><div class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</div><div class="line">    - export APP_ENV=testing</div><div class="line"></div><div class="line"></div><div class="line">testing-server:</div><div class="line">    stage: deploy</div><div class="line">    image: alpine</div><div class="line">    variables:</div><div class="line">        DEPLOY_SERVER: &quot;server-host&quot;</div><div class="line">    script:</div><div class="line">        - cd deploy</div><div class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats</div></pre></td></tr></table></figure></p><blockquote><p>注意<br>远程服务器需要安装rsync, 否则会出现 bash: rsync: command not found 错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GitLab-CI使用Docker进行持续部署&quot;&gt;&lt;a href=&quot;#GitLab-CI使用Docker进行持续部署&quot; class=&quot;headerlink&quot; title=&quot;GitLab-CI使用Docker进行持续部署&quot;&gt;&lt;/a&gt;GitLab-CI使用Docker进行持续部署&lt;/h2&gt;&lt;p&gt;Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;docker login -u username -p password registry.demo.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;username&lt;/code&gt;是用户名, &lt;code&gt;password&lt;/code&gt;是密码, registry.demo.com是私有镜像库地址,&lt;br&gt;&lt;code&gt;$CI_PROJECT_NAME&lt;/code&gt; 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;docker build -t registry.demo.com/repos/image-name:latest .&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;image-name&lt;/code&gt;, 就是要构建的镜像名称, &lt;code&gt;latest&lt;/code&gt;是TAG标签, &lt;code&gt;repos&lt;/code&gt;是仓库的空间名称&lt;/p&gt;
&lt;p&gt;在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库, 部署时通过拉取最新的镜像库, 进行部署&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="devops" scheme="http://graychen.git.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci由浅入深</title>
    <link href="http://graychen.git.io/2018/02/11/gitlab-ci%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1/"/>
    <id>http://graychen.git.io/2018/02/11/gitlab-ci由浅入深/</id>
    <published>2018-02-11T14:57:07.000Z</published>
    <updated>2018-05-27T09:59:36.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。</p><p>持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。 持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段YAML脚本来实现持续集成.</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="持续集成可以实现的功能"><a href="#持续集成可以实现的功能" class="headerlink" title="持续集成可以实现的功能:"></a>持续集成可以实现的功能:</h2><ul><li>代码审核: 自动化代码规范审查, 甚至代码质量检查</li><li>自动化测试: 单元测试, 功能测试和验收测试</li><li>编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布</li><li>构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2></li></ul><p>GitLab-CI 检测每次代码变动, 通过.gitlab-ci.yml脚本执行构建命令, 将命令发布到GitLab-Runners(运行机)上, 进而执行命令.<br>GitLab-Runners 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.<br>GitLab-Runners把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.<br><a id="more"></a><br>在仓库根目录创建 .gitlab-ci.yml 文件, 内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">job-1:</div><div class="line">  script:</div><div class="line">      - echo &quot;Hello World&quot;</div></pre></td></tr></table></figure></p><pre><code>这样, 在每次提交代码后, 都会自动执行以上脚本. 其中job-1是任务名称, 可以定义多个任务,script下面是 shell 命令, 只要命令执行成功, 就代表本次构建通过(出现passed标记)</code></pre><p>  这样, 一次简单的持续集成已经搞定了.</p><p>  如何编写GitLab-CI配置文件</p><p>  见文档 如何编写GitLab-CI配置文件</p><p>  远程拉取代码</p><p>  使用ssh远程登录服务器, 然后执行git pull 拉取代码, 实现代码热更新</p><p>  由于ssh无密码登录需要用到密钥, 所以首先需要注入私钥</p><p>  如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">release-doc:</div><div class="line">    stage: deploy</div><div class="line">        script:</div><div class="line">          - ssh root@$DEPLOY_SERVER &quot;cd /mnt/data/docker-gollum/wiki &amp;&amp; git pull origin master&quot;</div></pre></td></tr></table></figure></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="根主要关键词一览"><a href="#根主要关键词一览" class="headerlink" title="根主要关键词一览"></a>根主要关键词一览</h3><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明使用的Docker镜像</td><td>为空时使用默认镜像</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stages</td><td>定义构建阶段</td><td>为空时, 单纯定义jobs</td><td>项目的构建分为多个阶段, 例如: 安装依赖/准备, 编译, 测试, 发布等, 同时每个阶段包含若干任务</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可空</td><td>每个job启动时会先执行该脚本</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可空</td><td>同上</td></tr><tr><td>variables</td><td>定义变量</td><td>可空</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可空</td><td>同上</td></tr></tbody></table><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">image: aipline</div><div class="line">services:</div><div class="line">  - mysql</div><div class="line">  - redis</div><div class="line">stages:</div><div class="line">  - build</div><div class="line">  - test</div><div class="line">  - deploy</div><div class="line">before_script:</div><div class="line">  - bundle install  </div><div class="line">after_script:</div><div class="line">  - rm secrets</div><div class="line">cache:</div><div class="line">paths:</div><div class="line">  - binaries/</div><div class="line">  - .config</div></pre></td></tr></table></figure><h2 id="Jobs中的关键词"><a href="#Jobs中的关键词" class="headerlink" title="Jobs中的关键词"></a>Jobs中的关键词</h2><h3 id="jobs中存在一些与根中相同的关键词-这些一旦定义-则会向前覆盖-即根中定义的则不会在该job执行"><a href="#jobs中存在一些与根中相同的关键词-这些一旦定义-则会向前覆盖-即根中定义的则不会在该job执行" class="headerlink" title="jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行"></a>jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行</h3><h4 id="job-这里译为任务"><a href="#job-这里译为任务" class="headerlink" title="job 这里译为任务"></a>job 这里译为任务</h4><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明任务使用的Docker镜像</td><td>为空时使用根中的定义</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>任务中Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stage</td><td>所属构建阶段</td><td>为空时则不使用stages</td><td>一个任务属于一个构建阶段</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可选</td><td>如果在job中定义则会覆盖根中的内容</td></tr><tr><td>script</td><td>定义每个job执行的脚本</td><td>必须</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可选</td><td>同上</td></tr><tr><td>variables</td><td>定义任务中使用的变量</td><td>可选</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可选</td><td>同上</td></tr><tr><td>only</td><td>指定应用的Git分支</td><td>可选</td><td>可以是分支名称, 可用正则匹配分支, 也可是tags来指定打过标签的分支</td></tr><tr><td>except</td><td>排除应用的Git分支</td><td>可选</td><td>同上</td></tr><tr><td>tags</td><td>指定执行的GitLab-Runners</td><td>可选</td><td>通过匹配Runners的标签选定</td></tr><tr><td>allow_failure</td><td>允许失败</td><td>默认为false 如果允许失败, 本次任务不会影响整个构建的结果</td></tr><tr><td>when</td><td>定义合适执行任务</td><td>默认为always</td><td>有on_success, on_failure, always or manual可选</td></tr><tr><td>dependencies</td><td>定义合任务所需要的工件</td><td>可空</td><td>需要首先定义工件</td></tr><tr><td>artifacts</td><td>定义工件</td><td>可空</td><td>工件中指定的目录会在任务执行成功后压缩传到GitLab, 后面需要该工件的任务执行时, 再自行下载解压</td></tr><tr><td>environment</td><td>定义环境</td><td>可空</td><td>在部署任务中, 定义该任务所属的环境</td></tr></tbody></table><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">installing-dependencies:</div><div class="line">  script:</div><div class="line">    - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</div><div class="line">    - composer dump-autoload --optimize</div><div class="line">  artifacts:</div><div class="line">    - name: &quot;vendor&quot;</div><div class="line">    - untracked: true</div><div class="line">    - expire_in: 60 mins</div><div class="line">    - paths:</div><div class="line">    - vendor/    </div><div class="line">deleteocker-build-image:    </div><div class="line">  stage: test</div><div class="line">  only:</div><div class="line">    - master</div><div class="line">  except:</div><div class="line">    - develop</div><div class="line">  tags:</div><div class="line">    - ruby</div><div class="line">    - postgres</div><div class="line">  allow_failure: true</div><div class="line">  dependencies:</div><div class="line">    - installing-dependencies</div><div class="line">  script:        </div><div class="line">    - docker build -t registry.com/mops/image:latest .</div><div class="line">    - docker push registry.com/mops/image:latest</div></pre></td></tr></table></figure></p><blockquote><p>注意:<br>jobs的名称不能重名<br>同一阶段中的任务, 是并行执行的<br>上一阶段所有任务执行完后, 才会进入下一阶段<br>定义工件时, 务必定义工件的过期时间, 否则工件会一直寸在GitLab上, 占用空间<br>如果需要在任务中传递文件, 优先选择使用 dependencies (结合artifacts)</p></blockquote><h3 id="验证配置文件合法性"><a href="#验证配置文件合法性" class="headerlink" title="验证配置文件合法性"></a>验证配置文件合法性</h3><p>  在GitLab中, 打开 /ci/lint网址, 将配置文件粘贴在些, 进行验证</p><h2 id="通过gitlab-ci实现文件的自动部署"><a href="#通过gitlab-ci实现文件的自动部署" class="headerlink" title="通过gitlab-ci实现文件的自动部署"></a>通过gitlab-ci实现文件的自动部署</h2><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>  文档托管在gitlab上, 每次代码更新, 会自动出发gitlab-ci构建 在构建脚本中, 通过ssh 登录远程服务器执行git拉取文档的命令</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="生成ssh证书"><a href="#生成ssh证书" class="headerlink" title="生成ssh证书"></a>生成ssh证书</h4><p>  在服务器上, 使用ssh-keygen生成root用户(或其他有权访问的用户)的公钥和私钥<br>  在用户根目录(~)中, 创建authorized_keys并设置权限: chmod 600 authorized_keys</p><h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h4><p>  添加公钥: cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>  id_rsa.pub为第一步生成的公钥<br>  注意该证书的用户必须与ssh远程登录的用户一样, 例如我们的用户名是root<br>  将公钥添加到gitlab上, 以便于该用于可以拉取代码, 在User Settings找到 SSH Keys, 添加上面拿到的公钥</p><h4 id="设置CI-CD变量"><a href="#设置CI-CD变量" class="headerlink" title="设置CI/CD变量"></a>设置CI/CD变量</h4><p>  在 CI/CD Piplines中设置 Secret Variables, 包括 DEPLOY_SERVER 和 SSH_PRIVATE_KEY<br>  其中 SSH_PRIVATE_KEY 的内容是服务器上的私钥, DEPLOY_SERVER 是服务器地址<br>  编写 .gitlab-ci.yml 文件, 注入密钥, 通过ssh执行远程命令<br>  完整代码<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"># 使用alpine镜像, 该镜像很少,只有几兆</div><div class="line">image: alpine</div><div class="line">stages:</div><div class="line">  - deploy</div><div class="line">before_script:</div><div class="line">  # 预先装 ssh-agent</div><div class="line">  - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</div><div class="line">  # 启动服务</div><div class="line">  - eval $(ssh-agent -s)</div><div class="line">  # 将私钥写入deploy.key 文件</div><div class="line">  - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; deploy.key</div><div class="line">  # 配置较低权限</div><div class="line">  - chmod 0600 deploy.key</div><div class="line">  # 注入密钥</div><div class="line">  - ssh-add deploy.key</div><div class="line">  - mkdir -p ~/.ssh    </div><div class="line">  - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</div><div class="line"></div><div class="line">release-doc:</div><div class="line">  stage: deploy</div><div class="line">  variables:</div><div class="line">    GIT_STRATEGY: none     </div><div class="line">  script:</div><div class="line">    # 连接远程服务器并执行拉取代码的命令</div><div class="line">    - ssh root@$DEPLOY_SERVER &quot;cd /path/to/wiki &amp;&amp; git pull origin master&quot;</div><div class="line">  only:</div><div class="line">    - master</div><div class="line">  environment:</div><div class="line">    name: production</div><div class="line">    url: http://$DEPLOY_SERVER</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。&lt;/p&gt;
&lt;p&gt;持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。 持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段YAML脚本来实现持续集成.&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;h2 id=&quot;持续集成可以实现的功能&quot;&gt;&lt;a href=&quot;#持续集成可以实现的功能&quot; class=&quot;headerlink&quot; title=&quot;持续集成可以实现的功能:&quot;&gt;&lt;/a&gt;持续集成可以实现的功能:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码审核: 自动化代码规范审查, 甚至代码质量检查&lt;/li&gt;
&lt;li&gt;自动化测试: 单元测试, 功能测试和验收测试&lt;/li&gt;
&lt;li&gt;编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布&lt;/li&gt;
&lt;li&gt;构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitLab-CI 检测每次代码变动, 通过.gitlab-ci.yml脚本执行构建命令, 将命令发布到GitLab-Runners(运行机)上, 进而执行命令.&lt;br&gt;GitLab-Runners 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.&lt;br&gt;GitLab-Runners把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git使用规范</title>
    <link href="http://graychen.git.io/2018/02/11/git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://graychen.git.io/2018/02/11/git使用规范/</id>
    <published>2018-02-11T14:30:54.000Z</published>
    <updated>2018-05-27T09:59:36.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>master: 用于生产环境部署, 只接受合并请求, 不直接提交</li><li>testing: 用于测试环境测试</li><li>develop: 用于日常开发主线, 其他分支只能合并到 develop 分支</li><li>feature-xxx: 用于增加一个新功能</li><li><p>hotfix-xxx: 用于修复一个紧急bug<br>每次开发新功能，都应该新建一个单独的分支</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2></li><li><p>如果要贡献代码, 首先应阅读贡献指南, 确认如果贡献代码</p></li><li>Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发</li><li>开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息</li><li>开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库<h2 id="Commit-message-和-Change-log-编写指南"><a href="#Commit-message-和-Change-log-编写指南" class="headerlink" title="Commit message 和 Change log 编写指南"></a>Commit message 和 Change log 编写指南</h2></li></ul><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交 +Commit message 遵从<a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener"> Angular 规范</a></p><h3 id="安装-Commitizen-来格式化-commit-使其遵循以上规范"><a href="#安装-Commitizen-来格式化-commit-使其遵循以上规范" class="headerlink" title="安装 Commitizen 来格式化 commit , 使其遵循以上规范"></a>安装 Commitizen 来格式化 commit , 使其遵循以上规范</h3><p>首先注意将package.json和node_modules加入.gitignore文件<br>全局安装commitizen: <code>npm install -g commitizen</code><br>在项目根目录初始化package.json: <code>npm init --yes</code><br>项目根目录运行 <code>commitizen init cz-conventional-changelog --save --save-exact</code><br>每次提交代码时, 用 <code>git cz</code> 代替<code>git commit</code><br><a id="more"></a></p><h2 id="自动生成-Change-log"><a href="#自动生成-Change-log" class="headerlink" title="自动生成 Change log"></a>自动生成 Change log</h2><p>安装 <code>npm install -g conventional-changelog-cli</code><br>使用<code>conventional-changelog</code>生成日志: <code>conventional-changelog -p angular -i CHANGELOG.md -s -r 0</code></p><h2 id="版本号使用规范"><a href="#版本号使用规范" class="headerlink" title="版本号使用规范"></a>版本号使用规范</h2><p>版本号遵循语义化版本规范.</p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><p>主版本号：当你做了不兼容的 API 修改，<br>次版本号：当你做了向下兼容的功能性新增，<br>修订号：当你做了向下兼容的问题修正。<br>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><p>更多内容参见 <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git 使用规范流程</a><br><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a><br><a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener">Git commit message 规范</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h1&gt;&lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;master: 用于生产环境部署, 只接受合并请求, 不直接提交&lt;/li&gt;
&lt;li&gt;testing: 用于测试环境测试&lt;/li&gt;
&lt;li&gt;develop: 用于日常开发主线, 其他分支只能合并到 develop 分支&lt;/li&gt;
&lt;li&gt;feature-xxx: 用于增加一个新功能&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hotfix-xxx: 用于修复一个紧急bug&lt;br&gt;每次开发新功能，都应该新建一个单独的分支&lt;/p&gt;
&lt;h2 id=&quot;工作流&quot;&gt;&lt;a href=&quot;#工作流&quot; class=&quot;headerlink&quot; title=&quot;工作流&quot;&gt;&lt;/a&gt;工作流&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要贡献代码, 首先应阅读贡献指南, 确认如果贡献代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发&lt;/li&gt;
&lt;li&gt;开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息&lt;/li&gt;
&lt;li&gt;开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库&lt;h2 id=&quot;Commit-message-和-Change-log-编写指南&quot;&gt;&lt;a href=&quot;#Commit-message-和-Change-log-编写指南&quot; class=&quot;headerlink&quot; title=&quot;Commit message 和 Change log 编写指南&quot;&gt;&lt;/a&gt;Commit message 和 Change log 编写指南&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交 +Commit message 遵从&lt;a href=&quot;http://blog.cheenwe.cn/2016-04-18/git-commit-message/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Angular 规范&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装-Commitizen-来格式化-commit-使其遵循以上规范&quot;&gt;&lt;a href=&quot;#安装-Commitizen-来格式化-commit-使其遵循以上规范&quot; class=&quot;headerlink&quot; title=&quot;安装 Commitizen 来格式化 commit , 使其遵循以上规范&quot;&gt;&lt;/a&gt;安装 Commitizen 来格式化 commit , 使其遵循以上规范&lt;/h3&gt;&lt;p&gt;首先注意将package.json和node_modules加入.gitignore文件&lt;br&gt;全局安装commitizen: &lt;code&gt;npm install -g commitizen&lt;/code&gt;&lt;br&gt;在项目根目录初始化package.json: &lt;code&gt;npm init --yes&lt;/code&gt;&lt;br&gt;项目根目录运行 &lt;code&gt;commitizen init cz-conventional-changelog --save --save-exact&lt;/code&gt;&lt;br&gt;每次提交代码时, 用 &lt;code&gt;git cz&lt;/code&gt; 代替&lt;code&gt;git commit&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术 php" scheme="http://graychen.git.io/tags/%E6%8A%80%E6%9C%AF-php/"/>
    
  </entry>
  
  <entry>
    <title>集中式日志管理elk搭建</title>
    <link href="http://graychen.git.io/2018/02/10/%E9%9B%86%E4%B8%AD%E5%BC%8F%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86elk%E6%90%AD%E5%BB%BA/"/>
    <id>http://graychen.git.io/2018/02/10/集中式日志管理elk搭建/</id>
    <published>2018-02-10T05:56:26.000Z</published>
    <updated>2018-05-27T09:59:36.034Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，我们组内决定将各个应用的日志都集中管理起来，所以需要一款集中式的日志管理系统，查找了市面上的系统发现elk不错，所以我就研究搭建了elk，下面是我在搭建过程中的一些心得。</p><blockquote><p>elk:这其实是一套组件的缩写，其中比较核心的是三个组件ELK(Elasticsearch, Logstash, Kibana), 经过这么多年的发展已经是6.0.0版本</p><ul><li>Elasticsearch 高可用性，实时索引，拓展简单，接口友好</li><li>Kibana 提供分析和可视化的 Web 平台，用来查询分析以及生成各种报表</li><li>Logstash 是一个具有实时的数据收集引擎，几乎可以收集所有的数据</li><li>Beats 轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据</li><li>X-Pack 是集成了多种便捷功能的单个插件 — security、alerting、monitoring、reporting、graph 探索</li></ul></blockquote><h2 id="elk的初始化"><a href="#elk的初始化" class="headerlink" title="elk的初始化"></a>elk的初始化</h2><p>其实elk既可以在linux的环境安装也可以使用docker形式，我在github上找到一个已经配置好的docker环境的<a href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener">docker-elk</a><br>使用git clone git@github.com:deviantony/docker-elk.git后执行docker-compose up,然后我们访问<a href="http://localhost:5601,以下是它的端口" target="_blank" rel="noopener">http://localhost:5601,以下是它的端口</a></p><ul><li>5000: Logstash TCP input.</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana<a id="more"></a><h2 id="elk-配置"><a href="#elk-配置" class="headerlink" title="elk 配置"></a>elk 配置</h2>我们先配置’elk/logstash/pipeline/logstash.conf’<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">input &#123;</div><div class="line">        beats &#123; #通过这个端口接收filebeat组件发送过来的日志</div><div class="line">                port =&gt; 5043</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">## Add your filters / logstash plugins configuration here</div><div class="line">filter &#123;</div><div class="line">        grok &#123; # 正则形式将无序的日志整理成有序的结构形式</div><div class="line">                match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;GREEDYDATA:health_Timestamp&#125;\[%&#123;IPV4:health_IPaddress&#125;\]\[-\]\[-\]\[%&#123;LOGLEVEL:health_LogLevel&#125;\]\[%&#123;NOTSPACE:health_Category&#125;\]%&#123;GREEDYDATA:health_Text&#125;&quot; &#125; </div><div class="line">        &#125;    </div><div class="line">        geoip &#123; #通过这个可以将ip和地理位置相关联</div><div class="line">                source =&gt; &quot;clientip&quot;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">output &#123; #将日志信息交给elasticsearch处理</div><div class="line">        elasticsearch &#123;</div><div class="line">                hosts =&gt; &quot;elasticsearch:9200&quot;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="filebeat配置"><a href="#filebeat配置" class="headerlink" title="filebeat配置"></a>filebeat配置</h2><p>然后我们到我们要挖掘日志的应用中添加filebeat组件，将日志的搬运方向直销刚刚留出来的elk的ip:5043端口</p><ul><li><p>现在docker-compose.yml添加filebeat组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">filebeat:</div><div class="line">        image: docker.elastic.co/beats/filebeat:6.0.0</div><div class="line">        hostname: filebeat</div><div class="line">        container_name: filebeat</div><div class="line">        restart: always</div><div class="line">        volumes:</div><div class="line">        - ./services/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml</div><div class="line">        - ./services/filebeat/config/filebeat.template.json:/usr/share/filebeat/filebeat.template.json</div><div class="line">        - ./api/runtime/logs:/var/logs</div><div class="line">        - ./api/runtime/debug:/var/debug</div><div class="line">        depends_on:</div><div class="line">        - web</div></pre></td></tr></table></figure></li><li><p>接着我们配置刚刚docker-compose配置的./services/filebeat/config/filebeat.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">filebeat.prospectors:</div><div class="line">- type: log</div><div class="line">  paths:</div><div class="line">      - &quot;/var/logs/*.log&quot;</div><div class="line">     #- &quot;/var/debug/*.data&quot;</div><div class="line">registry_file: /etc/registry/mark</div><div class="line">#============================= 将以时间的日志归并为一行 ===============================</div><div class="line">  multiline.pattern: &apos;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&apos;</div><div class="line">  multiline.negate: true</div><div class="line">  multiline.match: after</div><div class="line">  multiline.timeout: 10s</div><div class="line">enable: true</div><div class="line">#============================= Filebeat modules ===============================</div><div class="line">#</div><div class="line">filebeat.config.modules:</div><div class="line"># Glob pattern for configuration loading</div><div class="line">  path: /usr/share/filebeat/modules.d/*.yml</div><div class="line">#</div><div class="line"># Set to true to enable config reloading</div><div class="line">reload.enabled: true</div><div class="line"></div><div class="line">output:</div><div class="line">logstash:</div><div class="line">hosts: [&quot;刚刚配置的elk的ip地址:5043&quot;]</div><div class="line"></div><div class="line">logging:</div><div class="line">files:</div><div class="line">rotateeverybytes: 10485760 # = 10MB</div></pre></td></tr></table></figure><p>参考文章:</p></li></ul><hr><p><a href="https://www.elastic.co/cn/products" target="_blank" rel="noopener">官网</a><br><a href="http://blog.csdn.net/sysushui/article/details/78461498" target="_blank" rel="noopener">使用Docker搭建ELK日志系统</a><br><a href="https://www.jianshu.com/p/a980cd121212" target="_blank" rel="noopener">ELK—合并多行日志（php.log）</a><br><a href="https://jicki.me/2016/10/11/docker-elk-filebeat/" target="_blank" rel="noopener">docker容器日志集中ELK</a><br><a href="https://my.oschina.net/openplus/blog/1584861" target="_blank" rel="noopener">filebeat+logstash配置搭建</a><br><a href="https://www.cnblogs.com/stozen/p/5638369.html" target="_blank" rel="noopener">关于Logstash中grok插件的正则表达式例子</a><br><a href="http://blog.51cto.com/john88wang/1641723" target="_blank" rel="noopener">使用Logstash收集PHP相关日志-Linux SA John-51CTO博客</a><br><a href="https://birdben.github.io/2016/11/21/Logstash/Logstash%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89Logstash%E6%95%B4%E5%90%88Kafka/" target="_blank" rel="noopener">Logstash整合Kafka</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，我们组内决定将各个应用的日志都集中管理起来，所以需要一款集中式的日志管理系统，查找了市面上的系统发现elk不错，所以我就研究搭建了elk，下面是我在搭建过程中的一些心得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;elk:这其实是一套组件的缩写，其中比较核心的是三个组件ELK(Elasticsearch, Logstash, Kibana), 经过这么多年的发展已经是6.0.0版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 高可用性，实时索引，拓展简单，接口友好&lt;/li&gt;
&lt;li&gt;Kibana 提供分析和可视化的 Web 平台，用来查询分析以及生成各种报表&lt;/li&gt;
&lt;li&gt;Logstash 是一个具有实时的数据收集引擎，几乎可以收集所有的数据&lt;/li&gt;
&lt;li&gt;Beats 轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据&lt;/li&gt;
&lt;li&gt;X-Pack 是集成了多种便捷功能的单个插件 — security、alerting、monitoring、reporting、graph 探索&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;elk的初始化&quot;&gt;&lt;a href=&quot;#elk的初始化&quot; class=&quot;headerlink&quot; title=&quot;elk的初始化&quot;&gt;&lt;/a&gt;elk的初始化&lt;/h2&gt;&lt;p&gt;其实elk既可以在linux的环境安装也可以使用docker形式，我在github上找到一个已经配置好的docker环境的&lt;a href=&quot;https://github.com/deviantony/docker-elk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker-elk&lt;/a&gt;&lt;br&gt;使用git clone git@github.com:deviantony/docker-elk.git后执行docker-compose up,然后我们访问&lt;a href=&quot;http://localhost:5601,以下是它的端口&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:5601,以下是它的端口&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5000: Logstash TCP input.&lt;/li&gt;
&lt;li&gt;9200: Elasticsearch HTTP&lt;/li&gt;
&lt;li&gt;9300: Elasticsearch TCP transport&lt;/li&gt;
&lt;li&gt;5601: Kibana
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux基础" scheme="http://graychen.git.io/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>集群的nginx配置</title>
    <link href="http://graychen.git.io/2018/01/15/%E9%9B%86%E7%BE%A4%E7%9A%84nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://graychen.git.io/2018/01/15/集群的nginx配置/</id>
    <published>2018-01-14T16:01:54.000Z</published>
    <updated>2018-05-27T09:59:36.028Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是nginx的进阶篇，我会详细梳理集群的nginx配置,包括nginx服务器的反向代理，负载均衡,不过这些都是要先建立后端服务器组。<br>按照上篇的惯例，我们先亮出集群nginx配置文件</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">user nobody nobody;</div><div class="line">worker_process 2;</div><div class="line">error_log /usr/local/webserver/nginx/logs/nginx_error.log crit;</div><div class="line">pid /usr/local/webserver/nginx/nginx/pid;</div><div class="line">worker_rlimit_nofile 65535;</div><div class="line">events</div><div class="line">&#123;</div><div class="line">        use epoll;</div><div class="line">        woreker_connections 65535;</div><div class="line">&#125;</div><div class="line">http</div><div class="line">&#123;</div><div class="line">        include mime.types;</div><div class="line">        default_type application/octet-stream;</div><div class="line">        charset utf-8;</div><div class="line">        sendfile on;</div><div class="line">        tcp_nopush on;</div><div class="line">        keepalive_timeout 60;</div><div class="line">        tcp_nodelay on;</div><div class="line">        client_body_buffer_size 512k;</div><div class="line">        proxy_connect_timeout 5;</div><div class="line">        proxy_read_timeout 60;</div><div class="line">        proxy_send_timeout 5;</div><div class="line">        proxy_buffer_size 16k;</div><div class="line">        proxy_buffers 4 16k;</div><div class="line">        proxy_busy_buffers_size 128k;</div><div class="line">        proxy_temp_file_write_size 128k;</div><div class="line">        gzip on;</div><div class="line">        gzip_min_length 1k;</div><div class="line">        gzip_buffers 4 16k;</div><div class="line">        gzip_http_version 1.1;</div><div class="line">        gzip_comp_level 2;</div><div class="line">        gzip_types text/plain application/x-javascript text/css application/xml;</div><div class="line">        gzip_vary on;</div><div class="line">#设置Web缓存区名称为cache_one,内存缓存空间大小为200M,1天清理一次缓存，硬盘缓存空间大小为30GB</div><div class="line">        proxy_temp_file_path /data0/proxy_temp_dir;</div><div class="line">        proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m</div><div class="line">        inactive=1d max_size=30g;</div><div class="line">        upstream backend &#123;</div><div class="line">                server 192.168.1.3:80 weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">                server 192.168.1.4:80 weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">                server 192.168.1.5:80 weight=1 max_fails=2 fail_timeout=30s;</div><div class="line">        &#125;</div><div class="line">        server</div><div class="line">        &#123;</div><div class="line">                listen 80;</div><div class="line">                server_name myweb;</div><div class="line">                index index.html index.htm;</div><div class="line">                root /data0/htdocs/www;</div><div class="line">                location /</div><div class="line">                &#123;</div><div class="line">                        #如果后端的服务器返回502,504执行超时等错误，将请求转发到另一台服务器。</div><div class="line">                        proxy_next_upstream http_502 http_504 error timeout invalid_header;</div><div class="line">                        proxy_cache cache_one;</div><div class="line">                        #针对不同HTTP状态设置不同的缓存时间</div><div class="line">                        proxy_cache_key $host$uri$is_args$args;</div><div class="line">                        proxy_set_header Host $host;</div><div class="line">                        proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">                        proxy_pass http://backend_server;</div><div class="line">                        expires 1d;</div><div class="line">                &#125;</div><div class="line">                #配置缓存清楚功能</div><div class="line">                location ~ /purge(/.*)</div><div class="line">                &#123;</div><div class="line">                        allow 127.0.0.1;</div><div class="line">                        allow 192.168.0.0/16;</div><div class="line">                        deny all;                </div><div class="line">                        proxy_cache_purge cache_one $host$1$is_args$args;</div><div class="line">                &#125;</div><div class="line">                #配置数据不缓存</div><div class="line">                location ~ .*\.(php|jpg|cgi)?$</div><div class="line">                &#123;</div><div class="line">                        proxy_set_header Host $host;</div><div class="line">                        proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">                        proxy_pass http://backend;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h2 id="后端服务器组"><a href="#后端服务器组" class="headerlink" title="后端服务器组"></a>后端服务器组</h2><h3 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h3><p>upstream backend<br>{<br>        server backend1.example weight=5; #组内服务器设置权重，数字越大有限级越高<br>        server 127.0.0.1:8080 max_fails=3 fail_timeout=30s; #1请求失败的次数 2请求组内服务器的时间 #30秒内失败3次该服务器是无效状态<br>        server 127.0.0.1:8081 backup; #备用服务器<br>        server 127.0.0.1:8082 down; #永久无效状态<br>        server unix:/tmp/backend3;<br>}<br>upstream backend2<br>{<br>        ip_hash #实现会话保持功能，将某个客户端定向到同一服务器，保证session,不能和weight一起用<br>        server myback1.proxy.com;<br>        server myback2.proxy.com;<br>        keeyalive 10 #控制网络连接保持功能,保证工作进程为服务器组打开一部分连接，控制数量<br>        last_conn;#选择当前网络连接最少的服务器<br>}</p><h2 id="rewrite功能配置"><a href="#rewrite功能配置" class="headerlink" title="rewrite功能配置"></a>rewrite功能配置</h2><h3 id="ngx-http-rewrite-module模块"><a href="#ngx-http-rewrite-module模块" class="headerlink" title="ngx_http_rewrite_module模块"></a>ngx_http_rewrite_module模块</h3><blockquote><p>用于实现url的重写，依赖PCRE库，是一种地址重写，会产生两次请求</p></blockquote><p>last：终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行<br>location / {<br>     rewrite ^(/myweb/.<em>)/media/(.</em>)..<em>$ $1/mp3/$2.mp3 last;<br>     rewrite ^(/myweb/.</em>)/audio/(.<em>).</em>$ $1/mp3/$2.ra last;<br>}</p><h3 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 80;</div><div class="line">        server_name jump.myweb.name;</div><div class="line">        rewrite ^ http://www.myweb.info/;#域名跳转</div><div class="line">&#125;</div><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 80;</div><div class="line">        server_name jump.myweb.name jump.myweb.info</div><div class="line">        if($host ^ myweb.\info) #.用\转义</div><div class="line">        &#123;</div><div class="line">                rewrite *(.*) http://jump.myweb.name$1 permanent; #多域名跳转</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 80;       </div><div class="line">        server_name jump1.myweb.name jump2.myweb.name;</div><div class="line">        if($http_host ~* ^(.*)\.myweb\.name$)</div><div class="line">        &#123;</div><div class="line">                rewrite ^(.*) http://jump.myweb.name$1; #三级域名跳转</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="域名镜像"><a href="#域名镜像" class="headerlink" title="域名镜像"></a>域名镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 80;</div><div class="line">        server_name mirror1.myweb.name;</div><div class="line">        rewrite ^(.*) http://jump1.myweb.name$1 last;</div><div class="line">&#125;</div><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 81;</div><div class="line">        server_name mirror2.myweb.name;</div><div class="line">        rewrite ^(.*) http://jump2.myweb.name$1 last;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="独立域名"><a href="#独立域名" class="headerlink" title="独立域名"></a>独立域名</h3><p>当一个网站包含多个板块时，可以为某些板块设置独立域名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">server</div><div class="line">&#123;</div><div class="line">        listen 80;</div><div class="line">        server_name bbs.myweb.name;</div><div class="line">        rewrite ^(.*) http://www.myweb.com/bbs$1 last;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)*</div><div class="line">&#123;</div><div class="line">        valid_referers none blocked server_name *. myweb.name;</div><div class="line">        if($invalid_referer) #检查请求头部Referer头域是不是自己的站点，如果不是，返回固定图片</div><div class="line">        &#123;</div><div class="line">                rewrite ^/ http://www.myweb.com/images/forbidden.png;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>局域网向Internet提供局域网内的资源，设置一个代理服务器</p></blockquote><p>proxy_pass URL 设置被代理的服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">upstream proxy_svrs</div><div class="line">&#123;</div><div class="line">        ...</div><div class="line">&#125;</div><div class="line">server</div><div class="line">&#123;</div><div class="line">...</div><div class="line">        location /</div><div class="line">        &#123;</div><div class="line">                proxy_pass proxy_svrs;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>proxy_hide_header field;#用于设置Nginx发送响应时，隐藏头域名信息</li><li>proxy_pass_header field;#设置需要发送的头域信息</li><li>proxy_pass_request_body on | false;# 是否将客户端的请求体发送给代理服务器</li><li>proxy_pass_request_headers on | off; # 是否将客户端的请求头发送给代理服务器</li><li>proxy_set_header field value; #更改接收的客户端请求的请求头信息，将新的请求头发送给被代理服务器</li><li>proxy_set_body value; #更改客户端接收的请求体，将新的请求体发送给服务器</li><li>proxy_bind; #强制将代理主机的连接绑定到指定的IP地址</li><li>proxy_connect_timeout time;#与被代理服务器的连接超时时间</li><li>proxy_read_timeout time;#被代理服务器组read后，等待响应超时时间</li><li>proxy_send_timeout time; #被代理服务器组write后，等待响应超时时间 </li><li>proxy_http_version 1.0|1.1#设置nginx和代理服务器的http协议版本</li><li>proxy_method;#nginx 和代理服务器组的请求方法</li><li>proxy_ignore_client_abort on; #客户端请求中断时，是否中断对被代理服务器的请求</li><li>proxy_ignore_headers field;#nginx收到代理服务器的响应请求后，不会处理被设置的头域</li><li>proxy_redirect; #修改被代理服务器组的Location域和Refresh域</li><li>proxy_intercept_errors off; #直接返回代理服务器的http状态码</li><li>proxy_hash_max_size 512; #http报头文的容量上限</li><li>proxy_headers_hash_bucket_size 64; #http报头文的哈希表容量的单位大小</li><li>proxy_next_upstream status;#遵循upstream指令的轮询规则</li><li>proxy_ssl_session_reuse on;#开启ssl代理间协议<h4 id="Proxy-Buffer"><a href="#Proxy-Buffer" class="headerlink" title="Proxy Buffer"></a>Proxy Buffer</h4></li><li>proxy_buffering on; #开启proxy buffer(存放从代理服务器接收的一次响应数据的临时存放文件,接收完整的一次响应后才发送到客户端)</li><li>proxy_buffers 8 4k; #buffer个数 每个大小</li><li>proxy_busy_buffers_size 16kb; #busy状态下buffer总大小</li><li>proxy_temp_path /nginx/proxy_web/spool/proxy_temp 1 2; #临时文件路径 第几级目录</li><li>proxy_max_temp_file_size 1024MB #临时文件总体积上限值</li><li>proxy_temp_file_write_size 8kb; #数据量总大小限值<h4 id="Proxy-Cache-对已有数据在内存中建立缓存数据"><a href="#Proxy-Cache-对已有数据在内存中建立缓存数据" class="headerlink" title="Proxy Cache(对已有数据在内存中建立缓存数据)"></a>Proxy Cache(对已有数据在内存中建立缓存数据)</h4></li><li>proxy_cache zone | off #设置存放缓存内存区域名字</li><li>proxy_cache_bypass #向客户端发送数据时不从缓存中获取</li><li>proxy_cache_key $scheme$proxy_host$is_args$args #缓存数据建立索引的关键字</li><li>proxy_cache_lock on#缓存中的数据同时只能被一条请求读取</li><li>proxy_cache_lock_timeout 5s; #缓存锁的超时时间</li><li>proxy_cache_min_use 1; #向代理发送相同请求超过几次才缓存</li><li>proxy_cache_path /nginx/cache/a levels=1 keys_zone=a:10m;# 缓存路径 一级目录 缓存内存区域的名称和大小</li><li>proxy_cache_use_stale error | timeout |invalid_header|updating|http_500|http_502#代理服务器出错时访问历史缓存</li><li>proxy_cache_valid 200 302 10m #对返回200和302状态缓存10分钟</li><li>proxy_store on;#开启本地磁盘缓存数据</li><li>proxy_store_access user:rw group:rw all:r #配置缓存权限<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>将网络访问平衡地分摊到网络集群的各个操作单元上,减少用户的等待时间</p></blockquote></li></ul><p>upstream backend<br>{<br>  server 192.168.1.2:80 weight=5 #权限最高<br>  server 192.168.1.3:80 weight=2<br>  server 192.168.1.4:80          #默认1<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是nginx的进阶篇，我会详细梳理集群的nginx配置,包括nginx服务器的反向代理，负载均衡,不过这些都是要先建立后端服务器组。&lt;br&gt;按照上篇的惯例，我们先亮出集群nginx配置文件&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user nobody nobody;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;worker_process 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;error_log /usr/local/webserver/nginx/logs/nginx_error.log crit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pid /usr/local/webserver/nginx/nginx/pid;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;worker_rlimit_nofile 65535;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;events&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        use epoll;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        woreker_connections 65535;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        include mime.types;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        default_type application/octet-stream;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        charset utf-8;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sendfile on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tcp_nopush on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        keepalive_timeout 60;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tcp_nodelay on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        client_body_buffer_size 512k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_connect_timeout 5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_read_timeout 60;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_send_timeout 5;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_buffer_size 16k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_buffers 4 16k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_busy_buffers_size 128k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_temp_file_write_size 128k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_min_length 1k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_buffers 4 16k;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_http_version 1.1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_comp_level 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_types text/plain application/x-javascript text/css application/xml;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_vary on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#设置Web缓存区名称为cache_one,内存缓存空间大小为200M,1天清理一次缓存，硬盘缓存空间大小为30GB&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_temp_file_path /data0/proxy_temp_dir;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        inactive=1d max_size=30g;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        upstream backend &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server 192.168.1.3:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server 192.168.1.4:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server 192.168.1.5:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        server&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                listen 80;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server_name myweb;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                index index.html index.htm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                root /data0/htdocs/www;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        #如果后端的服务器返回502,504执行超时等错误，将请求转发到另一台服务器。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_next_upstream http_502 http_504 error timeout invalid_header;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_cache cache_one;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        #针对不同HTTP状态设置不同的缓存时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_cache_key $host$uri$is_args$args;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_set_header Host $host;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_set_header X-Forwarded-For $remote_addr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_pass http://backend_server;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        expires 1d;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                #配置缓存清楚功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location ~ /purge(/.*)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        allow 127.0.0.1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        allow 192.168.0.0/16;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        deny all;                &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_cache_purge cache_one $host$1$is_args$args;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                #配置数据不缓存&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location ~ .*\.(php|jpg|cgi)?$&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_set_header Host $host;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_set_header X-Forwarded-For $remote_addr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        proxy_pass http://backend;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置优化</title>
    <link href="http://graychen.git.io/2018/01/04/nginx%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://graychen.git.io/2018/01/04/nginx配置优化/</id>
    <published>2018-01-04T14:52:38.000Z</published>
    <updated>2018-05-27T09:59:36.032Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于刚看完nginx高性能web服务器详解，就想结合自己工作的经历，对nginx的优化配置做一个系统的总结，这篇是初级篇，是单机的nginx优化配置<br>首先我们看一份较简单的nginx.conf配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">#### 全局块开始 ####</div><div class="line">user nobody nobody; #配置允许Nginx服务器的用户和用户组</div><div class="line">worker_processes 3; #配置Nginx进程生成的worker_processes数目</div><div class="line">error_log logs/error_log; #配置Nginx服务器允许对错误日志存放路径</div><div class="line">pid nginx.pid; #配置Nginx服务允许时的错误日志存放路径</div><div class="line">#### 全局块结束 ####</div><div class="line"></div><div class="line">#### event开始 ####</div><div class="line">events &#123;</div><div class="line">        use epoll; #配置事件驱动模型</div><div class="line">        worker_connections 1024; #配置最大连接数</div><div class="line">&#125;</div><div class="line">#### event结束 ####</div><div class="line">#### http块开始 ####</div><div class="line">http &#123;</div><div class="line">        include mime.types; #定义MIME-TYPE</div><div class="line">        default_type application/octet-stream; </div><div class="line">        sendfile on; #配置允许使用sendfile方式传输</div><div class="line">        keepalive_timeout 65; #配置连接超时</div><div class="line">        log_format access.log #配置请求处理日志的分格</div><div class="line">        &apos;$remote_addr-[$time_local]-&quot;$request&quot;-&quot;$http_user_agent&quot;&apos;</div><div class="line"></div><div class="line">        gzip on; #gzip功能设置</div><div class="line">        gzip_min_length 1024; #响应页数据上限</div><div class="line">        gzip_buffers 4 16k; # 缓存空间大小</div><div class="line">        gzip_comp_level 2; # 压缩级别为2</div><div class="line">        gzip_types text/plain application/x-javascript text/css application/xml; #压缩文件类型</div><div class="line">        gzip_vary on #启用压缩标识</div><div class="line">        gzip_disable &quot;MISIE[1-6]&quot;; #ie1-6不开启压缩功能</div><div class="line">        gunzip_static no #检查预压缩文件</div><div class="line">        gzip_static on;</div><div class="line">        gzup_http_version 1.0;</div><div class="line">#### server块开始 ####</div><div class="line">        server &#123; #配置虚拟主机1</div><div class="line">                listen 8081; </div><div class="line">                server_name myServer1; #监听端口和主机名称</div><div class="line">                access_log /myweb/server1/log/access_log; #配置请求处理日志存放路径</div><div class="line">                error_page 404 /404.html; </div><div class="line">                location /server1/location1 &#123; #配置处理/server1/location1 请求的location</div><div class="line">                        root /myweb;</div><div class="line">                        index index.svr1-local.htm;</div><div class="line">                &#125;</div><div class="line">                location /server2/location2 &#123; #配置处理/server2/location2 请求的location</div><div class="line">                        root /myweb;</div><div class="line">                        index index.svr2-local.htm;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        server &#123; #配置虚拟主机2</div><div class="line">                listen 8082; </div><div class="line">                gzip off; #主机2关闭压缩</div><div class="line">                server_name 192.168.1.3; #监听端口和主机名称</div><div class="line">                access_log /myweb/server2/log/access_log; #配置请求处理日志存放路径</div><div class="line">                error_page 404 /404.html; </div><div class="line">                location /server2/location1 &#123; #配置处理/server2/location1 请求的location</div><div class="line">                        root /myweb;</div><div class="line">                        index index.svr2-local.htm;</div><div class="line">                &#125;</div><div class="line">                location /server2/loc2 &#123; #配置处理/server2/location2 请求的location</div><div class="line">                        root /myweb;</div><div class="line">                        index index.svr2-local.htm;</div><div class="line">                &#125;</div><div class="line">                location = /404.html &#123;</div><div class="line">                        root /myweb/;</div><div class="line">                        index 404.html;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">#### server块结束 ####</div><div class="line">&#125;</div><div class="line">#### http块结束 ####</div></pre></td></tr></table></figure></p><p>通过这个我们认识了nginx配置的基本组成:</p><ul><li>全局块：配置整体允许的配置指令，包括用户组，worker process数，Nginx进程,日志存放路径，配置文件引入</li><li>event块：与用户的网络连接,事件模型的选择，worker process下的网络序列化,是否允许同事接受多个网络连接，每个worker process最大支持连接数</li><li>http块：代理,缓存,日志定义,第三方模块的配置</li><li>server块：虚拟主机</li><li>location块: 基于请求对除虚拟主机之外的字符串进行匹配,包括地址定向，数据缓存，应答控制<a id="more"></a><h2 id="Nginx如何处理请求"><a href="#Nginx如何处理请求" class="headerlink" title="Nginx如何处理请求"></a>Nginx如何处理请求</h2><blockquote><p><em>同步和异步</em>：同步是指发送方发送请求后，需要等待接收到接收方发回的响应后，才接着发送下一个请求；异步是指发送第一个请求后，不等待接收方响应请求，就继续发送下个请求。在同步机制中，发送方和接收方的步调是一致的；异步中，所有请求形成队列，接收方处理完成后通知发送方。<br><em>阻塞和非阻塞</em>：描述进程处理调度方式，在网络通信中，主要指网络套接字Socket的阻塞和非阻塞，Socket的调用方式是调用结果返回之前，当前线程从运行状态被挂起，一直等到调用结果返回之后，才进入就绪状态，获取CPU后继续执行;Socket的非阻塞调用方式，如果调用结果不能返回，当前线程不会挂起，而是立即放回执行下一个调用。</p></blockquote></li></ul><p>Nginx主要使用Master-Worker模式，每个工作进程使用异步非阻塞方式，可以处理多个客户端请求。当某个工作进程接收到客户端的请求后，调用IO进行处理，如果不能立即得到结果，就去处理其他请求，而客户端再次期间也无需等待响应，可以去处理其他事情。当IO调用放回结果，就会通知此工作进程；该进程得到通知，暂时挂起当前处理的事物，去响应客户端请求。</p><h2 id="Nginx的事件驱动模型"><a href="#Nginx的事件驱动模型" class="headerlink" title="Nginx的事件驱动模型"></a>Nginx的事件驱动模型</h2><p>IO调用是如何把自己的状态通知给工作进程的呢？IO调用在完成后能主动通知工作进程主要是使用事件驱动模型。</p><blockquote><p><em>select</em>: 支持linux和windows，首先创建所关注事件的描述符集合（收集读事件的描述符，写事件的描述符，异常事件描述符）,然后调用select函数，轮询事件描述符，检查是否有相应事件发生。使用–with-select_module和–without-select_module是否编译该库。<br><em>poll</em>: 支持linux，是select的优化版本，在一个描述符上设置了读，写，异常事件,轮询时可以同时检查事件是否发生。<br><em>epoll</em>: 支持linux2.6以上，将待处理事件表直接放到内核中，然后给这些描述符设置所关注的事件，把它添加到事件列表中，在具体编码过程中通过相关调用对事件的描述符进行修改和删除。它支持一个进程打开大数目的事件描述符，上限是系统打开文件的最大数目，同时，epoll库的IO效率不随描述符怎家二线性下降，因为只对内核上报的活跃描述符进行操作。</p></blockquote><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程:"></a>主进程:</h3><ul><li>读取Nginx配置文件并验证其有效性和正确性</li><li>建立，绑定和关闭Socket</li><li>按照配置生成管理和结束进程</li><li>接收外界指令，比如重启，升级及退出服务器等指令</li><li>不中断服务，实现平滑重启，升级及退出服务</li><li>开启日志文件，获取文件描述符</li><li>编译和处理Perl脚本<h3 id="工作进程："><a href="#工作进程：" class="headerlink" title="工作进程："></a>工作进程：</h3></li><li>接收客户端请求</li><li>将请求一次送入各个功能模块进行过滤处理</li><li>IO调用，获取响应数据</li><li>与后端服务器通信，接收后端服务器处理结果</li><li>数据缓存，访问索引，查询和调用缓存数据</li><li>发送请求结果，响应客户端请求</li><li>接收主程序指令，比如重启升级和退出<h3 id="缓存索引重建及管理进程"><a href="#缓存索引重建及管理进程" class="headerlink" title="缓存索引重建及管理进程"></a>缓存索引重建及管理进程</h3>缓存索引重建:在Nginx启动一段时间后由主进程生成，在缓存元数据重建完成后退出,根据本地磁盘在内存中建立索引元数据<br>魂村索引管理:存在主进程的整个生命周期，主要在索引数据更新后，判断是否过期<h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="针对ipv4的内核参数配置优化"><a href="#针对ipv4的内核参数配置优化" class="headerlink" title="针对ipv4的内核参数配置优化"></a>针对ipv4的内核参数配置优化</h3>在/etc/sysctl.conf中追加下面的参数,然后使用<em>/sbin/sysctl -p</em>命令使配置生效</li><li>net.core.netdev_max_backlog=262144 #表示当每个接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包的最大数目</li><li>net.core.somaxconn=262144 #TCP连接数，高并发下，可能导致连接超时或重传问题</li><li>net.ipv4.tcp_max_orphans=262144 #允许最多Tcp套接字关联到用户文件句柄上，防止Dos攻击</li><li>net.ipv4.tcp_timestamps=0 # 禁用对时间戳的支持</li><li>net.ipv4.tcp_synack_retries=1 # 放弃tcp连接之前发送一次SYN+ACK包 </li><li>net.ipv4.tcp_syn_retries=1 # 设置放弃连接之前发送SYN包的数量<h3 id="针对CPU的Nginx配置优化"><a href="#针对CPU的Nginx配置优化" class="headerlink" title="针对CPU的Nginx配置优化"></a>针对CPU的Nginx配置优化</h3></li><li>worker_processes 4; #针对cpu核数</li><li>worker_cpu_affinity 0001 0100 1000 0010 #为每个分配分配他的cpu<h3 id="与网络连接相关的配置"><a href="#与网络连接相关的配置" class="headerlink" title="与网络连接相关的配置"></a>与网络连接相关的配置</h3></li><li>keepalive_timeout 60 50 #（1）服务端与客户端保持连接的超时时间 （2）Keep-Alive消息头，客户端连接事件</li><li>send_timeout 10s # 设置Nginx服务器响应客户端的超时事件，某次会话等待客户端响应超过10s，断开连接</li><li>client_header_buffer_size 4k #客户端响应头部的缓冲区大小<h3 id="与事件驱动相关-event模块"><a href="#与事件驱动相关-event模块" class="headerlink" title="与事件驱动相关(event模块)"></a>与事件驱动相关(event模块)</h3>use epoll #事件驱动模型<br>worker_connections 65535 #每个工作进程允许同时连接客户端的最大数量，Client=worker_processes * worker_connections /2<br>worker_rlimit_sigpending 1024 #Linux事件信号队列长度上限<h4 id="poll事件驱动"><a href="#poll事件驱动" class="headerlink" title="poll事件驱动"></a>poll事件驱动</h4>devpoll_change 32 #传递给内核的事件数<br>devpoll_events 32 #从内核获取事件数量<h4 id="kqueue事件驱动"><a href="#kqueue事件驱动" class="headerlink" title="kqueue事件驱动"></a>kqueue事件驱动</h4>kqueue_changes 512 #传递给内核的事件数<br>kqueue_events 512 #从内核获取事件数量<h4 id="epoll-events驱动"><a href="#epoll-events驱动" class="headerlink" title="epoll_events驱动"></a>epoll_events驱动</h4>epoll_changes 512 #发送和收到内核的事件数<h4 id="rtsig"><a href="#rtsig" class="headerlink" title="rtsig"></a>rtsig</h4>rtsig_signo signo<br>###Gzip压缩(http模块)<h4 id="ngx-http-gip-module模块-适用于大文件下载"><a href="#ngx-http-gip-module模块-适用于大文件下载" class="headerlink" title="ngx_http_gip_module模块(适用于大文件下载)"></a>ngx_http_gip_module模块(适用于大文件下载)</h4>gzip on #开启压缩功能<br>gzip_buffers 32 4k | 16 8k #number*size存储压缩空间<br>gzip_comp_level 1 #压缩基本，1-9 1:压缩程度低，压缩效率高 9：压缩程度最高，压缩效率最低<br>gzip_disable MSIE [4-6]. #ie4-6不进行gzip压缩<br>gzip_http_version 1.0|1.1; # 开启Gzip功能的最低http协议版本<br>gzip_min_length 1024 #开启页面压缩的最小值,页面大于这个值才开启压缩<br>gzip_proxied on #开启对后端服务器返回结构的Gzip压缩<br>gzip_proxied expired #当后端服务器响应页头部包含只是响应数据过期时间的expired头域时，开启对响应数据的压缩<br>gzip_proxied no-cache #当后端服务器响应页头部包含只是响应数据过期时间的expired头域时，开启对响应数据的压缩<br>gzip_proxied no-store #当后端服务器响应页头部Cache-Control的指令为no-store时，开启对响应数据的Gzip压缩<br>gzip_proxied private #当后端服务器响应页头部Cache-Control的指令为private时，开启对响应数据的Gzip压缩<br>gzip_proxied no_last_modified #当后端服务器响应页头部不包含Last-Modified时，开启对响应数据的压缩<br>gzip_proxied no_etag #当后端服务器响应页头部不包含ETag时，开启对响应数据的压缩<br>gzip_proxied auth #当后端服务器响应页头部用于标示HTTP授权证书时，开启对响应数据的压缩<br>gzip_proxied any #无条件开启对响应数据的压缩<br>gzip_types text/plain application/x-javascript text/css text/html application/xml #根据响应页的MIME-TYPE选择性地开启Gzip压缩功能<br>gzip_vary on #经过压缩处理的响应会在头部添加”Vary:Accept-Encoding:gizp”也可用add_header Vary Accept-Encoding gzip<h4 id="ngx-http-gzip-static-module模块-可确定数据长度"><a href="#ngx-http-gzip-static-module模块-可确定数据长度" class="headerlink" title="ngx_http_gzip_static_module模块(可确定数据长度)"></a>ngx_http_gzip_static_module模块(可确定数据长度)</h4>编译添加–with-http_gzip_static_module<br>gzip_static on | off | aways; #开启 | 关闭 | 不检查客户端是否支持压缩,直接发送压缩文件<br>gzip_proxied no-cache no-store private auth;<h4 id="ngx-http-gunzip-module模块-不支持解压的浏览器，对数据进行解压"><a href="#ngx-http-gunzip-module模块-不支持解压的浏览器，对数据进行解压" class="headerlink" title="ngx_http_gunzip_module模块(不支持解压的浏览器，对数据进行解压)"></a>ngx_http_gunzip_module模块(不支持解压的浏览器，对数据进行解压)</h4>编译添加–with-http_gunzip_module<br>gunzip_static on<br>gunzip_buffers 32 4k | 16 8k</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于刚看完nginx高性能web服务器详解，就想结合自己工作的经历，对nginx的优化配置做一个系统的总结，这篇是初级篇，是单机的nginx优化配置&lt;br&gt;首先我们看一份较简单的nginx.conf配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#### 全局块开始 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;user nobody nobody; #配置允许Nginx服务器的用户和用户组&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;worker_processes 3; #配置Nginx进程生成的worker_processes数目&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;error_log logs/error_log; #配置Nginx服务器允许对错误日志存放路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pid nginx.pid; #配置Nginx服务允许时的错误日志存放路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### 全局块结束 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### event开始 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;events &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        use epoll; #配置事件驱动模型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        worker_connections 1024; #配置最大连接数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### event结束 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### http块开始 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        include mime.types; #定义MIME-TYPE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        default_type application/octet-stream; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sendfile on; #配置允许使用sendfile方式传输&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        keepalive_timeout 65; #配置连接超时&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        log_format access.log #配置请求处理日志的分格&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;$remote_addr-[$time_local]-&amp;quot;$request&amp;quot;-&amp;quot;$http_user_agent&amp;quot;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip on; #gzip功能设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_min_length 1024; #响应页数据上限&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_buffers 4 16k; # 缓存空间大小&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_comp_level 2; # 压缩级别为2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_types text/plain application/x-javascript text/css application/xml; #压缩文件类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_vary on #启用压缩标识&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_disable &amp;quot;MISIE[1-6]&amp;quot;; #ie1-6不开启压缩功能&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gunzip_static no #检查预压缩文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzip_static on;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gzup_http_version 1.0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### server块开始 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        server &amp;#123; #配置虚拟主机1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                listen 8081; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server_name myServer1; #监听端口和主机名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                access_log /myweb/server1/log/access_log; #配置请求处理日志存放路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                error_page 404 /404.html; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location /server1/location1 &amp;#123; #配置处理/server1/location1 请求的location&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        root /myweb;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        index index.svr1-local.htm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location /server2/location2 &amp;#123; #配置处理/server2/location2 请求的location&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        root /myweb;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        server &amp;#123; #配置虚拟主机2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                listen 8082; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                gzip off; #主机2关闭压缩&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                server_name 192.168.1.3; #监听端口和主机名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                access_log /myweb/server2/log/access_log; #配置请求处理日志存放路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                error_page 404 /404.html; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location /server2/location1 &amp;#123; #配置处理/server2/location1 请求的location&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        root /myweb;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location /server2/loc2 &amp;#123; #配置处理/server2/location2 请求的location&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        root /myweb;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                location = /404.html &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        root /myweb/;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        index 404.html;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### server块结束 ####&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#### http块结束 ####&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过这个我们认识了nginx配置的基本组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局块：配置整体允许的配置指令，包括用户组，worker process数，Nginx进程,日志存放路径，配置文件引入&lt;/li&gt;
&lt;li&gt;event块：与用户的网络连接,事件模型的选择，worker process下的网络序列化,是否允许同事接受多个网络连接，每个worker process最大支持连接数&lt;/li&gt;
&lt;li&gt;http块：代理,缓存,日志定义,第三方模块的配置&lt;/li&gt;
&lt;li&gt;server块：虚拟主机&lt;/li&gt;
&lt;li&gt;location块: 基于请求对除虚拟主机之外的字符串进行匹配,包括地址定向，数据缓存，应答控制
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>swoole利用websocket进行wss访问</title>
    <link href="http://graychen.git.io/2018/01/03/websocket%E7%BB%93%E5%90%88swoole%E8%BF%9B%E8%A1%8Cwss%E8%AE%BF%E9%97%AE/"/>
    <id>http://graychen.git.io/2018/01/03/websocket结合swoole进行wss访问/</id>
    <published>2018-01-03T13:32:26.000Z</published>
    <updated>2018-05-27T09:59:36.033Z</updated>
    
    <content type="html"><![CDATA[<p>最近利用swoole的websocket对扫码登录进行重构，原本是利用长轮循监听用户的的扫码，但对服务器的资源消耗太大，所以改用websocket节省带宽和服务器资源。</p><blockquote><p><strong>websocket</strong>: 一种在单个 TCP 连接上进行全双工通讯的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></blockquote><h2 id="在docker中搭建swoole的环境"><a href="#在docker中搭建swoole的环境" class="headerlink" title="在docker中搭建swoole的环境"></a>在docker中搭建swoole的环境</h2><ul><li><p>先建立build_swoole.sh这样的安装shell文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">apk add git autoconf build-base linux-headers libaio-dev pcre-dev openssl-dev icu-dev</div><div class="line">ln -s /usr/bin/php-config7 /usr/bin/php-config</div><div class="line">ln -s /usr/bin/phpize7 /usr/bin/phpize</div><div class="line">cd /root/</div><div class="line">git clone https://github.com/swoole/swoole-src.git</div><div class="line">cd /root/swoole-src</div><div class="line">phpize</div><div class="line">./configure --enable-openssl</div><div class="line">make &amp;&amp; make install</div><div class="line">apk del libaio-dev php-dev git autoconf build-base linux-headers pcre-dev</div><div class="line">apk del --no-cache php-dev</div><div class="line">apk del --no-cache git</div><div class="line">apk del --no-cache build-base</div><div class="line">apk del --no-cache make</div><div class="line">apk del --no-cache openssl-dev</div><div class="line">apk del --no-cache linux-headers</div><div class="line">apk del --no-cache libaio-dev</div><div class="line">apk del --no-cache pcre-dev</div><div class="line">apk del --no-cache autoconf</div><div class="line">apk del --no-cache .persistent-deps</div><div class="line">apk del --no-cache libmcrypt-dev</div><div class="line">apk del --no-cache g++</div><div class="line"># apk del --no-cache icu-dev</div><div class="line">apk info</div><div class="line">php -m</div><div class="line">rm -rf /var/cache/apk/*</div><div class="line">rm -rf /root/swoole-src/</div><div class="line">rm -rf /tmp/*</div></pre></td></tr></table></figure></li><li><p>然后在Dockerfile中使用我们的安装脚本,编译安装成功后，修改php.ini加入<code>extension=swoole.so</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FROM zacksleo/php:7.1-alpine-fpm-supervisor</div><div class="line">COPY build_swoole.sh /root</div><div class="line">RUN sh /root/build_swoole.sh</div></pre></td></tr></table></figure></li><li><p>接着<code>docker-composer build 创建对应的docker镜像</code>，并且运行<code>docker-composer up</code>，在进入对应的docker容器中<code>docker exec 你的镜像名</code>,执行命令<code>php -m</code>,如果出现swoole，那我们的swoole扩展就安装好了</p><a id="more"></a><h2 id="创建服务器的swoole的监听"><a href="#创建服务器的swoole的监听" class="headerlink" title="创建服务器的swoole的监听"></a>创建服务器的swoole的监听</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">models</span>\<span class="title">QrcodeToken</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">models</span>\<span class="title">User</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Swoole</span>\<span class="title">WebSocket</span>\<span class="title">Server</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Class PremiumController</div><div class="line"> * <span class="doctag">@package</span> console\controllers</div><div class="line"> * <span class="doctag">@auth</span> graychen &lt;455803034<span class="doctag">@qq</span>.com&gt;</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocketController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $server;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * websocket 监听扫码登录</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionListenLogin</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $setConfig = <span class="keyword">array</span>(</div><div class="line">            <span class="string">'ssl_key_file'</span> =&gt; <span class="string">'/var/www/html/services/nginx/ssl-cert/ssl.key'</span>,</div><div class="line">            <span class="string">'ssl_cert_file'</span> =&gt; <span class="string">'/var/www/html/services/nginx/ssl-cert/ssl.crt'</span></div><div class="line">        );</div><div class="line">        <span class="keyword">$this</span>-&gt;server = <span class="keyword">new</span> Server(<span class="string">'0.0.0.0'</span>, <span class="number">9502</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP | SWOOLE_SSL);</div><div class="line">        <span class="keyword">$this</span>-&gt;server-&gt;set($setConfig);</div><div class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $request)</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"server: handshake success with fd&#123;$request-&gt;fd&#125;\n"</span>;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $frame)</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"receive from &#123;$frame-&gt;fd&#125;:&#123;$frame-&gt;data&#125;,opcode:&#123;$frame-&gt;opcode&#125;,fin:&#123;$frame-&gt;finish&#125;\n"</span>;</div><div class="line">            $message = json_decode($frame-&gt;data);</div><div class="line">            $timestamp = $message-&gt;timestamp;</div><div class="line">            $token = $message-&gt;token;</div><div class="line">            swoole_timer_tick(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> <span class="params">($timerId)</span> <span class="title">use</span> <span class="params">($token, $server, $frame)</span> </span>&#123;</div><div class="line">                $token = <span class="keyword">$this</span>-&gt;findModel($token);</div><div class="line">                <span class="keyword">if</span> ($token === <span class="keyword">null</span> || $token-&gt;status == QrcodeToken::STATUS_EXPIRED) &#123;</div><div class="line">                    $response = json_encode([</div><div class="line">                        <span class="string">'timestamp'</span> =&gt; time(),</div><div class="line">                        <span class="string">'status'</span> =&gt; QrcodeToken::STATUS_EXPIRED</div><div class="line">                    ]);</div><div class="line">                    $server-&gt;push($frame-&gt;fd, $response);</div><div class="line">                    swoole_timer_clear($timerId);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> ($server-&gt;exist($frame-&gt;fd) &amp;&amp; in_array($token-&gt;status, [QrcodeToken::STATUS_SCANNED, QrcodeToken::STATUS_LOGGED_IN])) &#123;</div><div class="line">                        $response = json_encode([</div><div class="line">                            <span class="string">'timestamp'</span> =&gt; $token-&gt;updated_at,</div><div class="line">                            <span class="string">'status'</span> =&gt; $token-&gt;status</div><div class="line">                        ]);</div><div class="line">                        $server-&gt;push($frame-&gt;fd, $response);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $fd)</span> </span>&#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">"client &#123;$fd&#125; closed\n"</span>;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">$this</span>-&gt;server-&gt;start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findModel</span><span class="params">($id)</span></span></div><div class="line">    &#123;</div><div class="line">        clearstatcache();</div><div class="line">        $token = QrcodeToken::findOne([<span class="string">'id'</span> =&gt; $id]);</div><div class="line">        <span class="keyword">return</span> $token;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>如果你的网站本身是https，那必须要用wss，就是在原来的ws连接的基础上加入对应的ssl连接证书,注意如果你是在本地连接的话，因为证书需要对应的域名，可以通过修改linux环境下的hosts文件，将127.0.0.1的对应域名改成你证书的域名即可。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">var error = false;</div><div class="line">    var timestamp = &#123;$timestamp&#125;;</div><div class="line">    var _t = '&#123;$token&#125;';</div><div class="line">    function startWebSocket()&#123;</div><div class="line">        var host=document.domain;</div><div class="line">        websocket = new WebSocket('wss://' + host + ':9502');</div><div class="line">        websocket.onopen = function (evt) &#123;</div><div class="line">            var message=&#123;</div><div class="line">                timestamp:timestamp,</div><div class="line">                token:_t</div><div class="line">            &#125;;</div><div class="line">            if(message!==null)&#123;</div><div class="line">                websocket.send(JSON.stringify(message));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        websocket.onclose = function (evt) &#123;</div><div class="line">            console.log(\"关闭连接\");</div><div class="line">        &#125;;</div><div class="line">        websocket.onmessage = function (evt) &#123;</div><div class="line">            var response=JSON.parse(evt.data);</div><div class="line">            if(response.status==1)&#123;                  </div><div class="line">              $('#fn-tips').text('已扫码, 请点击确认');</div><div class="line">              timestamp = response.timestamp;</div><div class="line">            &#125;</div><div class="line">            if(response.status==2)&#123;</div><div class="line">              $('#fn-tips').text('已登录, 正在跳转···');</div><div class="line">              setTimeout(function()&#123;</div><div class="line">                $('#ff-qrcode-token').submit();                    </div><div class="line">              &#125;,500);                  </div><div class="line">            &#125;</div><div class="line">            if(response.status==-2)&#123;</div><div class="line">              alert('二维码已失效, 请刷新页面');</div><div class="line">            &#125;</div><div class="line">            error = false;</div><div class="line">            timestamp = response.timestamp;                </div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        websocket.onerror = function (evt, e) &#123;</div><div class="line">            console.log('错误代码: ' + evt.data);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近利用swoole的websocket对扫码登录进行重构，原本是利用长轮循监听用户的的扫码，但对服务器的资源消耗太大，所以改用websocket节省带宽和服务器资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;websocket&lt;/strong&gt;: 一种在单个 TCP 连接上进行全双工通讯的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在docker中搭建swoole的环境&quot;&gt;&lt;a href=&quot;#在docker中搭建swoole的环境&quot; class=&quot;headerlink&quot; title=&quot;在docker中搭建swoole的环境&quot;&gt;&lt;/a&gt;在docker中搭建swoole的环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先建立build_swoole.sh这样的安装shell文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apk add git autoconf build-base linux-headers libaio-dev pcre-dev openssl-dev icu-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ln -s /usr/bin/php-config7 /usr/bin/php-config&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ln -s /usr/bin/phpize7 /usr/bin/phpize&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /root/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/swoole/swoole-src.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /root/swoole-src&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;phpize&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;./configure --enable-openssl&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del libaio-dev php-dev git autoconf build-base linux-headers pcre-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache php-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache build-base&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache make&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache openssl-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache linux-headers&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache libaio-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache pcre-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache autoconf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache .persistent-deps&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache libmcrypt-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk del --no-cache g++&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# apk del --no-cache icu-dev&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apk info&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;php -m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf /var/cache/apk/*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf /root/swoole-src/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rm -rf /tmp/*&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在Dockerfile中使用我们的安装脚本,编译安装成功后，修改php.ini加入&lt;code&gt;extension=swoole.so&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;FROM zacksleo/php:7.1-alpine-fpm-supervisor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;COPY build_swoole.sh /root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RUN sh /root/build_swoole.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着&lt;code&gt;docker-composer build 创建对应的docker镜像&lt;/code&gt;，并且运行&lt;code&gt;docker-composer up&lt;/code&gt;，在进入对应的docker容器中&lt;code&gt;docker exec 你的镜像名&lt;/code&gt;,执行命令&lt;code&gt;php -m&lt;/code&gt;,如果出现swoole，那我们的swoole扩展就安装好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://graychen.git.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用Prometheus+Grafana监控</title>
    <link href="http://graychen.git.io/2017/12/10/%E4%BD%BF%E7%94%A8Prometheus-Grafana%E7%9B%91%E6%8E%A7/"/>
    <id>http://graychen.git.io/2017/12/10/使用Prometheus-Grafana监控/</id>
    <published>2017-12-10T10:09:37.000Z</published>
    <updated>2018-05-27T09:59:36.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。<br>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。<br>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p><p>输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：<a href="https://github.com/prometheus。" target="_blank" rel="noopener">https://github.com/prometheus。</a></p><p>与其他监控系统相比，Prometheus的主要特点是：</p><ul><li>一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。</li><li>非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li><li>一种灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点。</li><li>时间集合通过HTTP上的PULL模型进行。</li><li>通过中间网关支持推送时间。</li><li>通过服务发现或静态配置发现目标。</li><li>多种模式的图形和仪表板支持。</li></ul><h2 id="Prometheus架构概览"><a href="#Prometheus架构概览" class="headerlink" title="Prometheus架构概览"></a>Prometheus架构概览</h2><p>该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：<br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4pg7j25ej30l60dw40p.jpg" alt="Prometheus架构概览"><br>它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。</p><ul><li><p>Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。</p></li><li><p>Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</p></li><li><p>PushGateway：这个组件是支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p></li></ul><h2 id="Prometheus的数据模型"><a href="#Prometheus的数据模型" class="headerlink" title="Prometheus的数据模型"></a>Prometheus的数据模型</h2><p>Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。<br>metrics name&amp;label指标名称和标签</p><p>每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。</p><h3 id="指标名称："><a href="#指标名称：" class="headerlink" title="指标名称："></a>指标名称：</h3><p>一般是给监测对像起一名字，例如http_requests<em>total这样，它有一些命名规则，可以包字母数字</em>之类的的。通常是以应用名称开头<em>监测对像</em>数值类型_单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。</p><h3 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h3><p>就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。</p><p>记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。</p><p>查询语句就可以跟据上面标签的组合来查询聚合结果了。</p><p>如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。</p><a id="more"></a><h2 id="Prometheus四种数据类型"><a href="#Prometheus四种数据类型" class="headerlink" title="Prometheus四种数据类型"></a>Prometheus四种数据类型</h2><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>Counter用于累计值，例如记录请求次数、任务完成数、错误发生次数。一直增加，不会减少。重启进程后，会被重置。</p><p>例如：http_response_total{method=”GET”,endpoint=”/api/tracks”} 100，10秒后抓取http_response_total{method=”GET”,endpoint=”/api/tracks”} 100。</p><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p>Gauge常规数值，例如 温度变化、内存使用变化。可变大，可变小。重启进程后，会被重置。</p><p>例如： memory_usage_bytes{host=”master-01″} 100 &lt; 抓取值、memory_usage_bytes{host=”master-01″} 30、memory_usage_bytes{host=”master-01″} 50、memory_usage_bytes{host=”master-01″} 80 &lt; 抓取值。</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram（直方图）可以理解为柱状图的意思，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。它特别之处是可以对记录的内容进行分组，提供count和sum全部值的功能。</p><p>例如：{小于10=5次，小于20=1次，小于30=2次}，count=7次，sum=7次的求和值。</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Summary和Histogram十分相似，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。同样提供 count 和 sum 全部值的功能。</p><p>例如：count=7次，sum=7次的值求值。</p><p>它提供一个quantiles的功能，可以按%比划分跟踪的结果。例如：quantile取值0.95，表示取采样值里面的95%数据。</p><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><p>###下面的例子以这个项目为例(promethes项目)[<a href="https://mops-gitlab.lianluo.com/chenjiahui/Prometheus/tree/master" target="_blank" rel="noopener">https://mops-gitlab.lianluo.com/chenjiahui/Prometheus/tree/master</a>]</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># docker-compose.yml</span></div><div class="line"><span class="attr">version:</span> <span class="string">'2.0'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  prometheus:</span> </div><div class="line"><span class="attr">    image:</span> prom/prometheus:v1<span class="number">.0</span><span class="number">.1</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">        -</span> ./prometheus.yml:/etc/prometheus/prometheus.yml</div><div class="line"><span class="attr">        - prometheus_data:</span>/prometheus</div><div class="line"><span class="bullet">        -</span> ./alert.rules:/etc/prometheus/alert.rules</div><div class="line"><span class="attr">    command:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">'-config.file=/etc/prometheus/prometheus.yml'</span></div><div class="line"><span class="bullet">        -</span> <span class="string">'-alertmanager.url=http://alertmanager:9093'</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">'9090:9090'</span></div><div class="line"></div><div class="line"><span class="attr">  grafana:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">"grafana/grafana:3.1.1"</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">        -</span> GF_SECURITY_ADMIN_PASSWORD=pass</div><div class="line"><span class="attr">    depends_on:</span></div><div class="line"><span class="bullet">        -</span> prometheus</div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="attr">        - grafana_data:</span>/var/lib/grafana</div><div class="line"><span class="bullet">        -</span> ./alert.rules:/etc/prometheus/alert.rules</div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">"3000:3000"</span></div><div class="line"></div><div class="line"><span class="attr">  alertmanager:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">"prom/alertmanager:v0.8.0"</span></div><div class="line"><span class="attr">    volumes:</span></div><div class="line"><span class="bullet">        -</span> ./alertmanager.yml:/alertmanager.yml</div><div class="line"><span class="attr">    command:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">'-config.file=/alertmanager.yml'</span></div><div class="line">    </div><div class="line"><span class="attr">volumes:</span></div><div class="line"><span class="attr">  prometheus_data:</span> &#123;&#125;</div><div class="line"><span class="attr">  grafana_data:</span> &#123;&#125;</div></pre></td></tr></table></figure><p>Prometheus内置了一个web界面，我们可通过<a href="http://monitor_host:9090进行访问：" target="_blank" rel="noopener">http://monitor_host:9090进行访问：</a><br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4tb10am7j30mh093jsh.jpg" alt=""><br>但是自带的图形工具过于简陋，grafana是他的替代品，您可以通过http：// localhost：3000 / login访问Grafana,<br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4tbxey4xj30mo08k3zm.jpg" alt=""></p><p>在状态页面的“配置”下方，您会看到一个“目标”部分，其中列出了“prometheus”端点。<br>这相当于scrape_configs相同的设置，job_name 并且是普罗米修斯提供的指标的来源。换句话说，普罗米修斯服务器带有一个度量端点<br>或者上面所说的出口商，它报告普罗米修斯服务器本身的统计数据。</p><h3 id="cAdvisor-容器数据采集"><a href="#cAdvisor-容器数据采集" class="headerlink" title="cAdvisor 容器数据采集"></a>cAdvisor 容器数据采集</h3><p>因为promethus是通过主动去指定的地址拉取数据，所以要监听的项目需要配置导出器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">cadvisor:</div><div class="line"> image: google/cadvisor</div><div class="line"> volumes:</div><div class="line">   - /:/rootfs:ro</div><div class="line">   - /var/run:/var/run:rw</div><div class="line">   - /sys:/sys:ro</div><div class="line">   - /var/lib/docker/:/var/lib/docker:ro</div><div class="line"> ports:</div><div class="line">     - &quot;8080:8080&quot;</div><div class="line"> expose:</div><div class="line">     - &quot;8080&quot;</div></pre></td></tr></table></figure><h3 id="prometheus-yaml-配置监听数据地址"><a href="#prometheus-yaml-配置监听数据地址" class="headerlink" title="prometheus.yaml 配置监听数据地址"></a>prometheus.yaml 配置监听数据地址</h3><p>prometheus通过在这些目标上抓取指标HTTP端点来从监控目标收集指标,监听的就是数据导出器的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># my global config</div><div class="line">global:</div><div class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</div><div class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</div><div class="line">  # scrape_timeout is set to the global default (10s).</div><div class="line"></div><div class="line">  # Attach these labels to any time series or alerts when communicating with</div><div class="line">  # external systems (federation, remote storage, Alertmanager).</div><div class="line">  external_labels:</div><div class="line">      monitor: &apos;codelab-monitor&apos;</div><div class="line"></div><div class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</div><div class="line">rule_files:</div><div class="line">    - &apos;alert.rules&apos;</div><div class="line"></div><div class="line"># A scrape configuration containing exactly one endpoint to scrape:</div><div class="line"># Here it&apos;s Prometheus itself.</div><div class="line">scrape_configs:</div><div class="line">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</div><div class="line">  - job_name: &apos;prometheus&apos;</div><div class="line">    #scrape_interval: 5s</div><div class="line">    # metrics_path defaults to &apos;/metrics&apos;</div><div class="line">    # scheme defaults to &apos;http&apos;.</div><div class="line"></div><div class="line">    static_configs:</div><div class="line">      - targets: [&apos;192.168.1.162:9090&apos;]</div><div class="line">        labels:</div><div class="line">          instance: prometheus</div><div class="line"></div><div class="line">  - job_name: &apos;docker-online&apos;</div><div class="line">    #scrape_interval: 5s</div><div class="line">    #scheme: http</div><div class="line">    static_configs:</div><div class="line">      - targets: [&apos;192.168.1.162:8080&apos;]</div><div class="line">        labels:</div><div class="line">         group: &apos;port&apos;</div></pre></td></tr></table></figure><h3 id="Alertmanager报警组件"><a href="#Alertmanager报警组件" class="headerlink" title="Alertmanager报警组件"></a>Alertmanager报警组件</h3><p>Alertmanager通过命令行flag和一个配置文件进行配置。命令行flag配置不变的系统参数、配置文件定义的禁止规则、通知路由和通知接收器。<br>要查看所有可用的命令行flag，运行alertmanager -h。<br>Alertmanager在运行时加载配置，如果不能很好的形成新的配置，更改将不会被应用，并记录错误。<br>配置文件<br>要指定加载的配置文件，需要使用-config.file标志。该文件使用YAML来完成，通过下面的描述来定义。括号内的参数是可选的，对于非列表的参数的值设置为指定的缺省值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">global:</div><div class="line">  # ResolveTimeout is the time after which an alert is declared resolved</div><div class="line">  # if it has not been updated.</div><div class="line">  [ resolve_timeout: &lt;duration&gt; | default = 5m ]</div><div class="line"></div><div class="line">  # The default SMTP From header field.</div><div class="line">  [ smtp_from: &lt;tmpl_string&gt; ]</div><div class="line">  # The default SMTP smarthost used for sending emails.</div><div class="line">  [ smtp_smarthost: &lt;string&gt; ]</div><div class="line"></div><div class="line">  # The API URL to use for Slack notifications.</div><div class="line">  [ slack_api_url: &lt;string&gt; ]</div><div class="line"></div><div class="line">  [ pagerduty_url: &lt;string&gt; | default = &quot;https://events.pagerduty.com/generic/2010-04-15/create_event.json&quot; ]</div><div class="line">  [ opsgenie_api_host: &lt;string&gt; | default = &quot;https://api.opsgenie.com/&quot; ]</div><div class="line"></div><div class="line"># Files from which custom notification template definitions are read.</div><div class="line"># The last component may use a wildcard matcher, e.g. &apos;templates/*.tmpl&apos;.</div><div class="line">templates:</div><div class="line">  [ - &lt;filepath&gt; ... ]</div><div class="line"></div><div class="line"># The root node of the routing tree.</div><div class="line">route: &lt;route&gt;</div><div class="line"></div><div class="line"># A list of notification receivers.</div><div class="line">receivers:</div><div class="line">  - &lt;receiver&gt; ...</div><div class="line"></div><div class="line"># A list of inhibition rules.</div><div class="line">inhibit_rules:</div><div class="line">  [ - &lt;inhibit_rule&gt; ... ]</div></pre></td></tr></table></figure></p><p>路由 route<br>路由块定义了路由树及其子节点。如果没有设置的话，子节点的可选配置参数从其父节点继承。<br>每个警报进入配置的路由树的顶级路径，顶级路径必须匹配所有警报（即没有任何形式的匹配）。然后匹配子节点。如果continue的值设置为false，它在匹配第一个孩子后就停止；如果在子节点匹配，continue的值为true，警报将继续进行后续兄弟姐妹的匹配。如果警报不匹配任何节点的任何子节点（没有匹配的子节点，或不存在），该警报基于当前节点的配置处理。<br>路由配置格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">[ receiver: &lt;string&gt; ]</div><div class="line">[ group_by: &apos;[&apos; &lt;labelname&gt;, ... &apos;]&apos; ]</div><div class="line"></div><div class="line"># Whether an alert should continue matching subsequent sibling nodes.</div><div class="line">[ continue: &lt;boolean&gt; | default = false ]</div><div class="line"></div><div class="line"># A set of equality matchers an alert has to fulfill to match the node.</div><div class="line">match:</div><div class="line">  [ &lt;labelname&gt;: &lt;labelvalue&gt;, ... ]</div><div class="line"></div><div class="line"># A set of regex-matchers an alert has to fulfill to match the node.</div><div class="line">match_re:</div><div class="line">  [ &lt;labelname&gt;: &lt;regex&gt;, ... ]</div><div class="line"></div><div class="line"># How long to initially wait to send a notification for a group</div><div class="line"># of alerts. Allows to wait for an inhibiting alert to arrive or collect</div><div class="line"># more initial alerts for the same group. (Usually ~0s to few minutes.)</div><div class="line">[ group_wait: &lt;duration&gt; ]</div><div class="line"></div><div class="line"># How long to wait before sending notification about new alerts that are</div><div class="line"># in are added to a group of alerts for which an initial notification</div><div class="line"># has already been sent. (Usually ~5min or more.)</div><div class="line">[ group_interval: &lt;duration&gt; ]</div><div class="line"></div><div class="line"># How long to wait before sending a notification again if it has already</div><div class="line"># been sent successfully for an alert. (Usually ~3h or more).</div><div class="line">[ repeat_interval: &lt;duration&gt; ]</div><div class="line"></div><div class="line"># Zero or more child routes.</div><div class="line">routes:</div><div class="line">  [ - &lt;route&gt; ... ]</div></pre></td></tr></table></figure><p>在alertmanager这个配置文件配置任何警报报警alertmanager.yml，这看起来如下,这个例子是用slack(一款聊天工具),也可以用邮件,短信等其它方式报警：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">route:</span></div><div class="line"><span class="attr">    receiver:</span> <span class="string">'slack'</span></div><div class="line"><span class="attr">receivers:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">'slack'</span></div><div class="line"><span class="attr">      slack_configs:</span></div><div class="line"><span class="attr">          - send_resolved:</span> <span class="literal">true</span></div><div class="line"><span class="attr">            username:</span> <span class="string">'Prometheus'</span></div><div class="line"><span class="attr">            channel:</span> <span class="string">'#random'</span></div><div class="line"><span class="attr">            api_url:</span> <span class="string">'https://hooks.slack.com/services/&lt;your&gt;/&lt;stuff&gt;/&lt;here&gt;'</span></div></pre></td></tr></table></figure><h3 id="报警规则"><a href="#报警规则" class="headerlink" title="报警规则"></a>报警规则</h3><p>报警规则允许你定义基于Prometheus语言表达的报警条件，并发送报警通知到外部服务。<br>报警规则通过以下格式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ALERT &lt;alert name&gt;</div><div class="line">  IF &lt;expression&gt;</div><div class="line">  [ FOR &lt;duration&gt; ]</div><div class="line">  [ LABELS &lt;label set&gt; ]</div><div class="line">  [ ANNOTATIONS &lt;label set&gt; ]</div></pre></td></tr></table></figure><p>FOR子句使得Prometheus等待第一个传进来的向量元素（例如高HTTP错误的实例），并计数一个警报。如果元素是active，但是没有firing的，就处于pending状态。<br>LABELS（标签）子句允许指定一组附加的标签附到警报上。现有的任何标签都会被覆盖，标签值可以被模板化。<br>ANNOTATIONS（注释）子句指定另一组未查明警报实例的标签，它们被用于存储更长的其他信息，例如警报描述或者链接，注释值可以被模板化。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># alert.rules</div><div class="line">ALERT service_down</div><div class="line">  IF up == 0</div><div class="line">ALERT high_load</div><div class="line">  IF node_load1 &gt; 0.5</div><div class="line">  ANNOTATIONS &#123;</div><div class="line">      summary = &quot;Instance &#123;&#123; $labels.instance &#125;&#125; under high load&quot;,</div><div class="line">      description = &quot;&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; is under highload.&quot;,</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://prometheus.io" target="_blank" rel="noopener">prometheus</a></li><li><a href="http://grafana.org" target="_blank" rel="noopener">grafana</a></li><li><a href="https://sagittariusyx.github.io/2016/03/07/prometheus-alertmanager/index.html" target="_blank" rel="noopener">Prometheus监控 - Alertmanager报警模块</a></li><li><a href="https://www.ctl.io/developers/blog/post/monitoring-docker-services-with-prometheus/" target="_blank" rel="noopener">Monitoring Docker Services with Prometheus - CenturyLink Cloud Developer Center</a></li><li><a href="http://www.ywnds.com/?p=9656" target="_blank" rel="noopener">使用Prometheus+Grafana监控MySQL实践 – 运维那点事</a></li><li><a href="http://blog.frognew.com/2017/02/use-prometheus-on-centos7.html" target="_blank" rel="noopener">使用Prometheus监控服务器</a></li><li><a href="http://yunlzheng.github.io/2017/07/04/prometheus-kubernates/" target="_blank" rel="noopener">Prometheus在Kubernetes下的监控实践</a></li><li><a href="https://finestructure.co/blog/2016/5/16/monitoring-with-prometheus-grafana-docker-part-1" target="_blank" rel="noopener">通过Prometheus，Grafana和Docker进行监控</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Prometheus（普罗米修斯）是一套开源的监控&amp;amp;报警&amp;amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。&lt;br&gt;Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。&lt;br&gt;Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。&lt;/p&gt;
&lt;p&gt;输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：&lt;a href=&quot;https://github.com/prometheus。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/prometheus。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;与其他监控系统相比，Prometheus的主要特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。&lt;/li&gt;
&lt;li&gt;非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。&lt;/li&gt;
&lt;li&gt;一种灵活的查询语言。&lt;/li&gt;
&lt;li&gt;不依赖分布式存储，单个服务器节点。&lt;/li&gt;
&lt;li&gt;时间集合通过HTTP上的PULL模型进行。&lt;/li&gt;
&lt;li&gt;通过中间网关支持推送时间。&lt;/li&gt;
&lt;li&gt;通过服务发现或静态配置发现目标。&lt;/li&gt;
&lt;li&gt;多种模式的图形和仪表板支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prometheus架构概览&quot;&gt;&lt;a href=&quot;#Prometheus架构概览&quot; class=&quot;headerlink&quot; title=&quot;Prometheus架构概览&quot;&gt;&lt;/a&gt;Prometheus架构概览&lt;/h2&gt;&lt;p&gt;该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/0060OHG5gy1fm4pg7j25ej30l60dw40p.jpg&quot; alt=&quot;Prometheus架构概览&quot;&gt;&lt;br&gt;它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PushGateway：这个组件是支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prometheus的数据模型&quot;&gt;&lt;a href=&quot;#Prometheus的数据模型&quot; class=&quot;headerlink&quot; title=&quot;Prometheus的数据模型&quot;&gt;&lt;/a&gt;Prometheus的数据模型&lt;/h2&gt;&lt;p&gt;Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。&lt;br&gt;metrics name&amp;amp;label指标名称和标签&lt;/p&gt;
&lt;p&gt;每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。&lt;/p&gt;
&lt;h3 id=&quot;指标名称：&quot;&gt;&lt;a href=&quot;#指标名称：&quot; class=&quot;headerlink&quot; title=&quot;指标名称：&quot;&gt;&lt;/a&gt;指标名称：&lt;/h3&gt;&lt;p&gt;一般是给监测对像起一名字，例如http_requests&lt;em&gt;total这样，它有一些命名规则，可以包字母数字&lt;/em&gt;之类的的。通常是以应用名称开头&lt;em&gt;监测对像&lt;/em&gt;数值类型_单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。&lt;/p&gt;
&lt;h3 id=&quot;标签：&quot;&gt;&lt;a href=&quot;#标签：&quot; class=&quot;headerlink&quot; title=&quot;标签：&quot;&gt;&lt;/a&gt;标签：&lt;/h3&gt;&lt;p&gt;就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。&lt;/p&gt;
&lt;p&gt;记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。&lt;/p&gt;
&lt;p&gt;查询语句就可以跟据上面标签的组合来查询聚合结果了。&lt;/p&gt;
&lt;p&gt;如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="devops" scheme="http://graychen.git.io/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>github上composer自动化测试</title>
    <link href="http://graychen.git.io/2017/09/27/github%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://graychen.git.io/2017/09/27/github自动化测试/</id>
    <published>2017-09-27T14:39:54.000Z</published>
    <updated>2018-05-27T09:59:36.033Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我们组对项目进行重构，将多个项目中例如log，app的更新这些重复的内容抽出来做了composer包，为了保证这些composer包的代码质量，<br>使用了github上的一些工具。下面我以自己的一个利用经纬度查询地理位置的composer包geolocation[<a href="https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。" target="_blank" rel="noopener">https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。</a></p><h2 id="Style-CI-php格式检查"><a href="#Style-CI-php格式检查" class="headerlink" title="Style CI(php格式检查)"></a>Style CI(php格式检查)</h2><p>在项目根目录，新建.styleci.yml 配置文件，并编写配置内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preset: psr2</div></pre></td></tr></table></figure></p><p>打开 <a href="https://styleci.io/" target="_blank" rel="noopener">https://styleci.io/</a> ，使用Gitlab账号登录，找到对应的项目，点击右侧的 ENABLE STYLECI 启用按钮，即可使用，<br>每次提交代码，都会看到检测结果<br>如果没有找到自己的项目，打开 <a href="https://styleci.io/account#repos" target="_blank" rel="noopener">https://styleci.io/account#repos</a> 点击 Sync With GitHub 同步，就会看到</p><h2 id="Travis-CI-自动化测试"><a href="#Travis-CI-自动化测试" class="headerlink" title="Travis-CI(自动化测试)"></a>Travis-CI(自动化测试)</h2><h3 id="配置单元测试"><a href="#配置单元测试" class="headerlink" title="配置单元测试"></a>配置单元测试</h3><p>1先引入phpunit单元测试包,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require --dev phpunit/phpunit ^6.2</div></pre></td></tr></table></figure></p><p>2编写配置文件phpunit.xml.dist,放到根根根目录<br>白名单是你要测试的目录文件，用于生成代码覆盖率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;phpunit bootstrap=&quot;./tests/bootstrap.php&quot;</div><div class="line">         colors=&quot;true&quot;</div><div class="line">         verbose=&quot;true&quot;</div><div class="line">         convertErrorsToExceptions=&quot;true&quot;</div><div class="line">         convertNoticesToExceptions=&quot;true&quot;</div><div class="line">         convertWarningsToExceptions=&quot;true&quot;</div><div class="line">         processIsolation=&quot;false&quot;</div><div class="line">         stopOnFailure=&quot;false&quot;&gt;</div><div class="line">    &lt;testsuites&gt;</div><div class="line">        &lt;testsuite name=&quot;Test Suite&quot;&gt;</div><div class="line">            &lt;directory&gt;./tests&lt;/directory&gt;</div><div class="line">        &lt;/testsuite&gt;</div><div class="line">    &lt;/testsuites&gt;</div><div class="line">    &lt;filter&gt;</div><div class="line">        &lt;whitelist&gt;</div><div class="line">            &lt;directory suffix=&quot;.php&quot;&gt;./src&lt;/directory&gt;</div><div class="line">        &lt;/whitelist&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">&lt;/phpunit&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><p>3然后建立测试目录test，并在里面建立bootstrap.php来引入composer中的引导文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// ensure we get report on all possible php errors</span></div><div class="line">error_reporting(<span class="number">-1</span>);</div><div class="line"><span class="keyword">require_once</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>);</div></pre></td></tr></table></figure></p><p>4composerjson.json文件里自动载入,否则找不到tests里面的TestCase<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;autoload-dev&quot;: &#123;</div><div class="line">       &quot;psr-4&quot;: &#123;</div><div class="line">           &quot;graychen\\Test\\&quot;: &quot;tests/&quot;</div><div class="line">       &#125;</div><div class="line">   &#125;,</div></pre></td></tr></table></figure></p><p>5编写.travil.yml文件(在<a href="https://travis-ci.com/" target="_blank" rel="noopener">https://travis-ci.com/</a> 注册账号,然后在github添加service,这样每次提交代码就会自动同步到travis)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">php:</div><div class="line">  - 5.6</div><div class="line"></div><div class="line">  - 7.1</div><div class="line"></div><div class="line"> # cache vendor dirs</div><div class="line">cache:</div><div class="line">  directories:</div><div class="line">    - $HOME/.composer/cache</div><div class="line">    - vendor</div><div class="line"></div><div class="line">#安装依赖</div><div class="line">install:</div><div class="line"></div><div class="line">  - travis_retry composer self-update</div><div class="line"></div><div class="line">  - travis_retry composer install --prefer-dist --no-interaction</div><div class="line"></div><div class="line"></div><div class="line">before_script:</div><div class="line"></div><div class="line">  - travis_retry composer self-update</div><div class="line"></div><div class="line">  - travis_retry composer install --no-interaction --prefer-source --dev</div><div class="line"></div><div class="line">#单元测试</div><div class="line">script:</div><div class="line"></div><div class="line">  - phpunit --coverage-text --coverage-clover=coverage.clover --debug</div><div class="line"></div><div class="line">#需要在https://scrutinizer-ci.com注册账号 并绑定github账号同步github项目</div><div class="line">after_script:</div><div class="line"></div><div class="line">  - wget https://scrutinizer-ci.com/ocular.phar</div><div class="line"></div><div class="line">  - php ocular.phar code-coverage:upload  --format=php-clover coverage.clover</div></pre></td></tr></table></figure><h2 id="Scrutinizer-（单元测试覆盖率）"><a href="#Scrutinizer-（单元测试覆盖率）" class="headerlink" title="Scrutinizer （单元测试覆盖率）"></a>Scrutinizer （单元测试覆盖率）</h2><p>Scrutinizer具有可用于PHP代码的最先进的静态分析引擎。 它能跟踪数据如何流经我们的应用程序以检测代码安全，错误，未使用的代码等。默认情况下，Scrutinizer将分析项目中以.php结尾的所有文件。</p><p>1.Scrutinizer测试以后会有三个指标供我们对代码来改进</p><p>Code Quality</p><p>   代码质量评测来源主要是代码耦合度,代码的复杂度,冗余,未使用变量等.<br>Code Coverage</p><p>  提高单元测试覆盖率， 如果方法里有多个条件分支，尽可能传递不同参数或者使用其它方法让每一行都执行<br>Build Status</p><p>  这一项由代码分析来决定，比如依赖是否可以加载，测试报告是否接收到（travis-ci提供）<br>  如果travis-ci已经build成功，Scrutinizer中却因为某些依赖无法加载可通过以下配置来过滤依赖分析<br>  excluded_dependencies:</p><pre><code>- phpunit/php-timer- or-another/package-name</code></pre><p>2.基本配置文件</p><p>   #测试项目根目录创建.scrutinizer.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">imports:</div><div class="line">      - php</div><div class="line"> tools:</div><div class="line">     external_code_coverage:</div><div class="line">         timeout: 1800 # Timeout in seconds.</div><div class="line">     # disable copy paste detector and similarity analyzer as they have no real value</div><div class="line">     # and a huge bunch of false-positives</div><div class="line">     php_sim: false</div><div class="line">     php_cpd: false</div></pre></td></tr></table></figure></p><p>参考文档地址<a href="https://scrutinizer-ci.com/docs/guides/php/automated-code-reviews" target="_blank" rel="noopener">https://scrutinizer-ci.com/docs/guides/php/automated-code-reviews</a></p><h2 id="Codeclimate简介及使用-漏洞排查"><a href="#Codeclimate简介及使用-漏洞排查" class="headerlink" title="Codeclimate简介及使用 (漏洞排查)"></a>Codeclimate简介及使用 (漏洞排查)</h2><p>Code Climate可以看作是开发团队的云机器人，无需执行代码就可对代码进行标准化测试，为项目提供静态分析功能，与GitHub集成可以进行漏洞排查工作 每个人都可能用正确的风格写出质量低下的代码，这其中可能包括：</p><p>重复的代码，它们可能存在于同一个类或不同类中<br>不一致或没有标识性的对象、变量或方法命名<br>过长的代码段<br>让人费解的布尔表达式<br>过于复杂的逻辑判断<br>对象错误地暴露其内部状态<br>遭废弃但没有删除的类或方法 Code Climate可以帮我们 Review 这部分代码</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先在项目中添加配置文件 。codeclimate.yml配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">engines:</div><div class="line">  duplication:</div><div class="line">    enabled: true</div><div class="line">    config:</div><div class="line">      languages:</div><div class="line">      - php</div><div class="line">  eslint:</div><div class="line">    enabled: true</div><div class="line">  fixme:</div><div class="line">    enabled: true</div><div class="line">  phpmd:</div><div class="line">    enabled: true</div><div class="line">    config:</div><div class="line">    checks:</div><div class="line">      UnusedLocalVariable:</div><div class="line">        enabled: false</div><div class="line">ratings:</div><div class="line">  paths:</div><div class="line">  - &quot;**.php&quot;</div><div class="line">exclude_paths:</div><div class="line">- tests/</div></pre></td></tr></table></figure></p><p>配置分析</p><p>引擎通道将您的分析映射到引擎的特定发行版本。例如，发动机可具有四个可用信道：stable，alpha，v1，和v2。未指定，分析运行发动机的稳定通道。</p><p>engines:<br>  some-engine:<br>    enabled: true<br>    channel: “new-hotness”<br>Github 集成<br>1首先登录[climatecode网站]<a href="https://codeclimate.com/dashboard" target="_blank" rel="noopener">https://codeclimate.com/dashboard</a><br>2 添加仓库<br>3入库<br>4显示成功,这些是分析数据</p><h2 id="github徽章-测试保证"><a href="#github徽章-测试保证" class="headerlink" title="github徽章 (测试保证)"></a>github徽章 (测试保证)</h2><p>修改README.md 在工具页面找这些徽章<br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/version" alt="Latest Stable Version"></a><br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/downloads" alt="Total Downloads"></a><br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/license" alt="License"></a><br><a href="https://styleci.io/repos/92368125" target="_blank" rel="noopener"><img src="https://styleci.io/repos/92368125/shield?branch=master" alt="StyleCI"></a><br><a href="https://travis-ci.org/Graychen/yii2-post" target="_blank" rel="noopener"><img src="https://travis-ci.org/Graychen/yii2-post.svg?branch=master" alt="Build Status"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/?branch=master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/?branch=master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/coverage.png?b=master" alt="Code Coverage"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/build-status/master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/build.png?b=master" alt="Build Status"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我们组对项目进行重构，将多个项目中例如log，app的更新这些重复的内容抽出来做了composer包，为了保证这些composer包的代码质量，&lt;br&gt;使用了github上的一些工具。下面我以自己的一个利用经纬度查询地理位置的composer包geolocation[&lt;a href=&quot;https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Style-CI-php格式检查&quot;&gt;&lt;a href=&quot;#Style-CI-php格式检查&quot; class=&quot;headerlink&quot; title=&quot;Style CI(php格式检查)&quot;&gt;&lt;/a&gt;Style CI(php格式检查)&lt;/h2&gt;&lt;p&gt;在项目根目录，新建.styleci.yml 配置文件，并编写配置内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;preset: psr2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;a href=&quot;https://styleci.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://styleci.io/&lt;/a&gt; ，使用Gitlab账号登录，找到对应的项目，点击右侧的 ENABLE STYLECI 启用按钮，即可使用，&lt;br&gt;每次提交代码，都会看到检测结果&lt;br&gt;如果没有找到自己的项目，打开 &lt;a href=&quot;https://styleci.io/account#repos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://styleci.io/account#repos&lt;/a&gt; 点击 Sync With GitHub 同步，就会看到&lt;/p&gt;
&lt;h2 id=&quot;Travis-CI-自动化测试&quot;&gt;&lt;a href=&quot;#Travis-CI-自动化测试&quot; class=&quot;headerlink&quot; title=&quot;Travis-CI(自动化测试)&quot;&gt;&lt;/a&gt;Travis-CI(自动化测试)&lt;/h2&gt;&lt;h3 id=&quot;配置单元测试&quot;&gt;&lt;a href=&quot;#配置单元测试&quot; class=&quot;headerlink&quot; title=&quot;配置单元测试&quot;&gt;&lt;/a&gt;配置单元测试&lt;/h3&gt;&lt;p&gt;1先引入phpunit单元测试包,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;composer require --dev phpunit/phpunit ^6.2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2编写配置文件phpunit.xml.dist,放到根根根目录&lt;br&gt;白名单是你要测试的目录文件，用于生成代码覆盖率&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;phpunit bootstrap=&amp;quot;./tests/bootstrap.php&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         colors=&amp;quot;true&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         verbose=&amp;quot;true&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         convertErrorsToExceptions=&amp;quot;true&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         convertNoticesToExceptions=&amp;quot;true&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         convertWarningsToExceptions=&amp;quot;true&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         processIsolation=&amp;quot;false&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         stopOnFailure=&amp;quot;false&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;testsuites&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;testsuite name=&amp;quot;Test Suite&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;directory&amp;gt;./tests&amp;lt;/directory&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/testsuite&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/testsuites&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;whitelist&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;./src&amp;lt;/directory&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/whitelist&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/filter&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/phpunit&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术 php" scheme="http://graychen.git.io/tags/%E6%8A%80%E6%9C%AF-php/"/>
    
  </entry>
  
  <entry>
    <title>yii2-queue队列的使用说明</title>
    <link href="http://graychen.git.io/2017/07/28/yii2-queue%E9%98%9F%E5%88%97%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://graychen.git.io/2017/07/28/yii2-queue队列的使用说明/</id>
    <published>2017-07-28T04:15:36.000Z</published>
    <updated>2018-05-27T09:59:36.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>yii2-queue是一个yii官方推出的队列扩展库，主要通过队列异步运行任务，它支持基于DB，Redis，RabbitMQ，Beanstalk和Gearman的队列。</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul><li><a href="https://github.com/yiisoft/yii2-queue" target="_blank" rel="noopener">github</a></li><li><a href="https://packagist.org/packages/yiisoft/yii2-queue" target="_blank" rel="noopener">packaglist</a></li></ul><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer <span class="keyword">require</span> yiisoft/yii2-queue</div></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在composer中添加<span class="string">"yiisoft/yii2-queue"</span>: <span class="string">"~2.0.0"</span>,然后持续composer install</div></pre></td></tr></table></figure><!--more--><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>发送到队列的每个任务应该被定义为一个单独的类。例如，如果您需要下载并保存文件，则该类可能如下所示：<br>下面的例子以redis作为驱动，<a href="https://github.com/yiisoft/yii2-queue/blob/master/docs/guide/README.md" target="_blank" rel="noopener">其它驱动</a><br>首先我们配置redis的驱动，注意如果没有yiisoft/yii2-redis包的话要先执行composer require yiisoft/yii2-redis,再在/common/config/<br>注意要为queue配置一个queue的redis配置<br><figure class="highlight plain"><figcaption><span>[</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&apos;bootstrap&apos; =&gt; [</div><div class="line">        &apos;queue&apos;, // The component registers own console commands</div><div class="line">],</div><div class="line">&apos;compoents&apos; =&gt; [</div><div class="line">    ...//其它的配置</div><div class="line">    &apos;redis_queue&apos; =&gt; [</div><div class="line">        &apos;class&apos; =&gt; &apos;yii\redis\Connection&apos;,</div><div class="line">        &apos;hostname&apos; =&gt; &apos;redis&apos;,</div><div class="line">        &apos;port&apos; =&gt; &apos;6379&apos;,</div><div class="line">        &apos;database&apos; =&gt; 0,</div><div class="line">    ],</div><div class="line">    &apos;queue&apos; =&gt; [</div><div class="line">        &apos;class&apos; =&gt; \yii\queue\redis\Queue::class,</div><div class="line">        &apos;redis&apos; =&gt; &apos;redis2&apos;, // Redis connection component or its config</div><div class="line">        &apos;channel&apos; =&gt; &apos;queue&apos;, // Queue channel key</div><div class="line">        &apos;as log&apos; =&gt; \yii\queue\LogBehavior::class</div><div class="line">    ],</div><div class="line">]</div></pre></td></tr></table></figure></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadJob</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> \<span class="title">yii</span>\<span class="title">queue</span>\<span class="title">Job</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $url;</div><div class="line">    <span class="keyword">public</span> $file;</div><div class="line">                </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">($queue)</span></span></div><div class="line">    &#123;</div><div class="line">        file_put_contents(<span class="keyword">$this</span>-&gt;file, file_get_contents(<span class="keyword">$this</span>-&gt;url));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以下是将任务发送到队列中的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Yii::$app-&gt;queue-&gt;push(<span class="keyword">new</span> DownloadJob([</div><div class="line">    <span class="string">'url'</span> =&gt; <span class="string">'http://example.com/image.jpg'</span>,</div><div class="line">    <span class="string">'file'</span> =&gt; <span class="string">'/tmp/image.jpg'</span>,</div><div class="line">]));</div></pre></td></tr></table></figure><p>将作业推入5分钟后运行的队列：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Yii::$app-&gt;queue-&gt;delay(<span class="number">5</span> * <span class="number">60</span>)-&gt;push(<span class="keyword">new</span> DownloadJob([</div><div class="line">    <span class="string">'url'</span> =&gt; <span class="string">'http://example.com/image.jpg'</span>,</div><div class="line">    <span class="string">'file'</span> =&gt; <span class="string">'/tmp/image.jpg'</span>,</div><div class="line">]));</div></pre></td></tr></table></figure><p>执行任务的方式取决于所使用的驱动程序。大部分的驱动程序可以使用控制台命令运行，组件应该在应用程序中注册。<br>在循环中获取并执行任务的命令，直到队列为空：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yii queue/run</div></pre></td></tr></table></figure><p>命令启动一个无限查询队列的守护程序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yii queue/listen</div></pre></td></tr></table></figure><p>该组件具有跟踪被推入队列的作业的状态的能力。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//将作业推入队列并获取按摩ID。</span></div><div class="line">$id = Yii::$app-&gt;queue-&gt;push(<span class="keyword">new</span> SomeJob());</div><div class="line"></div><div class="line"><span class="comment">//工作正在等待执行。</span></div><div class="line">Yii::$app-&gt;queue-&gt;isWaiting($id);</div><div class="line"></div><div class="line"><span class="comment">// Worker从队列中获取作业并执行它。</span></div><div class="line">Yii::$app-&gt;queue-&gt;isReserved($id);</div><div class="line"></div><div class="line"><span class="comment">// Worker已经执行了这个工作。</span></div><div class="line">Yii::$app-&gt;queue-&gt;isDone($id);</div></pre></td></tr></table></figure><h2 id="使用Supervisor管理php-yii-queue-listen"><a href="#使用Supervisor管理php-yii-queue-listen" class="headerlink" title="使用Supervisor管理php yii queue/listen"></a>使用Supervisor管理php yii queue/listen</h2><p>Supervisor是Linux的进程监视器。它会自动启动您的控制台进程。要在Ubuntu上安装，您需要运行命令：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install supervisor</div></pre></td></tr></table></figure></p><p>主管配置文件通常可用/etc/supervisor/conf.d。您可以创建任意数量的配置文件。<br>配置示例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[program:yii-queue-worker]</div><div class="line">process_name=%(program_name)s_%(process_num)<span class="number">02</span>d</div><div class="line">command=/usr/bin/php /<span class="keyword">var</span>/www/my_project/yii queue/listen --verbose=<span class="number">1</span> --color=<span class="number">0</span></div><div class="line">autostart=<span class="keyword">true</span></div><div class="line">autorestart=<span class="keyword">true</span></div><div class="line">user=www-data</div><div class="line">numprocs=<span class="number">4</span></div><div class="line">redirect_stderr=<span class="keyword">true</span></div><div class="line">stdout_logfile=/<span class="keyword">var</span>/www/my_project/log/yii-queue-worker.log</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;yii2-queue是一个yii官方推出的队列扩展库，主要通过队列异步运行任务，它支持基于DB，Redis，RabbitMQ，Beanstalk和Gearman的队列。&lt;/p&gt;
&lt;h2 id=&quot;来源&quot;&gt;&lt;a href=&quot;#来源&quot; class=&quot;headerlink&quot; title=&quot;来源&quot;&gt;&lt;/a&gt;来源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yiisoft/yii2-queue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packagist.org/packages/yiisoft/yii2-queue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;packaglist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编辑器" scheme="http://graychen.git.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>docker中使用supervisor管理队列</title>
    <link href="http://graychen.git.io/2017/07/25/docker%E4%B8%AD%E4%BD%BF%E7%94%A8supervisor/"/>
    <id>http://graychen.git.io/2017/07/25/docker中使用supervisor/</id>
    <published>2017-07-25T15:04:46.000Z</published>
    <updated>2018-05-27T09:59:36.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Supervisor<a href="http://supervisord.org" target="_blank" rel="noopener">链接</a> 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Supervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip : sudo pip install supervisor<br> 如果是 Ubuntu 系统，还可以使用 apt-get install supervisor 安装,由于我们的容器是alpine系统,所以可以在Dockerfile里添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN apk add supervisor</div></pre></td></tr></table></figure></p><p>这样容器就可以安装superviosr</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>然后在docker的服务目录services里创建supervisor目录，创建supervisor.conf文件<br><a id="more"></a><br>#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[supervisord]</div><div class="line">nodaemon=true</div><div class="line">[program:mqtt-server]</div><div class="line">directory = /var/www/html ;</div><div class="line">command = php yii queue/listen</div><div class="line">autostart = true</div><div class="line">startsecs = 5</div><div class="line">autorestart = true</div><div class="line">startretries = 10</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile = /var/www/html/yii-queue-worker.log</div></pre></td></tr></table></figure></p><p>然后在Dockerfile-web-volumes里面添加</p><!--more--><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ./services/supervisor:/etc/supervisor/conf.d</div></pre></td></tr></table></figure><p>以此将本地的配置文件映射到docker容器里面的supervisor的默认配置文件</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><blockquote><p>本来我的想法是在Dockerfile里面直接添加<code>ENTRYPOINT [&#39;/usr/bin/supervisord&#39;,&#39;-c&#39;,&#39;/etc/supervisor/conf.d&#39;]</code>,想在docker build的时候直接启动supervisor管理队列，但是我的队列是其余redis的，运行到这一步的时候redis的docker还没有启动，导致我的页面一直502，虽然supervisor启动了，但是队列的redis驱动还没有启动，所以选择了折中的方法。<code>注意，如果队列基于其它driver的可以这样直接运行的</code></p></blockquote><p>折中的方案是在.gitlab-ci.yml文件中的<strong>testing-server:</strong>-&gt; <strong>script:</strong>和<strong>staging-server:</strong>-&gt;<strong>script:</strong>下分别添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &amp;&gt;/dev/null&amp;&quot;</div></pre></td></tr></table></figure></p><p>这样的方式是在部署的时候在启动supervisord,想当于在docker启动后在启动supervisord这个软件，这样就可以实现监听队列了<br>然后将docker-compose.yml和目录supervisor复制到deploy目录里的production,staging,testing三个目录里面</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Supervisor&lt;a href=&quot;http://supervisord.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt; 是一个用 Python 写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;Supervisor 可以运行在 Linux、Mac OS X 上。如前所述，supervisor 是 Python 编写的，所以安装起来也很方便，可以直接用 pip : sudo pip install supervisor&lt;br&gt; 如果是 Ubuntu 系统，还可以使用 apt-get install supervisor 安装,由于我们的容器是alpine系统,所以可以在Dockerfile里添加&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;RUN apk add supervisor&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样容器就可以安装superviosr&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;然后在docker的服务目录services里创建supervisor目录，创建supervisor.conf文件&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php的并发io</title>
    <link href="http://graychen.git.io/2017/06/25/php%E7%9A%84%E5%B9%B6%E5%8F%91io/"/>
    <id>http://graychen.git.io/2017/06/25/php的并发io/</id>
    <published>2017-06-25T15:04:46.000Z</published>
    <updated>2018-05-27T09:59:36.031Z</updated>
    
    <content type="html"><![CDATA[<p>计算领域一直是分为计算密集和IO密集型，web程序一直是io密集型，从最早的同步阻塞直接Fork进程，到Worker进程池，到现在的异步IO协程，io一直是服务器的难点，下面文章，将详细解析php的并发io问题。</p><h2 id="多进程-多线程同步阻塞"><a href="#多进程-多线程同步阻塞" class="headerlink" title="多进程/多线程同步阻塞"></a>多进程/多线程同步阻塞</h2><p>最早的服务器端都是通过多进程来解决IO的问题,通过Accept一个客户端连接就创建一个进程，然后子进程进入循环同步阻塞与客户端进行交互，收发数据。<br> <img src="/assets/blogImg/manyporcess.png" alt="&quot;我是傲娇的效果图&quot;"><br>因为线程之间是共享内存堆栈,所以不同的线程之间进行交互比较容易实现。比如聊天室这样的程序，客户端连接之间可以交互，比聊天室中的玩家可以任意的其他人发消息。用多线程模式实现非常简单，线程中可以直接向某一个客户端连接发送数据。而多进程模式就要用到管道、消息队列、共享内存，统称进程间通信（IPC）复杂的技术才能实现。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$serv = stream_socket_server(<span class="string">"tcp://0.0.0.0.8000"</span>,$errno,$errstr) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"create server failed"</span>);</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">        $conn = stream_socket_accept($serv);</div><div class="line">        <span class="keyword">if</span>(pcntl_fork() ==<span class="number">0</span>) &#123;</div><div class="line">                $request = fread($conn);</div><div class="line">                fwite($repose);</div><div class="line">                fclose($conn);</div><div class="line">                <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="多进程-线程模型的流程"><a href="#多进程-线程模型的流程" class="headerlink" title="多进程/线程模型的流程"></a>多进程/线程模型的流程</h2><p>1创建一个 socket，绑定服务器端口（bind），监听端口（listen），在PHP中用stream_socket_server一个函数就能完成上面3个步骤，当然也可以使用更底层的sockets扩展分别实现<br>2进入while循环，阻塞在accept操作上，等待客户端连接进入。此时程序会进入随眠状态，直到有新的客户端发起connect到服务器，操作系统会唤醒此进程。accept函数返回客户端连接的socket<br>3主进程在多进程模型下通过fork（php: pcntl_fork）创建子进程，多线程模型下使用pthread_create（php: new Thread）创建子线程。下文如无特殊声明将使用进程同时表示进程/线程。<br>4子进程创建成功后进入while循环，阻塞在recv（php: fread）调用上，等待客户端向服务器发送数据。收到数据后服务器程序进行处理然后使用send（php: fwrite）向客户端发送响应。长连接的服务会持续与客户端交互，而短连接服务一般收到响应就会close。<br>5当客户端连接关闭时，子进程退出并销毁所有资源。主进程会回收掉此子进程。<br><strong>这种模式最大的问题是，进程/线程创建和销毁的开销很大。所以上面的模式没办法应用于非常繁忙的服务器程序。对应的改进版解决了此问题，这就是经典的Leader-Follower模型。</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$serv = stream_socket_server(<span class="string">"tcp://0.0.0.0:8000"</span>,$error,$errstr) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"create server failed"</span>);</div><div class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt; <span class="number">32</span>;$i++)&#123;</div><div class="line">        <span class="keyword">if</span> (pcntl_fork() == <span class="number">0</span> )&#123;</div><div class="line">                <span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">                        $conn = stream_socket_accept($serv);</div><div class="line">                        <span class="keyword">if</span>($conn == <span class="keyword">false</span>) <span class="keyword">continue</span>;</div><div class="line">                        $request = fread($conn);</div><div class="line">                        fwrite($reponse);</div><div class="line">                        fclose($conn);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">exit</span>(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>他的特点是程序启动后就会创建N个进程。每个子进程就会进入Accept,等待新的连接进入。当客户端连接到服务器时，其中一个子进程就会被唤醒，开始处理客户端请求，并且不再接受新的TCP连接。当连接关闭，子进程才会释放，重新进入Accept,参与处理新的连接。<br>优点:复用进程，没有额外消耗，性能好。应用案例：Apache.PHP-FPM<br>缺点：严重依赖初始创建的进程数，操作系统可以创建的进程数有限。进程带来额外的进程调度，如果启动数千甚至数万个进程，消耗就会直线上升。调度消耗可能占到CPU的百分之几十甚至100%。<br>还有一种场景也是多进程模型的软肋。通常Web服务器启动100个进程，如果一个请求消耗100ms，100个进程可以提供1000qps，这样的处理能力还是不错的。但是如果请求内要调用外网Http接口，像QQ、微博登录，耗时会很长，一个请求需要10s。那一个进程1秒只能处理0.1个请求，100个进程只能达到10qps，这样的处理能力就太差了。</p><p>有没有一种技术可以在一个进程内处理所有并发IO呢？答案是有，这就是IO复用技术。</p><h2 id="IO复用-事件循环-异步非阻塞"><a href="#IO复用-事件循环-异步非阻塞" class="headerlink" title="IO复用/事件循环/异步非阻塞"></a>IO复用/事件循环/异步非阻塞</h2><p>其实IO复用的历史和多进程一样长，Linux很早就提供了select系统调用，可以在一个进程内维持1024个连接。后来又加入了poll系统调用，poll做了一些改进，解决了1024限制的问题，可以维持任意数量的连接。但select/poll还有一个问题就是，它需要循环检测连接是否有事件。这样问题就来了，如果服务器有100万个连接，在某一时间只有一个连接向服务器发送了数据，select/poll需要做循环100万次，其中只有1次是命中的，剩下的99万9999次都是无效的，白白浪费了CPU资源。<br>直到Linux 2.6内核提供了新的epoll系统调用，可以维持无限数量的连接，而且无需轮询，这才真正解决了C10K问题。现在各种高并发异步IO的服务器程序都是基于epoll实现的，比如Nginx、Node.js、Erlang、Golang。像Node.js这样单进程单线程的程序，都可以维持超过1百万TCP连接，全部归功于epoll技术。<br>IO复用异步非阻塞程序使用经典的Reactor模型，Reactor顾名思义就是反应堆的意思，它本身不处理任何数据收发。只是可以监视一个socket句柄的事件变化。<br> <img src="/assets/blogImg/reactor.png" alt="&quot;我是傲娇的效果图&quot;"><br> Reactor有4个核心的操作：<br> add添加socket监听到reactor，可以是listen socket也可以使客户端socket，也可以是管道、eventfd、信号等<br> set修改事件监听，可以设置监听的类型，如可读、可写。可读很好理解，对于listen socket就是有新客户端连接到来了需要accept。对于客户端连接就是收到数据，需要recv。可写事件比较难理解一些。一个SOCKET是有缓存区的，如果要向客户端连接发送2M的数据，一次性是发不出去的，操作系统默认TCP缓存区只有256K。一次性只能发256K，缓存区满了之后send就会返回EAGAIN错误。这时候就要监听可写事件，在纯异步的编程中，必须去监听可写才能保证send操作是完全非阻塞的。<br> del从reactor中移除，不再监听事件<br> callback就是事件发生后对应的处理逻辑，一般在add/set时制定。C语言用函数指针实现，JS可以用匿名函数，PHP可以用匿名函数、对象方法数组、字符串函数名。<br> Reactor只是一个事件发生器，实际对socket句柄的操作，如connect/accept、send/recv、close是在callback中完成的。具体编码可参考下面的伪代码：<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;?php</span></div><div class="line"> $reactor=<span class="keyword">new</span> Reactor();</div><div class="line"> $svr_sock=stream_socket_server(<span class="string">'tcp://127.0.0.1:9501'</span>);</div><div class="line"> $reactor-&gt;add($svr_sock,EV_READ,<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($svr_sock,$reactor)</span></span>&#123;</div><div class="line">         $cli_sock = stream_socket_accept($svr_sock);</div><div class="line">         $reactor-&gt;add($cli_sock,EV_READ,<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($cli_sock,$reactor)</span></span>&#123;</div><div class="line">                 $request = fread($cli_sock,<span class="number">8192</span>);</div><div class="line">                 $reactor-&gt;add($cli_sock,EV_WRITE,<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span> <span class="params">($cli_sock,$request,$reactor)</span></span>&#123;</div><div class="line">                         fwrite($cli_sock,<span class="string">"hello world\n"</span>);</div><div class="line">                         $reactor-&gt;del($cli_sock);</div><div class="line">                         fclose($cli_sock);</div><div class="line">                 &#125;);</div><div class="line">         &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><blockquote><p>Reactor模型还可以与多进程、多线程结合起来用，既实现异步非阻塞IO，又利用到多核。目前流行的异步服务器程序都是这样的方式：如<br> Nginx：多进程Reactor<br> Nginx+Lua：多进程Reactor+协程<br> Golang：单线程Reactor+多线程协程<br> Swoole：多线程Reactor+多进程Worker</p></blockquote><p> 协程是什么<br> 协程从底层技术角度看实际上还是异步IO Reactor模型，应用层自行实现了任务调度，借助Reactor切换各个当前执行的用户态线程，但用户代码中完全感知不到Reactor的存在</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title=" 参考文章:"></a> 参考文章:</h2><p><a href="http://rango.swoole.com/archives/508" target="_blank" rel="noopener">PHP并发IO编程之路</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;计算领域一直是分为计算密集和IO密集型，web程序一直是io密集型，从最早的同步阻塞直接Fork进程，到Worker进程池，到现在的异步IO协程，io一直是服务器的难点，下面文章，将详细解析php的并发io问题。&lt;/p&gt;
&lt;h2 id=&quot;多进程-多线程同步阻塞&quot;&gt;&lt;a href=&quot;#多进程-多线程同步阻塞&quot; class=&quot;headerlink&quot; title=&quot;多进程/多线程同步阻塞&quot;&gt;&lt;/a&gt;多进程/多线程同步阻塞&lt;/h2&gt;&lt;p&gt;最早的服务器端都是通过多进程来解决IO的问题,通过Accept一个客户端连接就创建一个进程，然后子进程进入循环同步阻塞与客户端进行交互，收发数据。&lt;br&gt; &lt;img src=&quot;/assets/blogImg/manyporcess.png&quot; alt=&quot;&amp;quot;我是傲娇的效果图&amp;quot;&quot;&gt;&lt;br&gt;因为线程之间是共享内存堆栈,所以不同的线程之间进行交互比较容易实现。比如聊天室这样的程序，客户端连接之间可以交互，比聊天室中的玩家可以任意的其他人发消息。用多线程模式实现非常简单，线程中可以直接向某一个客户端连接发送数据。而多进程模式就要用到管道、消息队列、共享内存，统称进程间通信（IPC）复杂的技术才能实现。&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$serv = stream_socket_server(&lt;span class=&quot;string&quot;&gt;&quot;tcp://0.0.0.0.8000&quot;&lt;/span&gt;,$errno,$errstr) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;die&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;create server failed&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        $conn = stream_socket_accept($serv);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pcntl_fork() ==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                $request = fread($conn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fwite($repose);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                fclose($conn);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>压力测试，压力山大</title>
    <link href="http://graychen.git.io/2017/06/21/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%8E%8B%E5%8A%9B%E5%B1%B1%E5%A4%A7/"/>
    <id>http://graychen.git.io/2017/06/21/压力测试，压力山大/</id>
    <published>2017-06-21T12:09:31.000Z</published>
    <updated>2018-05-27T09:59:36.030Z</updated>
    
    <content type="html"><![CDATA[<p>压力测试的基本概念</p><h3 id="吞吐率（Requests-per-second）"><a href="#吞吐率（Requests-per-second）" class="headerlink" title="吞吐率（Requests per second）"></a>吞吐率（Requests per second）</h3><p>概念：服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。<br>计算公式：总请求数 / 处理完成这些请求数所花费的时间，即<br>Request per second = Complete requests / Time taken for tests</p><h3 id="并发连接数（The-number-of-concurrent-connections）"><a href="#并发连接数（The-number-of-concurrent-connections）" class="headerlink" title="并发连接数（The number of concurrent connections）"></a>并发连接数（The number of concurrent connections）</h3><p>概念：某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p><h3 id="并发用户数（The-number-of-concurrent-users，Concurrency-Level）"><a href="#并发用户数（The-number-of-concurrent-users，Concurrency-Level）" class="headerlink" title="并发用户数（The number of concurrent users，Concurrency Level）"></a>并发用户数（The number of concurrent users，Concurrency Level）</h3><p>概念：要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。</p><h3 id="用户平均请求等待时间（Time-per-request）"><a href="#用户平均请求等待时间（Time-per-request）" class="headerlink" title="用户平均请求等待时间（Time per request）"></a>用户平均请求等待时间（Time per request）</h3><p>计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即<br>Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</p><a id="more"></a><h3 id="服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）"><a href="#服务器平均请求等待时间（Time-per-request-across-all-concurrent-requests）" class="headerlink" title="服务器平均请求等待时间（Time per request: across all concurrent requests）"></a>服务器平均请求等待时间（Time per request: across all concurrent requests）</h3><p>计算公式：处理完成所有请求数所花费的时间 / 总请求数，即<br>Time taken for / testsComplete requests<br>可以看到，它是吞吐率的倒数。<br>同时，它也=用户平均请求等待时间/并发用户数，即<br>Time per request / Concurrency Level</p><h3 id="压力测试工具"><a href="#压力测试工具" class="headerlink" title="压力测试工具"></a>压力测试工具</h3><h2 id="ab"><a href="#ab" class="headerlink" title="ab"></a>ab</h2><p>ab工具简介<br>ab全称为：apache bench<br>在官网上的解释如下：<br>ab是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要是显示你安装的Apache每秒可以处理多少个请求。<br>开始测试:<br>输入命令<br><code>ab -n 100 -c 10 https://www.baidu.com/</code></p><blockquote><p>其中－n表示请求数，－c表示并发数</p></blockquote><p>测试结果分析<br>上面的命令运行完毕后就出来测试报告了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">graychen@graychen-VPCEG27YC:/blog$ ab -n 100 -c 10 https://www.baidu.com/</div><div class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking www.baidu.com (be patient).....done</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        bfe/1.0.8.18</div><div class="line">Server Hostname:        www.baidu.com</div><div class="line">Server Port:            443</div><div class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</div><div class="line"></div><div class="line">Document Path:          /</div><div class="line">Document Length:        227 bytes</div><div class="line"></div><div class="line">Concurrency Level:      10</div><div class="line">Time taken <span class="keyword">for</span> tests:   1.765 seconds</div><div class="line">Complete requests:      100</div><div class="line">Failed requests:        0</div><div class="line">Total transferred:      103255 bytes</div><div class="line">HTML transferred:       22700 bytes</div><div class="line">Requests per second:    56.65 [<span class="comment">#/sec] (mean)</span></div><div class="line">Time per request:       176.522 [ms] (mean)</div><div class="line">Time per request:       17.652 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          57.12 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">min  mean[+/-sd] median   max</div><div class="line">Connect:      104  126  12.3    125     162</div><div class="line">Processing:    32   39   5.7     38      68</div><div class="line">Waiting:       32   38   5.0     37      60</div><div class="line">Total:        138  165  14.1    164     220</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">        50%    164</div><div class="line">        66%    170</div><div class="line">        75%    173</div><div class="line">        80%    177</div><div class="line">        90%    184</div></pre></td></tr></table></figure></p><p>这段展示的是web服务器的信息，可以看到服务器采用的是bfe/1.0.8.18,这是类似与nginx的软件，域名是www.baidu.com，端口是80<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Server Software:        bfe/1.0.8.18</div><div class="line">Server Hostname:        www.baidu.com</div><div class="line">Server Port:            443</div><div class="line">SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128</div></pre></td></tr></table></figure></p><p>这段是关于请求的文档的相关信息，所在位置“/”，文档的大小为 227bytes（此为http响应的正文长度）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Document Path:          /</div><div class="line">Document Length:        227 bytes</div><div class="line">这段展示了压力测试的几个重要指标</div><div class="line">Concurrency Level:      10</div><div class="line">Time taken <span class="keyword">for</span> tests:   1.765 seconds</div><div class="line">Complete requests:      100</div><div class="line">Failed requests:        0</div><div class="line">Total transferred:      103255 bytes</div><div class="line">HTML transferred:       22700 bytes</div><div class="line">Requests per second:    56.65 [<span class="comment">#/sec] (mean)</span></div><div class="line">Time per request:       176.522 [ms] (mean)</div><div class="line">Time per request:       17.652 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          57.12 [Kbytes/sec] received</div></pre></td></tr></table></figure></p><p><code>Concurrency Level: 10</code><br>//并发请求数<br><code>Time taken for tests: 1.765 seconds</code><br>//整个测试持续的时间<br><code>Complete requests: 100</code><br>//完成的请求数<br><code>Failed requests: 0</code><br>//失败的请求数</p><p><code>Total transferred:      103255 bytes</code><br>//整个场景中的网络传输量<br><code>HTML transferred:       22700 bytes</code><br>//整个场景中的HTML内容传输量<br><strong>//吞吐率，大家最关心的指标之一，相当于 LR 中的每秒事务数，后面括号中的 mean 表示这是一个平均值</strong><br><code>Time per request:       176.522 [ms] (mean)</code><br><strong>//用户平均请求等待时间，大家最关心的指标之二，相当于 LR 中的平均事务响应时间，后面括号中的 mean 表示这是一个平均值</strong><br><code>Time per request:       17.652 [ms] (mean, across all concurrent requests)</code><br><strong>//服务器平均请求处理时间，大家最关心的指标之三</strong></p><p><code>Transfer rate:          57.12 [Kbytes/sec] received</code><br>//平均每秒网络上的流量，可以帮助排除是否存在网络流量过大导致响应时间延长的问题</p><p>这段表示网络上消耗的时间的分解<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Connection Times (ms)</div><div class="line">min  mean[+/-sd] median   max</div><div class="line">Connect:      104  126  12.3    125     162</div><div class="line">Processing:    32   39   5.7     38      68</div><div class="line">Waiting:       32   38   5.0     37      60</div><div class="line">Total:        138  165  14.1    164     220</div></pre></td></tr></table></figure></p><p>这段是每个请求处理时间的分布情况，50%的处理时间在4930ms内，66%的处理时间在5008ms内…，重要的是看90%的处理时间。<br><figure class="highlight zsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">        50%    164</div><div class="line">        66%    170</div><div class="line">        75%    173</div><div class="line">        80%    177</div><div class="line">        90%    184</div></pre></td></tr></table></figure></p><h2 id="登陆的测试"><a href="#登陆的测试" class="headerlink" title="登陆的测试"></a>登陆的测试</h2><p>有时候进行压力测试需要用户登录，怎么办？<br>请参考以下步骤：</p><p>先用账户和密码登录后，用开发者工具找到标识这个会话的Cookie值（Session ID）记下来<br>如果只用到一个Cookie，那么只需键入命令：<br>ab －n 100 －C key＝value <a href="http://test.com/" target="_blank" rel="noopener">http://test.com/</a></p><p>如果需要多个Cookie，就直接设Header：<br>ab -n 100 -H “Cookie: Key1=Value1; Key2=Value2” <a href="http://test.com/" target="_blank" rel="noopener">http://test.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;压力测试的基本概念&lt;/p&gt;
&lt;h3 id=&quot;吞吐率（Requests-per-second）&quot;&gt;&lt;a href=&quot;#吞吐率（Requests-per-second）&quot; class=&quot;headerlink&quot; title=&quot;吞吐率（Requests per second）&quot;&gt;&lt;/a&gt;吞吐率（Requests per second）&lt;/h3&gt;&lt;p&gt;概念：服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。&lt;br&gt;计算公式：总请求数 / 处理完成这些请求数所花费的时间，即&lt;br&gt;Request per second = Complete requests / Time taken for tests&lt;/p&gt;
&lt;h3 id=&quot;并发连接数（The-number-of-concurrent-connections）&quot;&gt;&lt;a href=&quot;#并发连接数（The-number-of-concurrent-connections）&quot; class=&quot;headerlink&quot; title=&quot;并发连接数（The number of concurrent connections）&quot;&gt;&lt;/a&gt;并发连接数（The number of concurrent connections）&lt;/h3&gt;&lt;p&gt;概念：某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。&lt;/p&gt;
&lt;h3 id=&quot;并发用户数（The-number-of-concurrent-users，Concurrency-Level）&quot;&gt;&lt;a href=&quot;#并发用户数（The-number-of-concurrent-users，Concurrency-Level）&quot; class=&quot;headerlink&quot; title=&quot;并发用户数（The number of concurrent users，Concurrency Level）&quot;&gt;&lt;/a&gt;并发用户数（The number of concurrent users，Concurrency Level）&lt;/h3&gt;&lt;p&gt;概念：要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。&lt;/p&gt;
&lt;h3 id=&quot;用户平均请求等待时间（Time-per-request）&quot;&gt;&lt;a href=&quot;#用户平均请求等待时间（Time-per-request）&quot; class=&quot;headerlink&quot; title=&quot;用户平均请求等待时间（Time per request）&quot;&gt;&lt;/a&gt;用户平均请求等待时间（Time per request）&lt;/h3&gt;&lt;p&gt;计算公式：处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即&lt;br&gt;Time per request = Time taken for tests /（ Complete requests / Concurrency Level）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php php扩展 c" scheme="http://graychen.git.io/tags/php-php%E6%89%A9%E5%B1%95-c/"/>
    
  </entry>
  
  <entry>
    <title>解析php的内存管理</title>
    <link href="http://graychen.git.io/2017/06/21/%E8%A7%A3%E6%9E%90php%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://graychen.git.io/2017/06/21/解析php的内存管理/</id>
    <published>2017-06-21T05:59:12.000Z</published>
    <updated>2018-05-27T09:59:36.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php的内存管理"><a href="#php的内存管理" class="headerlink" title="php的内存管理"></a>php的内存管理</h2><p>在PHP内核中，大多数情况下都不应该直接使用C语言中自带着malloc、free、strdup、realloc、calloc等操作内存的函数，而应使用内核提供的操作内存的函数，这样可以由内核整体统一的来管理内存。</p><blockquote><p>内存泄露<br>每个平台操作内存的方式都是差不多的有两个方面，一负责申请，二负责释放。如果应用程序向系统申请内存，系统便会在内存中寻找还没有被使用的地方，如果有合适的，便分配给这个程序，并标记下来，不再给其它的程序了。如果一个内存块没有释放，而所有者应用程序也永远不再使用它了。<br>对于一些需要长时间运行的程序，比如像Apache这样的web服务器以及它的php模块来说，都是伴随着操作系统长时间运行的，所以OS在很长一段时间内不能主动的回收内存，从而导致这个程序的每一个内存泄漏都会促进量变到质变的进化，最终引起严重的内存泄漏错误，使系统的资源消耗殆尽。</p></blockquote><h2 id="Zend内存管理器"><a href="#Zend内存管理器" class="headerlink" title="Zend内存管理器"></a>Zend内存管理器</h2><p>使用Zend内存管理(Zend Memory Manager,简称ZendMM、ZMM)层。内核的这一部分非常类似于操作系统的内存管理功能——分配内存给调用程序。区别在于，它处于进程空间中非常低的位置而且是”请求感知”的；这样一来，当一个请求结束时，它能够执行与OS在一个进程终止时相同的行为。也就是说，它会隐式地释放所有的为该请求所占用的内存。图1展示了ZendMM与OS以及PHP进程之间的关系。<br><img src="/assets/blogImg/zend_manage.jpg" alt="&quot;我是傲娇的效果图&quot;"><br> 除了提供隐式的内存清除功能之外，ZendMM还能够根据php.ini中memory_limit设置来控制每一次内存请求行为，如果一个脚本试图请求比系统中可用内存更多的内存，或大于它每次应该请求的最大量，那么，ZendMM将自动地发出一个E_ERROR消息并且启动相应的终止进程。这种方法的一个额外优点在于，大多数内存分配调用的返回值并不需要检查，因为如果失败的话将会导致立即跳转到引擎的退出部分。<br> 所有内部分配的内存都要使用一组特定的可选函数实现。例如，PHP内核代码不是使用malloc(16)来分配一个16字节内存块而是使用了emalloc(16)。除了实现实际的内存分配任务外，ZendMM还会使用相应的绑定请求类型来标志该内存块；这样以来，当一个请求”跳出”时，ZendMM可以隐式地释放它。 有些时候，某次申请的内存需要在一个请求结束后仍然存活一段时间，也就是持续性存在于各个请求之间。这种类型的分配（因其在一次请求结束之后仍然存在而被称为”永久性分配”），可以使用传统型内存分配器来实现，因为这些分配并不会添加ZendMM使用的那些额外的相应于每种请求的信息。然而有时，我们必须在程序运行时根据某个数据的具体值或者状态才能确定是否需要进行永久性分配，因此ZendMM定义了一组帮助宏，其行为类似于其它的内存分配函数，但是使用最后一个额外参数来指示是否为永久性分配。 如果你确实想实现一个永久性分配，那么这个参数应该被设置为1；在这种情况下，请求是通过传统型malloc()分配器家族进行传递的。然而，如果运行时刻逻辑认为这个块不需要永久性分配；那么，这个参数可以被设置为零，并且调用将会被调整到针对每种请求的内存分配器函数。 例如，pemalloc(buffer_len，1)将映射到malloc(buffer_len)，而pemalloc(buffer_len，0)将被使用下列语句映射到emalloc(buffer_len)：<br> 所有这些在ZendMM中提供的内存管理函数都能够从下表中找到其在C语言中的函数。</p><table><thead><tr><th style="text-align:left">C语言原生函数</th><th style="text-align:center">PHP内核封装后的函数</th></tr></thead><tbody><tr><td style="text-align:left">void *malloc(size_t count);</td><td style="text-align:center">void <em>emalloc(size_t count); void </em>pemalloc(size_t count, char persistent);</td></tr><tr><td style="text-align:left">void *calloc(size_t count);</td><td style="text-align:center">void <em>ecalloc(size_t count); void </em>pecalloc(size_t count, char persistent);</td></tr><tr><td style="text-align:left">void <em>realloc(void </em>ptr, size_t count);</td><td style="text-align:center">void <em>erealloc(void </em>ptr, size_t count); void <em>perealloc(void </em>ptr, size_t count, char persistent);</td></tr><tr><td style="text-align:left">void <em>strdup(void </em>ptr);</td><td style="text-align:center">void <em>estrdup(void </em>ptr); void <em>pestrdup(void </em>ptr, char persistent);</td></tr><tr><td style="text-align:left">void free(void *ptr);</td><td style="text-align:center">void efree(void <em>ptr); void pefree(void </em>ptr, char persistent);</td></tr></tbody></table><p>你可能会注意到，即使是pefree()函数也要求使用永久性标志。这是因为在调用pefree()时，它实际上并不知道是否ptr是一种永久性分配。需要注意的是，如果针对一个ZendMM申请的非永久性内存直接调用free()能够导致双倍的空间释放，而针对一种永久性分配调用efree()有可能会导致一个段错误，因为ZendMM需要去查找并不存在的管理信息。因此，你的代码需要记住它申请的内存是否是永久性的，从而选择不同的内存函数，free()或者efree()。 除了上述内存管理函数外，还存在其它一些非常方便的ZendMM函数，例如： <figure class="highlight plain"><figcaption><span>void *estrndup(void *ptr，int len);</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">该函数能够分配len+1个字节的内存并且从ptr处复制len个字节到最新分配的块。这个estrndup()函数的行为可以大致描述如下：</div><div class="line"></div><div class="line">```c</div><div class="line">ZEND_API char *_estrndup(const char *s, uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)</div><div class="line">&#123;</div><div class="line">        char *p;</div><div class="line"></div><div class="line">        p = (char *) _emalloc(length+1 ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);</div><div class="line">            if (UNEXPECTED(p == NULL))</div><div class="line">            &#123;</div><div class="line">                        return p;</div><div class="line">                            </div><div class="line">            &#125;</div><div class="line">        memcpy(p, s, length);</div><div class="line">        p[length] = 0;</div><div class="line">        return p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>在此，被隐式放置在缓冲区最后的0可以确保任何使用estrndup()实现字符串复制操作的函数都不需要担心会把结果缓冲区传递给一个例如printf()这样的希望以为NULL为结束符的函数。当使用estrndup()来复制非字符串数据时，最后一个字节实质上浪费了，但其中的利明显大于弊。<br>void <em>safe_emalloc(size_t size, size_t count, size_t addtl);<br>void </em>safe_pemalloc(size_t size, size_t count, size_t addtl, char persistent);<br>这些函数分配的内存空间最终大小都是((size*count)+addtl)。 你可以会问：”为什么还要提供额外函数呢？为什么不使用一个emalloc/pemalloc呢？”。 原因很简单：为了安全，以防万一。尽管有时候可能性相当小，但是，正是这一”可能性相当小”的结果导致宿主平台的内存溢出。 这可能会导致分配负数个数的字节空间，或更有甚者，会导致分配一个小于调用程序要求大小的字节空间。 而safe_emalloc()能够避免这种类型的陷井-通过检查整数溢出并且在发生这样的溢出时显式地预以结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;php的内存管理&quot;&gt;&lt;a href=&quot;#php的内存管理&quot; class=&quot;headerlink&quot; title=&quot;php的内存管理&quot;&gt;&lt;/a&gt;php的内存管理&lt;/h2&gt;&lt;p&gt;在PHP内核中，大多数情况下都不应该直接使用C语言中自带着malloc、free、strdup、realloc、calloc等操作内存的函数，而应使用内核提供的操作内存的函数，这样可以由内核整体统一的来管理内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内存泄露&lt;br&gt;每个平台操作内存的方式都是差不多的有两个方面，一负责申请，二负责释放。如果应用程序向系统申请内存，系统便会在内存中寻找还没有被使用的地方，如果有合适的，便分配给这个程序，并标记下来，不再给其它的程序了。如果一个内存块没有释放，而所有者应用程序也永远不再使用它了。&lt;br&gt;对于一些需要长时间运行的程序，比如像Apache这样的web服务器以及它的php模块来说，都是伴随着操作系统长时间运行的，所以OS在很长一段时间内不能主动的回收内存，从而导致这个程序的每一个内存泄漏都会促进量变到质变的进化，最终引起严重的内存泄漏错误，使系统的资源消耗殆尽。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Zend内存管理器&quot;&gt;&lt;a href=&quot;#Zend内存管理器&quot; class=&quot;headerlink&quot; title=&quot;Zend内存管理器&quot;&gt;&lt;/a&gt;Zend内存管理器&lt;/h2&gt;&lt;p&gt;使用Zend内存管理(Zend Memory Manager,简称ZendMM、ZMM)层。内核的这一部分非常类似于操作系统的内存管理功能——分配内存给调用程序。区别在于，它处于进程空间中非常低的位置而且是”请求感知”的；这样一来，当一个请求结束时，它能够执行与OS在一个进程终止时相同的行为。也就是说，它会隐式地释放所有的为该请求所占用的内存。图1展示了ZendMM与OS以及PHP进程之间的关系。&lt;br&gt;&lt;img src=&quot;/assets/blogImg/zend_manage.jpg&quot; alt=&quot;&amp;quot;我是傲娇的效果图&amp;quot;&quot;&gt;&lt;br&gt; 除了提供隐式的内存清除功能之外，ZendMM还能够根据php.ini中memory_limit设置来控制每一次内存请求行为，如果一个脚本试图请求比系统中可用内存更多的内存，或大于它每次应该请求的最大量，那么，ZendMM将自动地发出一个E_ERROR消息并且启动相应的终止进程。这种方法的一个额外优点在于，大多数内存分配调用的返回值并不需要检查，因为如果失败的话将会导致立即跳转到引擎的退出部分。&lt;br&gt; 所有内部分配的内存都要使用一组特定的可选函数实现。例如，PHP内核代码不是使用malloc(16)来分配一个16字节内存块而是使用了emalloc(16)。除了实现实际的内存分配任务外，ZendMM还会使用相应的绑定请求类型来标志该内存块；这样以来，当一个请求”跳出”时，ZendMM可以隐式地释放它。 有些时候，某次申请的内存需要在一个请求结束后仍然存活一段时间，也就是持续性存在于各个请求之间。这种类型的分配（因其在一次请求结束之后仍然存在而被称为”永久性分配”），可以使用传统型内存分配器来实现，因为这些分配并不会添加ZendMM使用的那些额外的相应于每种请求的信息。然而有时，我们必须在程序运行时根据某个数据的具体值或者状态才能确定是否需要进行永久性分配，因此ZendMM定义了一组帮助宏，其行为类似于其它的内存分配函数，但是使用最后一个额外参数来指示是否为永久性分配。 如果你确实想实现一个永久性分配，那么这个参数应该被设置为1；在这种情况下，请求是通过传统型malloc()分配器家族进行传递的。然而，如果运行时刻逻辑认为这个块不需要永久性分配；那么，这个参数可以被设置为零，并且调用将会被调整到针对每种请求的内存分配器函数。 例如，pemalloc(buffer_len，1)将映射到malloc(buffer_len)，而pemalloc(buffer_len，0)将被使用下列语句映射到emalloc(buffer_len)：&lt;br&gt; 所有这些在ZendMM中提供的内存管理函数都能够从下表中找到其在C语言中的函数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;C语言原生函数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;PHP内核封装后的函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void *malloc(size_t count);&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;void &lt;em&gt;emalloc(size_t count); void &lt;/em&gt;pemalloc(size_t count, char persistent);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void *calloc(size_t count);&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;void &lt;em&gt;ecalloc(size_t count); void &lt;/em&gt;pecalloc(size_t count, char persistent);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void &lt;em&gt;realloc(void &lt;/em&gt;ptr, size_t count);&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;void &lt;em&gt;erealloc(void &lt;/em&gt;ptr, size_t count); void &lt;em&gt;perealloc(void &lt;/em&gt;ptr, size_t count, char persistent);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void &lt;em&gt;strdup(void &lt;/em&gt;ptr);&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;void &lt;em&gt;estrdup(void &lt;/em&gt;ptr); void &lt;em&gt;pestrdup(void &lt;/em&gt;ptr, char persistent);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;void free(void *ptr);&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;void efree(void &lt;em&gt;ptr); void pefree(void &lt;/em&gt;ptr, char persistent);&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;你可能会注意到，即使是pefree()函数也要求使用永久性标志。这是因为在调用pefree()时，它实际上并不知道是否ptr是一种永久性分配。需要注意的是，如果针对一个ZendMM申请的非永久性内存直接调用free()能够导致双倍的空间释放，而针对一种永久性分配调用efree()有可能会导致一个段错误，因为ZendMM需要去查找并不存在的管理信息。因此，你的代码需要记住它申请的内存是否是永久性的，从而选择不同的内存函数，free()或者efree()。 除了上述内存管理函数外，还存在其它一些非常方便的ZendMM函数，例如： &lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;void *estrndup(void *ptr，int len);&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;该函数能够分配len+1个字节的内存并且从ptr处复制len个字节到最新分配的块。这个estrndup()函数的行为可以大致描述如下：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```c&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ZEND_API char *_estrndup(const char *s, uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        char *p;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        p = (char *) _emalloc(length+1 ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            if (UNEXPECTED(p == NULL))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        return p;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        memcpy(p, s, length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        p[length] = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return p;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php php扩展 c" scheme="http://graychen.git.io/tags/php-php%E6%89%A9%E5%B1%95-c/"/>
    
  </entry>
  
  <entry>
    <title>探索php中的变量zval结构体二</title>
    <link href="http://graychen.git.io/2017/06/20/%E6%8E%A2%E7%B4%A2php%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8Fzval%E7%BB%93%E6%9E%84%E4%BD%93%E4%BA%8C/"/>
    <id>http://graychen.git.io/2017/06/20/探索php中的变量zval结构体二/</id>
    <published>2017-06-20T09:04:13.000Z</published>
    <updated>2018-05-27T09:59:36.027Z</updated>
    
    <content type="html"><![CDATA[<p>上篇博文我们探索了php中的zval中的类型和值，现在我们探究下php的zval结构体中的:<br>       <code>zend_uint refcount__gc</code><br>       <code>zend_uchar is_ref__gc</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">        zvalue_value value; <span class="comment">/* 变量的值 */</span></div><div class="line">        zend_uchar type;    <span class="comment">/* 变量当前的数据类型 */</span></div><div class="line">        zend_uint refcount__gc; <span class="comment">/*  */</span></div><div class="line">        zend_uchar is_ref__gc;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zval_struct zval;</div></pre></td></tr></table></figure></p><p>php中的引用计数<br>先看例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$a = <span class="string">'Hello World'</span>;</div><div class="line">$b = $a;</div><div class="line"><span class="keyword">unset</span>($a);</div></pre></td></tr></table></figure><a id="more"></a><p>PHP变量的名称和值在php内核中是保存在两个不同的地方的，值是通过一个与名字毫无关系的zval结构来保存，而这个变量的名字a则保存在符号表里，两者之间通过指针联系着。在我们上面的例子里，$a是一个字符串，我们通过zend_hash_add把它添加到符号表里，然后又把它赋值给$b,两者拥有相同的内容！如果两者指向完全相同的内容，我们有什么优化措施吗？<br>这里我们主要讲解refcount<strong>gc这个成员。当一个变量被第一次创建的时候，它对应的zval结构体的refcount</strong>gc成员的值会被初始化为1，理由很简单，因为只有这个变量自己在用它。但是当你把这个变量赋值给别的变量时，refcount__gc属性便会加1变成2，因为现在有两个变量在用这个zval结构了！ 以上描述转为内核中的代码大体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">zval *helloval;</div><div class="line">MAKE_STD_ZVAL(helloval);</div><div class="line">ZVAL_STRING(helloval, <span class="string">"Hello World"</span>, <span class="number">1</span>);</div><div class="line">zend_hash_add(EG(active_symbol_table), <span class="string">"a"</span>, <span class="keyword">sizeof</span>(<span class="string">"a"</span>),&amp;helloval, <span class="keyword">sizeof</span>(zval*), <span class="literal">NULL</span>);</div><div class="line">ZVAL_ADDREF(helloval); <span class="comment">//这句很特殊，我们显式的增加了helloval结构体的refcount</span></div><div class="line">zend_hash_add(EG(active_symbol_table), <span class="string">"b"</span>, <span class="keyword">sizeof</span>(<span class="string">"b"</span>),&amp;helloval, <span class="keyword">sizeof</span>(zval*), <span class="literal">NULL</span>)</div></pre></td></tr></table></figure><p>这个时候当我们再用unset删除$a的时候，它删除符号表里的$a的信息，然后清理它的值部分，这时它发现$a的值对应的zval结构的refcount值是2，也就是有另外一个变量在一起用着这个zval，所以unset只需把这个zval的refcount减去1就行了！<br>引用计数绝对是节省内存的一个超棒的模式！但是当我们修改$b的值，而且还需要继续使用$a时，该怎么办呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = $a;</div><div class="line">$b += <span class="number">5</span>;</div></pre></td></tr></table></figure><p>从代码逻辑来看，我们希望语句执行后$a仍然是1，而$b则需要变成6。我们知道在第二句完成后内核通过让$a和$b共享一个zval结构来达到节省内存的目的，但是现在第三句来了，这时$b的改变应该怎样在内核中实现呢？ 答案非常简单，内核首先查看refcount__gc属性，如果它大于1则为这个变化的变量从原zval结构中复制出一份新的专属与$b的zval来，并改变其值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function">zval *<span class="title">get_var_and_separate</span><span class="params">(<span class="keyword">char</span> *varname, <span class="keyword">int</span> varname_len TSRMLS_DC)</span></span></div><div class="line">&#123;</div><div class="line">        zval **varval, *varcopy;</div><div class="line">        <span class="keyword">if</span> (zend_hash_find(EG(active_symbol_table),varname, varname_len + <span class="number">1</span>, (<span class="keyword">void</span>**)&amp;varval) == FAILURE)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">/* 如果在符号表里找不到这个变量则直接return */</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((*varval)-&gt;refcount &lt; <span class="number">2</span>)</div><div class="line">        &#123;   </div><div class="line">        <span class="comment">//如果这个变量的zval部分的refcount小于2，代表没有别的变量在用，return</span></div><div class="line">        <span class="keyword">return</span> *varval;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        <span class="comment">/* 否则，复制一份zval*的值 */</span></div><div class="line">        MAKE_STD_ZVAL(varcopy);</div><div class="line">        varcopy = *varval;</div><div class="line">            </div><div class="line">        <span class="comment">/* 复制任何在zval*内已分配的结构*/</span></div><div class="line">        zval_copy_ctor(varcopy);</div><div class="line"></div><div class="line">        <span class="comment">/* 从符号表中删除原来的变量</span></div><div class="line">         * 这将减少该过程中varval的refcount的值</div><div class="line">         */</div><div class="line">        zend_hash_del(EG(active_symbol_table), varname, varname_len + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">/* 初始化新的zval的refcount，并在符号表中重新添加此变量信息，并将其值与我们的新zval相关联。*/</span></div><div class="line">        varcopy-&gt;refcount = <span class="number">1</span>;</div><div class="line">        varcopy-&gt;is_ref = <span class="number">0</span>;</div><div class="line">        zend_hash_add(EG(active_symbol_table), varname, varname_len + <span class="number">1</span>,&amp;varcopy, <span class="keyword">sizeof</span>(zval*), <span class="literal">NULL</span>);</div><div class="line">            </div><div class="line">        <span class="comment">/* 返回新zval的地址 */</span></div><div class="line">        <span class="keyword">return</span> varcopy;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在$b变量拥有了自己的zval，并且可以自由的修改它的值了。<br>Change on Write</p><p>如果用户在PHP脚本中显式的让一个变量引用另一个变量时，我们的内核是如何处理的呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = &amp;$a;</div><div class="line">$b += <span class="number">5</span>;</div></pre></td></tr></table></figure><p>作为一个标准的PHP程序猿，我们都知道$a的值也变成6了。当我们更改$b的值时，内核发现$b是$a的一个用户端引用，也就是所它可以直接改变$b对应的zval的值，而无需再为它生成一个新的不同与$a的zval。因为他知道$a和$b都想得到这次变化！ 但是内核是怎么知道这一切的呢？简单的讲，它是通过zval的is_ref<strong>gc成员来获取这些信息的。这个成员只有两个值，就像开关的开与关一样。它的这两个状态代表着它是否是一个用户在PHP语言中定义的引用。在第一条语句($a = 1;)执行完毕后,$a对应的zval的refcount</strong>gc等于1，is_ref<strong>gc等于0;。 当第二条语句执行后($b = &amp;$a;)，refcount</strong>gc属性向往常一样增长为2，而且is_ref__gc属性也同时变为了1！ 最后，在执行第三条语句的时候，内核再次检查$b的zval以确定是否需要复制出一份新的zval结构来，这次不需要复制，因为我们刚才上面的get_var_and_separate函数其实是个简化版，并且少写了一个条件：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 如果这个zval在php语言中是通过引用的形式存在的，或者它的refcount小于2，则不需要复制。*/</span></div><div class="line"><span class="keyword">if</span> ((*varval)-&gt;is_ref || (*varval)-&gt;refcount &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> *varval;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这一次，尽管它的refcount等于2，但是因为它的is_ref等于1，所以也不会被复制。内核会直接的修改这个zval的值。<br>Separation Anxiety</p><p>我们已经了解了php语言中变量的复制和引用的一些事，但是如果复制和引用这两个事件被组合起来使用了该怎么办呢？看下面这段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = $a;</div><div class="line">$c = &amp;$a;</div></pre></td></tr></table></figure><p> <img src="/assets/blogImg/is_ref1.jpg" alt="&quot;我是傲娇的效果图&quot;"><br>这里我们可以看到,$a,$b,$c这三个变量现在共用一个zval结构，有两个属于change-on-write组合($a,$c),有两个属于copy-on-write组合($a,$b),我们的is_ref<strong>gc和refcount</strong>gc该怎样工作，才能正确的处理好这段复杂的关系呢？ The answer is: 不可能！在这种情况下，变量的值必须分离成两份完全独立的存在！$a与$c共用一个zval,$b自己用一个zval，尽管他们拥有同样的值，但是必须至少通过两个zval来实现。见图3.2【在引用时强制复制！】</p><p>同样，下面的这段代码同样会在内核中产生歧义，所以需要强制复制！<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//上图对应的代码</span></div><div class="line">$a = <span class="number">1</span>;</div><div class="line">$b = &amp;$a;</div><div class="line">$c = $a;</div></pre></td></tr></table></figure></p><p> <img src="/assets/blogImg/is_ref2.jpg" alt="&quot;我是傲娇的效果图&quot;"></p><p>需要注意的是，在这两种情况下，$b都与原初的zval相关联，因为当复制发生时，内核还不知道第三个变量的名字。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上篇博文我们探索了php中的zval中的类型和值，现在我们探究下php的zval结构体中的:&lt;br&gt;       &lt;code&gt;zend_uint refcount__gc&lt;/code&gt;&lt;br&gt;       &lt;code&gt;zend_uchar is_ref__gc&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zvalue_value value; &lt;span class=&quot;comment&quot;&gt;/* 变量的值 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uchar type;    &lt;span class=&quot;comment&quot;&gt;/* 变量当前的数据类型 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uint refcount__gc; &lt;span class=&quot;comment&quot;&gt;/*  */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uchar is_ref__gc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct zval;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;php中的引用计数&lt;br&gt;先看例子&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$a = &lt;span class=&quot;string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$b = $a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unset&lt;/span&gt;($a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php php扩展 c" scheme="http://graychen.git.io/tags/php-php%E6%89%A9%E5%B1%95-c/"/>
    
  </entry>
  
  <entry>
    <title>探索php中的变量zval结构体</title>
    <link href="http://graychen.git.io/2017/06/18/%E6%8E%A2%E7%B4%A2php%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8Fzval%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://graychen.git.io/2017/06/18/探索php中的变量zval结构体/</id>
    <published>2017-06-18T15:03:30.000Z</published>
    <updated>2018-05-27T09:59:36.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h2><p>php是动态语言，c是静态语言，php是c实现的，我以前一直不明白静态的c是怎么实现动态的php的，后面发现php的每个变量都是一个zval结构体，zval中的type存储真正的类型，根据type来获取zvalue_value的值.<br>注意这个php的版本是5.4,最新的php7结构体已经变更<br>PHP在内核中是通过zval这个结构体来存储变量的，它的定义在Zend/zend.h文件里，简短精炼，只有四个成员组成：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">        zvalue_value value; <span class="comment">/* 变量的值 */</span></div><div class="line">        zend_uchar type;    <span class="comment">/* 变量当前的数据类型 */</span></div><div class="line">        zend_uint refcount__gc;</div><div class="line">        zend_uchar is_ref__gc;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zval_struct zval;</div><div class="line"></div><div class="line"><span class="comment">//在Zend/zend_types.h里定义的：</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> zend_uint;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_uchar;</div></pre></td></tr></table></figure></p><a id="more"></a><p>保存变量值的value则是zvalue_value类型(PHP5)，它是一个union，同样定义在了Zend/zend.h文件里：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</div><div class="line">        <span class="keyword">long</span> lval;                  <span class="comment">/* long value */</span></div><div class="line">        <span class="keyword">double</span> dval;                <span class="comment">/* double value */</span></div><div class="line">        <span class="keyword">struct</span> &#123;</div><div class="line">                <span class="keyword">char</span> *val;</div><div class="line">                <span class="keyword">int</span> len;</div><div class="line">        &#125; str;</div><div class="line">        HashTable *ht;              <span class="comment">/* hash table value */</span></div><div class="line">        zend_object_value obj;</div><div class="line">&#125; zvalue_value;</div></pre></td></tr></table></figure></p><blockquote><p>PHP中常见的变量类型有：</p><ol><li>整型/浮点/长整型/bool值 等等</li><li>字符串</li><li>数组/关联数组</li><li>对象</li><li>资源</li></ol></blockquote><p>PHP根据zval中的type字段来储存一个变量的真正类型，然后根据type来选择如何获取zvalue_value的值，比如对于整型和bool值:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zval.type = IS_LONG;<span class="comment">//整形</span></div><div class="line">zval.type = IS_BOOL;<span class="comment">//布尔值</span></div></pre></td></tr></table></figure><p>就去取zval.value.lval,对于bool值来说lval∈(0|1);<br>如果是双精度，或者float则会去取zval.value的dval。<br>而如果是字符串，那么:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zval.type = IS_STRING</div></pre></td></tr></table></figure><p>这个时候，就会取:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zval.value.str</div></pre></td></tr></table></figure><p>而这个也是个结构，存有C分格的字符串和字符串的长度。<br>而对于数组和对象，则type分别对应IS_ARRAY, IS_OBJECT, 相对应的则分别取zval.value.ht和obj<br>比较特别的是资源，在PHP中，资源是个很特别的变量，任何不属于PHP内建的变量类型的变量，都会被看作成资源来进行保存，比如，数据库句柄，打开的文件句柄等等。 对于资源:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type = IS_RESOURCE</div></pre></td></tr></table></figure><h2 id="变量类型的实现"><a href="#变量类型的实现" class="headerlink" title="变量类型的实现"></a>变量类型的实现</h2><p>在以上实现的基础上，PHP语言得以实现了8种数据类型，这些数据类型在内核中的分别对应于特定的常量，它们分别是：</p><table><thead><tr><th style="text-align:left">常量名称：</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:left">IS_NULL</td><td style="text-align:center">第一次使用的变量如果没有初始化过，则会自动的被赋予这个常量，当然我们也可以在PHP语言中通过null这个常量来给予变量null类型的值。 这个类型的值只有一个 ，就是NULL，它和0与false是不同的。</td></tr><tr><td style="text-align:left">IS_BOOL</td><td style="text-align:center">布尔类型的变量有两个值，true或者false。在PHP语言中，while、if等语句会自动的把表达式的值转成这个类型的。</td></tr><tr><td style="text-align:left">IS_LONG</td><td style="text-align:center">PHP语言中的整型，在内核中是通过所在操作系统的signed long数据类型来表示的。 在最常见的32位操作系统中，它可以存储从-2147483648 到 +2147483647范围内的任一整数。 有一点需要注意的是，如果PHP语言中的整型变量超出最大值或者最小值，它并不会直接溢出， 而是会被内核转换成IS_DOUBLE类型的值然后再参与计算。 再者，因为使用了signed long来作为载体，所以这也就解释了为什么PHP语言中的整型数据都是带符号的了。</td></tr><tr><td style="text-align:left">IS_DOUBLE</td><td style="text-align:center">PHP中的浮点数据是通过C语言中的signed double型变量来存储的， 这最终取决与所在操作系统的浮点型实现。 我们做为程序猿，应该知道计算机是无法精准的表示浮点数的， 而是采用了科学计数法来保存某个精度的浮点数。 用科学计数法，计算机只用8位便可以保存2.225x10^(-308)~~1.798x10^308之间的浮点数。 用计算机来处理浮点数简直就是一场噩梦，十进制的0.5转成二进制是0.1， 0.8转换后是0.1100110011….。 但是当我们从二进制转换回来的时候，往往会发现并不能得到0.8。 我们用1除以3这个例子来解释这个现象：1/3=0.3333333333…..，它是一个无限循环小数， 但是计算机可能只能精确存储到0.333333，当我们再乘以三时， 其实计算机计算的数是0.333333*3=0.999999，而不是我们平时数学中所期盼的1.0.</td></tr><tr><td style="text-align:left">IS_STRING</td><td style="text-align:center">PHP中最常用的数据类型——字符串，在内存中的存储和C差不多， 就是一块能够放下这个变量所有字符的内存，并且在这个变量的zval实现里会保存着指向这块内存的指针。 与C不同的是，PHP内核还同时在zval结构里保存着这个字符串的实际长度， 这个设计使PHP可以在字符串中嵌入‘\0’字符，也使PHP的字符串是二进制安全的， 可以安全的存储二进制数据！本着艰苦朴素的作风，内核只会为字符串申请它长度+1的内存， 最后一个字节存储的是‘\0’字符，所以在不需要二进制安全操作的时候， 我们可以像通常C语言的方式那样来使用它。</td></tr><tr><td style="text-align:left">IS_ARRAY</td><td style="text-align:center">数组是一个非常特殊的数据类型，它唯一的功能就是聚集别的变量。 在C语言中，一个数组只能承载一种类型的数据，而PHP语言中的数组则灵活的多， 它可以承载任意类型的数据，这一切都是HashTable的功劳， 每个HashTable中的元素都有两部分组成：索引与值， 每个元素的值都是一个独立的zval（确切的说应该是指向某个zval的指针）。</td></tr><tr><td style="text-align:left">IS_OBJECT</td><td style="text-align:center">和数组一样，对象也是用来存储复合数据的，但是与数组不同的是， 对象还需要保存以下信息：方法、访问权限、类常量以及其它的处理逻辑。 相对与zend engine V1，V2中的对象实现已经被彻底修改， 所以我们PHP扩展开发者如果需要自己的扩展支持面向对象的工作方式， 则应该对PHP5和PHP4分别对待！</td></tr><tr><td style="text-align:left">IS_RESOURCE</td><td style="text-align:center">有一些数据的内容可能无法直接呈现给PHP用户的， 比如与某台mysql服务器的链接，或者直接呈现出来也没有什么意义。 但用户还需要这类数据，因此PHP中提供了一种名为Resource(资源)的数据类型。 有关这个数据类型的事宜将在第九章中介绍，现在我们只要知道有这么一种数据类型就行了。</td></tr></tbody></table><p>zval结构体里的type成员的值便是以上某个IS_*常量之一。php的内核通过检测变量的这个成员值来知道他是什么类型的数据并做相应的后续处理。<br>如果要我们检测一个变量的类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">describe_zval</span><span class="params">(zval *foo)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span> ( Z_TYPE_P(foo) == IS_NULL  )</div><div class="line">        &#123;</div><div class="line">                    php_printf(<span class="string">"这个变量的数据类型是： NULL"</span>);</div><div class="line">                        </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">                    php_printf(<span class="string">"这个变量的数据类型不是NULL，这种数据类型对应的数字是： %d"</span>, Z_TYPE_P(foo));</div><div class="line">                        </div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>以一个P结尾的宏的参数大多是<em>zval型变量。 此外获取变量类型的宏还有两个，分别是Z_TYPE和Z_TYPE_PP，前者的参数是zval型，而后者的参数则是*</em>zval。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开始定义php语言中的函数gettype</span></div><div class="line">PHP_FUNCTION(gettype)</div><div class="line">&#123;</div><div class="line">    <span class="comment">//arg间接指向调用gettype函数时所传递的参数。是一个zval**结构</span></div><div class="line">    <span class="comment">//所以我们要对他使用__PP后缀的宏。</span></div><div class="line">    zval **arg;</div><div class="line"></div><div class="line">    <span class="comment">//这个if的操作主要是让arg指向参数～</span></div><div class="line">    <span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"Z"</span>, &amp;arg) == FAILURE) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">                    </div><div class="line">    <span class="comment">//调用Z_TYPE_PP宏来获取arg指向zval的类型。</span></div><div class="line">    <span class="comment">//然后是一个switch结构，RETVAL_STRING宏代表这gettype函数返回的字符串类型的值</span></div><div class="line">    <span class="keyword">switch</span> (Z_TYPE_PP(arg)) &#123;</div><div class="line">        <span class="keyword">case</span> IS_NULL:</div><div class="line">            RETVAL_STRING(<span class="string">"NULL"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_BOOL:</div><div class="line">            RETVAL_STRING(<span class="string">"boolean"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_LONG:</div><div class="line">            RETVAL_STRING(<span class="string">"integer"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_DOUBLE:</div><div class="line">            RETVAL_STRING(<span class="string">"double"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_STRING:</div><div class="line">            RETVAL_STRING(<span class="string">"string"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_ARRAY:</div><div class="line">            RETVAL_STRING(<span class="string">"array"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_OBJECT:</div><div class="line">            RETVAL_STRING(<span class="string">"object"</span>, <span class="number">1</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> IS_RESOURCE:</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">char</span> *type_name;</div><div class="line">            type_name = zend_rsrc_list_get_rsrc_type(Z_LVAL_PP(arg) TSRMLS_CC);</div><div class="line">            <span class="keyword">if</span> (type_name) &#123;</div><div class="line">                RETVAL_STRING(<span class="string">"resource"</span>, <span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">                    RETVAL_STRING(<span class="string">"unknown type"</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上三个宏的定义在Zend/zend_operators.h里，定义分别是：</p><p>#define Z_TYPE(zval)        (zval).type</p><p>#define Z_TYPE_P(zval_p)    Z_TYPE(*zval_p)</p><p>#define Z_TYPE_PP(zval_pp)  Z_TYPE(**zval_pp)</p><h2 id="变量值的实现"><a href="#变量值的实现" class="headerlink" title="变量值的实现"></a>变量值的实现</h2><p>PHP内核提供了三个基础宏来方便我们对变量的值进行操作，这几个宏同样以Z_开头.<br>内核中针对具体的数据类型分别定义了相应的宏。 如针对IS_BOOL型的BVAL组合(Z_BVAL、Z_BVAL_P、Z_BVAL_PP)和针对IS_DOUBLE的DVAL组合(Z_DVAL、ZDVAL_P、ZDVAL_PP)等等。 我们通过下面这个例子来应用一下这几个宏:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_value</span><span class="params">(zval zv,zval *zv_p,zval **zv_pp)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>( Z_TYPE(zv) == IS_NULL)</div><div class="line">    &#123;</div><div class="line">                php_printf(<span class="string">"类型是 IS_NULL!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>( Z_TYPE_P(zv_p) == IS_LONG)</div><div class="line">    &#123;</div><div class="line">                php_printf(<span class="string">"类型是 IS_LONG，值是：%ld"</span> , Z_LVAL_P(zv_p));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(Z_TYPE_PP(zv_pp) == IS_DOUBLE)</div><div class="line">    &#123;</div><div class="line">                php_printf(<span class="string">"类型是 IS_DOUBLE,值是：%f"</span> , Z_DVAL_PP(zv_pp) );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>string型变量比较特殊，因为内核在保存String型变量时，不仅保存了字符串的值，还保存了它的长度， 所以它有对应的两种宏组合STRVAL和STRLEN，即：Z_STRVAL、Z_STRVAL_P、Z_STRVAL_PP与Z_STRLEN、Z_STRLEN_P、Z_STRLEN_PP。 前一种宏返回的是char *型，即字符串的地址；后一种返回的是int型，即字符串的长度。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_string</span><span class="params">(zval *zstr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (Z_TYPE_P(zstr) != IS_STRING) &#123;</div><div class="line">        php_printf(<span class="string">"这个变量不是字符串!\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    PHPWRITE(Z_STRVAL_P(zstr), Z_STRLEN_P(zstr));</div><div class="line">    <span class="comment">//这里用了PHPWRITE宏，只要知道它是从Z_STRVAL_P(zstr)地址开始，输出Z_STRLEN_P(zstr)长度的字符就可以了。</span></div><div class="line">&#125;       </div><div class="line"> ```       </div><div class="line">Array型变量的值其实是存储在C语言实现的HashTable中的， 我们可以用ARRVAL组合宏（Z_ARRVAL, Z_ARRVAL_P, Z_ARRVAL_PP）这三个宏来访问数组的值。 如果你看旧版本php的源码或者部分pecl扩展的源码，可能会发现一个HASH_OF()宏，这个宏等价于Z_ARRVAL_P()。 但不推荐在新代码中再使用了。</div><div class="line">对象是一个复杂的结构体（zend_object_value结构体），不仅存储属性的定义、属性的值，还存储着访问权限、方法等信息。 内核中定义了以下组合宏让我们方便的操作对象： OBJ_HANDLE：返回handle标识符， OBJ_HT：handle表， OBJCE：类定义， OBJPROP：HashTable的属性， OBJ_HANDLER：在OBJ_HT中操作一个特殊的handler方法。 现在不用担心这些宏对象的意思，后续有专门的章节介绍object。</div><div class="line">资源型变量的值其实就是一个整数，可以用RESVAL组合宏来访问它，我们把它的值传给zend_fetch_resource函数，便可以得到这个资源的操作句柄，如mysql的链接句柄等。</div><div class="line">有关值操作的宏都定义在./Zend/zend_operators.h文件里：</div><div class="line">``` c</div><div class="line"><span class="comment">//操作整数的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_LVAL(zval)            (zval).value.lval</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_LVAL_P(zval_p)        Z_LVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_LVAL_PP(zval_pp)      Z_LVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="comment">//操作IS_BOOL布尔型的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_BVAL(zval)            ((zend_bool)(zval).value.lval)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_BVAL_P(zval_p)        Z_BVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_BVAL_PP(zval_pp)      Z_BVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="comment">//操作浮点数的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_DVAL(zval)            (zval).value.dval</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_DVAL_P(zval_p)        Z_DVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_DVAL_PP(zval_pp)      Z_DVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="comment">//操作字符串的值和长度的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRVAL(zval)          (zval).value.str.val</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRVAL_P(zval_p)      Z_STRVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRVAL_PP(zval_pp)        Z_STRVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRLEN(zval)          (zval).value.str.len</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRLEN_P(zval_p)      Z_STRLEN(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_STRLEN_PP(zval_pp)        Z_STRLEN(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_ARRVAL(zval)          (zval).value.ht</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_ARRVAL_P(zval_p)      Z_ARRVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_ARRVAL_PP(zval_pp)        Z_ARRVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="comment">//操作对象的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJVAL(zval)          (zval).value.obj</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJVAL_P(zval_p)      Z_OBJVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJVAL_PP(zval_pp)        Z_OBJVAL(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLE(zval)      Z_OBJVAL(zval).handle</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLE_P(zval_p)      Z_OBJ_HANDLE(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLE_PP(zval_p)     Z_OBJ_HANDLE(**zval_p)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HT(zval)          Z_OBJVAL(zval).handlers</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HT_P(zval_p)      Z_OBJ_HT(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HT_PP(zval_p)     Z_OBJ_HT(**zval_p)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJCE(zval)           zend_get_class_entry(&amp;(zval) TSRMLS_CC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJCE_P(zval_p)       Z_OBJCE(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJCE_PP(zval_pp)     Z_OBJCE(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJPROP(zval)         Z_OBJ_HT((zval))-&gt;get_properties(&amp;(zval) TSRMLS_CC)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJPROP_P(zval_p)     Z_OBJPROP(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJPROP_PP(zval_pp)       Z_OBJPROP(**zval_pp)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLER(zval, hf)     Z_OBJ_HT((zval))-&gt;hf</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLER_P(zval_p, h)  Z_OBJ_HANDLER(*zval_p, h)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJ_HANDLER_PP(zval_p, h)     Z_OBJ_HANDLER(**zval_p, h)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJDEBUG(zval,is_tmp)     (Z_OBJ_HANDLER((zval),get_debug_info)?  \</span></div><div class="line">                        Z_OBJ_HANDLER((zval),get_debug_info)(&amp;(zval),&amp;is_tmp TSRMLS_CC): \</div><div class="line">                                                (is_tmp=0,Z_OBJ_HANDLER((zval),get_properties)?Z_OBJPROP(zval):NULL)) </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJDEBUG_P(zval_p,is_tmp) Z_OBJDEBUG(*zval_p,is_tmp) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_OBJDEBUG_PP(zval_pp,is_tmp)   Z_OBJDEBUG(**zval_pp,is_tmp)</span></div><div class="line"></div><div class="line"><span class="comment">//操作资源的</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_RESVAL(zval)          (zval).value.lval</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_RESVAL_P(zval_p)      Z_RESVAL(*zval_p)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Z_RESVAL_PP(zval_pp)        Z_RESVAL(**zval_pp)</span></div><div class="line">```     </div><div class="line">#<span class="meta"># php的类型转换</span></div><div class="line">php内核中提供了好多函数专门来帮我们实现类型转换的功能，你需要的只是调用一个函数而已。这一类函数有一个统一的形式：convert_to_*()</div><div class="line">``` c</div><div class="line"><span class="comment">//将任意类型的zval转换成字符串</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_zval_to_string</span><span class="params">(zval *value)</span></span></div><div class="line">&#123;</div><div class="line">        convert_to_string(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//其它基本的类型转换函数</span></div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_long</span><span class="params">(zval *op)</span></span>;</div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_double</span><span class="params">(zval *op)</span></span>;</div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_null</span><span class="params">(zval *op)</span></span>;</div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_boolean</span><span class="params">(zval *op)</span></span>;</div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_array</span><span class="params">(zval *op)</span></span>;</div><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> <span class="title">convert_to_object</span><span class="params">(zval *op)</span></span>;</div><div class="line"></div><div class="line">ZEND_API <span class="keyword">void</span> _convert_to_string(zval *op ZEND_FILE_LINE_DC);</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> convert_to_string(op) <span class="meta-keyword">if</span> ((op)-&gt;type != IS_STRING) &#123; _convert_to_string((op) ZEND_FILE_LINE_CC);  &#125;</span></div></pre></td></tr></table></figure></p><p>这里面有两个比较特殊，一个就是convert_to_string其实是一个宏函数，调用的另外一个函数；第二个便是没有convert_to_resource()的转换函数，因为资源的值在用户层面上，根本就没有意义，内核不会对它的值(不是指那个数字)进行转换。<br>注意，并不是所有的内存分配例程都有一个相应的p*对等实现。例如，不存在pestrndup()，并且在PHP 5.1版本前也不存在safe_pemalloc()。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的类型&quot;&gt;&lt;a href=&quot;#变量的类型&quot; class=&quot;headerlink&quot; title=&quot;变量的类型&quot;&gt;&lt;/a&gt;变量的类型&lt;/h2&gt;&lt;p&gt;php是动态语言，c是静态语言，php是c实现的，我以前一直不明白静态的c是怎么实现动态的php的，后面发现php的每个变量都是一个zval结构体，zval中的type存储真正的类型，根据type来获取zvalue_value的值.&lt;br&gt;注意这个php的版本是5.4,最新的php7结构体已经变更&lt;br&gt;PHP在内核中是通过zval这个结构体来存储变量的，它的定义在Zend/zend.h文件里，简短精炼，只有四个成员组成：&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zvalue_value value; &lt;span class=&quot;comment&quot;&gt;/* 变量的值 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uchar type;    &lt;span class=&quot;comment&quot;&gt;/* 变量当前的数据类型 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uint refcount__gc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        zend_uchar is_ref__gc;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _zval_struct zval;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在Zend/zend_types.h里定义的：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; zend_uint;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; zend_uchar;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php php扩展 c" scheme="http://graychen.git.io/tags/php-php%E6%89%A9%E5%B1%95-c/"/>
    
  </entry>
  
  <entry>
    <title>Codeception测试框架如何编写测试</title>
    <link href="http://graychen.git.io/2017/06/18/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E6%B5%8B%E8%AF%95/"/>
    <id>http://graychen.git.io/2017/06/18/如何编写测试/</id>
    <published>2017-06-18T05:38:51.000Z</published>
    <updated>2018-05-27T09:59:36.037Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何编写测试"><a href="#如何编写测试" class="headerlink" title="如何编写测试"></a>如何编写测试</h2><p>Yii2高级应用程序使用Codeception作为其主要测试框架。</p><h3 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><p>为了运行测试用例，你需要安装 Codeception 。 一个较好的安装方式是：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">composer <span class="keyword">global</span> <span class="keyword">require</span> <span class="string">"codeception/codeception=2.1.*"</span></div><div class="line">composer <span class="keyword">global</span> <span class="keyword">require</span> <span class="string">"codeception/specify=*"</span></div><div class="line">composer <span class="keyword">global</span> <span class="keyword">require</span> <span class="string">"codeception/verify=*"</span></div></pre></td></tr></table></figure></p><p>创建测试目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codecept bootstrap</div></pre></td></tr></table></figure></p><p>构建测试套件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codecept build</div></pre></td></tr></table></figure></p><p>如果测试需要在 Production 环境中执行， yii_test 和 yii_test.bat 必须从 environments/dev 文件夹手动复制到项目根目录。 测试需要一个 额外的数据库 ，这将在测试之间清除。 在mysql中创建数据库 yii2advanced_test （根据 common/config/test.php 中的配置）并执行：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./yii_test migrate</div></pre></td></tr></table></figure></p><a id="more"></a><p>然后所有的样例测试可以通过运行如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codecept run</div></pre></td></tr></table></figure></p><p>docker环境下运行搭建并运行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker exec -it health_web_1 ./vendor/bin/codecept boostrap</div><div class="line">docker exec -it health_web_1 ./vendor/bin/./yii_test migrate</div><div class="line">docker exec -it health_web_1 ./vendor/bin/codecept build</div><div class="line">docker exec -it health_web_1 ./vendor/bin/codecept run</div></pre></td></tr></table></figure></p><p>测试套件描述：</p><ul><li>unit ⇒ 单元测试,对程序模块(类中的方法)来进行正确性检验的测试工作（主要）。</li><li>api ⇒ api接口测试(主要)。</li><li>functional ⇒ 功能测试，应用程序内部请求/响应（无Web服务器）。</li><li>acceptance ⇒ 验收测试，web应用程序，用户界面和javascript交互。</li></ul><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> docker <span class="built_in">exec</span> -it usercenter_web_1 bash</div><div class="line">//或者</div><div class="line"> docker <span class="built_in">exec</span> -it health_web_1 /bin/sh</div><div class="line">./vendor/bin/codecept run -c tests</div></pre></td></tr></table></figure><p>-c 指定目录<br>api测试需要启动一个web服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -S localhost:80 --docroot api/tests &amp;&gt;/dev/null&amp;</div></pre></td></tr></table></figure></p><h2 id="搭建测试环境-1"><a href="#搭建测试环境-1" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h2><p>目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">├── codeception</div><div class="line">│   ├── api  //api测试</div><div class="line">│   ├── api.suite.yml  //api测试配置</div><div class="line">│   ├── _bootstrap.php</div><div class="line">│   ├── _data</div><div class="line">│   │   └── dump.sql  //初始化sql</div><div class="line">│   ├── _output  //日志</div><div class="line">│   ├── _support                                                    </div><div class="line">│   ├── unit</div><div class="line">│   │   ├── _bootstrap.php   //依赖文件</div><div class="line">│   │   ├── models</div><div class="line">│   │   │   ├── ActivityConfigTest.php  //单元测试</div><div class="line">│   │   └── UnitTester.php</div><div class="line">│   └── unit.suite.yml  //单元测试配置文件</div><div class="line">├── codeception.yml</div><div class="line">├── _envs</div><div class="line">├── _output</div><div class="line">└── _support</div><div class="line">    └── _generated</div></pre></td></tr></table></figure><p>在根目录运行codecept bootstrap 创建test目录和codeception.yml 文件</p><h3 id="api测试详解"><a href="#api测试详解" class="headerlink" title="api测试详解"></a>api测试详解</h3><p>API测试在功能测试级别完成，但是不是测试用户操作的HTML响应，而是通过REST或SOAP等协议来测试请求和响应。要开始写api测试，你应该为他们创建一个套件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/bin/codecept g:suite api</div></pre></td></tr></table></figure></p><p>您将需要启用REST，Yii2模块tests/api.suite.yml：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class_name: ApiTester</div><div class="line">modules:</div><div class="line">    enabled:</div><div class="line">        - REST:</div><div class="line">            url: /api/v1</div><div class="line">            depends: Yii2</div><div class="line">        - \ApiBundle\Helper\Api</div><div class="line">    config:</div><div class="line">        - Yii2</div></pre></td></tr></table></figure></p><p>Yii2模块操作amOnPage或see不应该可用于测试API。这就是为什么Yii2模块没有被启用，但被声明depends为REST模块。</p><p><a href="http://codeception.com/docs/10-WebServices#REST" target="_blank" rel="noopener">继续执行REST API测试指南»</a></p><h3 id="单位测试详解"><a href="#单位测试详解" class="headerlink" title="单位测试详解"></a>单位测试详解</h3><p>单元测试位于tests/unit目录中，应包含所有类型的单元和集成测试。</p><p>每个测试用例扩展Codeception\Test\Unit类，这是单元测试的标准Codeception格式。在Yii中开发完全隔离的单元测试是非常困难的，所以在每个测试用例之前应用程序是自举的。tests/unit.suite.yml使用Yii2模块启用测试配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">modules:</div><div class="line">    enabled:</div><div class="line">      - Yii2:</div><div class="line">            part: [orm, email]</div></pre></td></tr></table></figure></p><p>该模块启动测试用例的Yii应用程序，并提供其他帮助方法来简化测试。它只有orm和email零件，以排除需要的只是功能性的测试方法。</p><p>通过访问测试用例中的$this-&gt;tester类可以使用Yii2模块的方法。因此，如果您已启用orm和电子邮件部件，以便您可以调用属于这些部分的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// insert records in database</div><div class="line">$this-&gt;tester-&gt;haveRecord(&apos;app/model/User&apos;, [&apos;username&apos; =&gt; &apos;davert&apos;]);</div><div class="line">// check records in database</div><div class="line">$this-&gt;tester-&gt;seeRecord(&apos;app/model/User&apos;, [&apos;username&apos; =&gt; &apos;davert&apos;]);</div><div class="line">// test email was sent</div><div class="line">$this-&gt;tester-&gt;seeEmailIsSent();</div><div class="line">// get a last sent emails</div><div class="line">$this-&gt;tester-&gt;grabLastSentEmail();</div></pre></td></tr></table></figure></p><p>如果启用fixtures部件，您还将获得在测试中加载和使用灯具的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// load fixtures</div><div class="line">$this-&gt;tester-&gt;haveFixtures([</div><div class="line">    &apos;user&apos; =&gt; [</div><div class="line">        &apos;class&apos; =&gt; UserFixture::className(),</div><div class="line">        // fixture data located in tests/_data/user.php</div><div class="line">        &apos;dataFile&apos; =&gt; codecept_data_dir() . &apos;user.php&apos;</div><div class="line">    ]</div><div class="line">]);</div><div class="line">// get first user from fixtures</div><div class="line">$this-&gt;tester-&gt;grabFixture(&apos;user&apos;, 0);</div></pre></td></tr></table></figure></p><p>如果Yii2模块启用，您可以安全地调用Yii::$app测试内容，因为应用程序在测试后被初始化和清理。如果你想为你的测试用例添加你的帮助方法或者自定义的断言，你不应该扩展，Codeception\Test\Unit而是写出你自己的单独的Helper类。</p><p><a href="http://codeception.com/docs/05-UnitTests" target="_blank" rel="noopener">继续进行单元测试指南»</a></p><h3 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h3><p>当测试Web应用程序的实际功能时，您不能仅使用单元测试。你想测试应用程序如何处理请求，它提供什么响应，什么数据保存到数据库等等。要在近用户环境中测试应用程序，但不启动真正的Web服务器或浏览器，您可以使用功能测试。它们的写法远比单元测试简单得多。他们在简单的DSL中描述交互场景，所以您不需要直接处理应用程序，而是从用户的角度描述动作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$I-&gt;amOnPage([&apos;site/contact&apos;]);</div><div class="line">$I-&gt;submitForm(&apos;#contact-form&apos;, []);</div><div class="line">$I-&gt;expectTo(&apos;see validations errors&apos;);</div><div class="line">$I-&gt;see(&apos;Contact&apos;, &apos;h1&apos;);</div><div class="line">$I-&gt;see(&apos;Name cannot be blank&apos;);</div><div class="line">$I-&gt;see(&apos;Email cannot be blank&apos;);</div><div class="line">$I-&gt;see(&apos;Subject cannot be blank&apos;);</div><div class="line">$I-&gt;see(&apos;Body cannot be blank&apos;);</div></pre></td></tr></table></figure></p><p>这样，您不仅可以在站点上测试ContactForm，而且还可以实际输出用户看到的应用程序。Codeception提供了一套标准的动作一样amOnPage，submitForm，see进行测试。Yii2模块提供了特殊的方法，如amLoggedInAs（快速认证）haveRecord，seeRecord，seeEmailIsSent和其他人。它们都列在模块引用中。</p><p>功能测试应该写在Cest 文件中，这是一个场景驱动的Codeception测试格式。您可以通过运行以下方式轻松创建新测试：</p><p>./vendor/bin/codecept g:cest functional MyNewScenarioCest<br> 功能测试非常强大而简单。强烈推荐使用任何Yii应用程序。</p><p><a href="http://codeception.com/docs/04-FunctionalTests" target="_blank" rel="noopener">继续进行功能测试指南»</a></p><h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><p>从测试的角度来看，验收测试与功能测试相同。他们测试用户与应用程序的交互，但在这种情况下使用真正的浏览器和Web服务器。它们慢得多，脆弱得多。他们不应该在测试功能的问题上重复功能测试，而应该用于测试应用程序的UI。如果您不确定哪些测试应该被接受，哪些是功能性的，那么写入JavaScript丰富应用程序的接受测试，其中UI高度依赖于浏览器处理。您还可以使用快乐路径场景的验收测试，以确保使用真实浏览器的真实用户在功能测试中达到相同的结果。</p><p>默认情况下，基本应用验收测试被禁用（因为它们需要Web服务器，Selenium服务器和浏览器才能运行）。您可以轻松地通过重命名使他们acceptance.suite.yml.example对acceptance.suite.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv tests/acceptance.suite.yml.example tests/acceptance.suite.yml</div><div class="line">基本模板使用codeception/base不包含facebook/webdriver运行验收测试所需库的软件包。请更改codeception/base为codeception/codeceptionin composer.json并运行update命令。</div></pre></td></tr></table></figure></p><p>那么您将需要在测试模式下启动应用服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./tests/bin/yii serve</div></pre></td></tr></table></figure></p><p>并启动Selenium Server或PhantomJS。对于接受使用WebDriver模块。请检查其参考资料，了解如何使用它。与Yii2模块不同，它对应用程序一无所知，因此，如果要使用Yii像夹具的功能进行验收测试，则应检查是否启用Yii2模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># config at tests/acceptance.yml</div><div class="line">modules:</div><div class="line">    enabled:</div><div class="line">        - WebDriver:</div><div class="line">            url: http://127.0.0.1:8080/</div><div class="line">            browser: firefox</div><div class="line">        - Yii2:</div><div class="line">            part: [orm, fixtures] # allow to use AR methods</div><div class="line">            cleanup: false # don&apos;t wrap test in transaction</div><div class="line">            entryScript: index-test.php</div></pre></td></tr></table></figure></p><p>正如所说，功能和验收测试是相似的，所以为了避免与这些模块的冲突，你应该只加载你真正需要的Yii2模块的一部分。您还必须将cleanup: falseYii2更改设置为数据库，以便在Web服务器上运行的应用程序进行保存和使用。使用entryScript和entryUrl值可以更改应用程序的默认主机和脚本配置。</p><p>与功能测试类似，建议使用Cest格式进行验收测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/bin/codecept g:cest acceptance MyNewScenarioCest</div></pre></td></tr></table></figure></p><p><a href="http://codeception.com/docs/03-AcceptanceTests" target="_blank" rel="noopener">继续验收测试指南»</a></p><h3 id="手动设置-amp-amp-配置"><a href="#手动设置-amp-amp-配置" class="headerlink" title="手动设置&amp;&amp;配置"></a>手动设置&amp;&amp;配置</h3><p>要开始，您需要通过Composer安装Codeception<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require &quot;codeception/codeception&quot; --dev</div></pre></td></tr></table></figure></p><p>创建基本的测试套件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./vendor/bin/codecept bootstrap</div></pre></td></tr></table></figure></p><p>启用模块Yii2进行功能测试functional.suite.yml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># functional.suite.yml</div><div class="line">modules:</div><div class="line">    enabled:</div><div class="line">        - Yii2:</div><div class="line">            configFile: #insert path to config file</div></pre></td></tr></table></figure></p><p>Yii2模块唯一必需的参数是configFile。该文件配置为Yii应用程序的测试配置。它应该合并原始应用程序配置覆盖id值，并提供不同的数据库进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// config/test.php</div><div class="line">$config =  yii\helpers\ArrayHelper::merge(</div><div class="line">    require(__DIR__ . &apos;/main.php&apos;),</div><div class="line">    require(__DIR__ . &apos;/main-local.php&apos;),</div><div class="line">    [</div><div class="line">        &apos;id&apos; =&gt; &apos;app-tests&apos;,</div><div class="line">        &apos;components&apos; =&gt; [</div><div class="line">            &apos;db&apos; =&gt; [</div><div class="line">                &apos;dsn&apos; =&gt; &apos;mysql:host=localhost;dbname=yii_app_test&apos;,</div><div class="line">            ]</div><div class="line">        ]        </div><div class="line">    ]</div><div class="line">);</div><div class="line">return $config;</div></pre></td></tr></table></figure></p><p>测试配置建议存储在应用程序的config文件夹中。您应该提供相对于codeception.yml文件测试配置的路径。</p><p>还请确保YII_ENV常数设置为test，因为它是在做tests/_bootstrap.php的基本的和高级的应用程序模板文件。</p><p>一旦配置功能测试，就可以轻松地创建单元和验收测试的设置，如本指南中所述。</p><p>在基础和高级应用程序模板configFile中定义了全局配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># inside codeception.yml</div><div class="line">modules:</div><div class="line">    config:</div><div class="line">        Yii2:</div><div class="line">            configFile: &apos;config/test.php&apos;</div></pre></td></tr></table></figure></p><p>这样我们不需要为每个定义的套件提供测试配置。</p><h3 id="伪数据生成器"><a href="#伪数据生成器" class="headerlink" title="伪数据生成器"></a>伪数据生成器</h3><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer require fzaninotto/faker</div></pre></td></tr></table></figure></p><p>使用Faker\Factory::create()创建和初始化一个摊贩发生器，可通过访问你想要的数据类型来命名的属性生成的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// require the Faker autoloader</div><div class="line">require_once &apos;/path/to/Faker/src/autoload.php&apos;;</div><div class="line">// alternatively, use another PSR-0 compliant autoloader (like the Symfony2 ClassLoader for instance)</div><div class="line"></div><div class="line">// use the factory to create a Faker\Generator instance</div><div class="line">$faker = Faker\Factory::create();</div><div class="line"></div><div class="line">// generate data by accessing properties</div><div class="line">echo $faker-&gt;name;</div><div class="line">  // &apos;Lucy Cechtelar&apos;;</div><div class="line">echo $faker-&gt;address;</div><div class="line">  // &quot;426 Jordy Lodge</div><div class="line">  // Cartwrightshire, SC 88120-6700&quot;</div><div class="line">echo $faker-&gt;text;</div><div class="line">  // Dolores sit sint laboriosam dolorem culpa et autem. Beatae nam sunt fugit</div><div class="line">  // et sit et mollitia sed.</div><div class="line">  // Fuga deserunt tempora facere magni omnis. Omnis quia temporibus laudantium</div><div class="line">  // sit minima sint.</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何编写测试&quot;&gt;&lt;a href=&quot;#如何编写测试&quot; class=&quot;headerlink&quot; title=&quot;如何编写测试&quot;&gt;&lt;/a&gt;如何编写测试&lt;/h2&gt;&lt;p&gt;Yii2高级应用程序使用Codeception作为其主要测试框架。&lt;/p&gt;
&lt;h3 id=&quot;搭建测试环境&quot;&gt;&lt;a href=&quot;#搭建测试环境&quot; class=&quot;headerlink&quot; title=&quot;搭建测试环境&quot;&gt;&lt;/a&gt;搭建测试环境&lt;/h3&gt;&lt;p&gt;为了运行测试用例，你需要安装 Codeception 。 一个较好的安装方式是：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;codeception/codeception=2.1.*&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;codeception/specify=*&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;composer &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;codeception/verify=*&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;创建测试目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;codecept bootstrap&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;构建测试套件：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;codecept build&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果测试需要在 Production 环境中执行， yii_test 和 yii_test.bat 必须从 environments/dev 文件夹手动复制到项目根目录。 测试需要一个 额外的数据库 ，这将在测试之间清除。 在mysql中创建数据库 yii2advanced_test （根据 common/config/test.php 中的配置）并执行：&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;./yii_test migrate&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>谈谈进程和线程</title>
    <link href="http://graychen.git.io/2017/06/17/%E8%B0%88%E8%B0%88%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://graychen.git.io/2017/06/17/谈谈进程和线程/</id>
    <published>2017-06-17T15:27:02.000Z</published>
    <updated>2018-05-27T09:59:36.036Z</updated>
    
    <content type="html"><![CDATA[<p>最近对于进程和线程之间的关系及其本质有所疑惑，在网上查询了多个答案之后有了些感想，记录下</p><h2 id="多任务"><a href="#多任务" class="headerlink" title="多任务"></a>多任务</h2><p>现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统。<br>什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务，至少同时有3个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。<br>现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？<br>答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。<br>真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。</p><h2 id="进程的概念"><a href="#进程的概念" class="headerlink" title="进程的概念"></a>进程的概念</h2><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。</p><h2 id="进程的本质"><a href="#进程的本质" class="headerlink" title="进程的本质"></a>进程的本质</h2><p>cpu的单次运算</p><h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><p>有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p><h2 id="线程的本质"><a href="#线程的本质" class="headerlink" title="线程的本质"></a>线程的本质</h2><p>由于每个进程至少要干一件事，所以，一个进程至少有一个线程。当然，像Word这种复杂的进程可以有多个线程，多个线程可以同时执行，多线程的执行方式和多进程是一样的，也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样。当然，真正地同时执行多线程需要多核CPU才可能实现。</p><h2 id="线程的特点"><a href="#线程的特点" class="headerlink" title="线程的特点"></a>线程的特点</h2><p>由于同一进程的多个线程共享同一地址空间，因此Text Segment、Data Segment都是共享的，如果定义一个函数，在各线程中都可以调用，如果定义一个全局变量，在各线程中都可以访问到，除此之外，各线程还共享以下进程资源和环境：<br>文件描述符表<br>每种信号的处理方式（SIG_IGN、SIG_DFL或者自定义的信号处理函数）<br>当前工作目录<br>用户id和组id<br>但有些资源是每个线程各有一份的：<br>线程id<br><a id="more"></a><br>上下文，包括各种寄存器的值、程序计数器和栈指针<br>栈空间<br>errno变量<br>信号屏蔽字<br>调度优先级</p><h2 id="进程的通信"><a href="#进程的通信" class="headerlink" title="进程的通信"></a>进程的通信</h2><p>每个进程各自有不同的用户地址空间，任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核，在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）。如下图所示。<br>图 30.6. 进程间通信<br>进程间通信<br> <img src="/assets/blogImg/process.png" alt="&quot;我是傲娇的效果图&quot;"></p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道是一种最基本的IPC机制，由pipe函数创建：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> filedes[<span class="number">2</span>])</span></span>;</div></pre></td></tr></table></figure></p><p>调用pipe函数时在内核中开辟一块缓冲区（称为管道）用于通信，它有一个读端一个写端，然后通过filedes参数传出给用户程序两个文件描述符，filedes[0]指向管道的读端，filedes[1]指向管道的写端（很好记，就像0是标准输入1是标准输出一样）。所以管道在用户程序看起来就像一个打开的文件，通过read(filedes[0]);或者write(filedes[1]);向这个文件读写数据其实是在读写内核缓冲区。pipe函数调用成功返回0，调用失败返回-1。</p><p>开辟了管道之后如何实现两个进程间的通信呢？比如可以按下面的步骤通信。<br>1.父进程调用pipe开辟管道，得到两个文件描述符指向管道的两端。<br>2.父进程调用fork创建子进程，那么子进程也有两个文件描述符指向同一管道。<br>3.父进程关闭管道读端，子进程关闭管道写端。父进程可以往管道里写，子进程可以从管道里读，管道是用环形队列实现的，数据从写端流入从读端流出，这样就实现了进程间通信。<br> <img src="/assets/blogImg/process.pipe.png" alt="&quot;我是傲娇的效果图&quot;"><br> <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 80</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="keyword">int</span> fd[<span class="number">2</span>];</div><div class="line">        <span class="keyword">pid_t</span> pid;</div><div class="line">        <span class="keyword">char</span> line[MAXLINE];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (pipe(fd) &lt; <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"pipe"</span>);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((pid = fork()) &lt; <span class="number">0</span>) &#123;</div><div class="line">                perror(<span class="string">"fork"</span>);</div><div class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">/* parent */</span></div><div class="line">                close(fd[<span class="number">0</span>]);</div><div class="line">                write(fd[<span class="number">1</span>], <span class="string">"hello world\n"</span>, <span class="number">12</span>);</div><div class="line">                wait(<span class="literal">NULL</span>);</div><div class="line">         &#125; <span class="keyword">else</span> &#123;       <span class="comment">/* child */</span></div><div class="line">                close(fd[<span class="number">1</span>]);</div><div class="line">                n = read(fd[<span class="number">0</span>], line, MAXLINE);</div><div class="line">                write(STDOUT_FILENO, line, n);</div><div class="line">         &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>使用管道有一些限制：<br>两个进程通过一个管道只能实现单向通信，比如上面的例子，父进程写子进程读，如果有时候也需要子进程写父进程读，就必须另开一个管道。请读者思考，如果只开一个管道，但是父进程不关闭读端，子进程也不关闭写端，双方都有读端和写端，为什么不能实现双向通信？<br>管道的读写端通过打开的文件描述符来传递，因此要通信的两个进程必须从它们的公共祖先那里继承管道文件描述符。上面的例子是父进程把文件描述符传给子进程之后父子进程之间通信，也可以父进程fork两次，把文件描述符传给两个子进程，然后两个子进程之间通信，总之需要通过fork传递文件描述符使两个进程都能访问同一管道，它们才能通信。<br>使用管道需要注意以下4种特殊情况（假设都是阻塞I/O操作，没有设置O_NONBLOCK标志）：<br>如果所有指向管道写端的文件描述符都关闭了（管道写端的引用计数等于0），而仍然有进程从管道的读端读数据，那么管道中剩余的数据都被读取后，再次read会返回0，就像读到文件末尾一样。<br>如果有指向管道写端的文件描述符没关闭（管道写端的引用计数大于0），而持有管道写端的进程也没有向管道中写数据，这时有进程从管道读端读数据，那么管道中剩余的数据都被读取后，再次read会阻塞，直到管道中有数据可读了才读取数据并返回。<br>如果所有指向管道读端的文件描述符都关闭了（管道读端的引用计数等于0），这时有进程向管道的写端write，那么该进程会收到信号SIGPIPE，通常会导致进程异常终止。在第 33 章 信号会讲到怎样使SIGPIPE信号不终止进程。<br>如果有指向管道读端的文件描述符没关闭（管道读端的引用计数大于0），而持有管道读端的进程也没有从管道中读数据，这时有进程向管道写端写数据，那么在管道被写满时再次write会阻塞，直到管道中有空位置了才写入数据并返回。</p></blockquote><p> 现在把进程之间传递信息的各种途径（包括各种IPC机制）总结如下：<br>-父进程通过fork可以将打开文件的描述符传递给子进程<br>-子进程结束时，父进程调用wait可以得到子进程的终止信息<br>-几个进程可以在文件系统中读写某个共享文件，也可以通过给文件加锁来实现进程间同步<br>-进程之间互发信号，一般使用SIGUSR1和SIGUSR2实现用户自定义功能<br>-管道<br>-FIFO<br>-mmap函数，几个进程可以映射同一内存区<br>-SYS V IPC，以前的SYS V UNIX系统实现的IPC机制，包括消息队列、信号量和共享内存，现在已经基本废弃<br>-UNIX Domain Socket，目前最广泛使用的IPC机制</p><h2 id="线程的通信"><a href="#线程的通信" class="headerlink" title="线程的通信"></a>线程的通信</h2><p>多个线程同时访问共享数据时可能会冲突，线程中的内存是共享的，导致所处理的变量是同一个，比如两个线程都要把某个全局变量增加1，这个操作在某平台需要三条指令完成：<br>1.从内存读变量值到寄存器<br>2.寄存器的值加1<br>3.将寄存器的值写回内存<br>假设两个线程在多处理器平台上同时执行这三条指令，则可能导致下图所示的结果，最后变量只加了一次而非两次。<br> <img src="/assets/blogImg/thread.corrupt.png" alt="&quot;我是傲娇的效果图&quot;"><br> 对于多线程的程序，访问冲突的问题是很普遍的，解决的办法是引入互斥锁（Mutex，Mutual Exclusive Lock），获得锁的线程可以完成“读-修改-写”的操作，然后释放锁给其它线程，没有获得锁的线程只能等待而不能访问共享数据，这样“读-修改-写”三步操作组成一个原子操作，要么都执行，要么都不执行，不会执行到中间被打断，也不会在其它处理器上并行做这个操作。<br> pthread_mutex_init函数对Mutex做初始化，参数attr设定Mutex的属性，如果attr为NULL则表示缺省属性，本章不详细介绍Mutex属性，感兴趣的读者可以参考[APUE2e]。用pthread_mutex_init函数初始化的Mutex可以用pthread_mutex_destroy销毁。如果Mutex变量是静态分配的（全局变量或static变量），也可以用宏定义PTHREAD_MUTEX_INITIALIZER来初始化，相当于用pthread_mutex_init初始化并且attr参数为NULL。Mutex的加锁和解锁操作可以用下列函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_trylock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;</div></pre></td></tr></table></figure></p><p>返回值：成功返回0，失败返回错误号。<br>一个线程可以调用pthread_mutex_lock获得Mutex，如果这时另一个线程已经调用pthread_mutex_lock获得了该Mutex，则当前线程需要挂起等待，直到另一个线程调用pthread_mutex_unlock释放Mutex，当前线程被唤醒，才能获得该Mutex并继续执行。<br>如果一个线程既想获得锁，又不想挂起等待，可以调用pthread_mutex_trylock，如果Mutex已经被另一个线程获得，这个函数会失败返回EBUSY，而不会使线程挂起等待。<br>Mutex的两个基本操作lock和unlock是如何实现的呢？假设Mutex变量的值为1表示互斥锁空闲，这时某个进程调用lock可以获得锁，而Mutex的值为0表示互斥锁已经被某个线程获得，其它线程再调用lock只能挂起等待。那么lock和unlock的伪代码如下：<br>lock:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(mutex &gt; <span class="number">0</span>)&#123;</div><div class="line">        mutex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125; <span class="keyword">else</span></div><div class="line">        <span class="comment">//挂起等待;</span></div><div class="line">        <span class="keyword">goto</span> lock;</div><div class="line">unlock:</div><div class="line">        mutex = <span class="number">1</span>;</div><div class="line">        <span class="comment">//唤醒等待Mutex的线程;</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        unlock操作中唤醒等待线程的步骤可以有不同的实现，可以只唤醒一个等待线程，也可以唤醒所有等待该Mutex的线程，然后让被唤醒的这些线程去竞争获得这个Mutex，竞争失败的线程继续挂起等待。</div></pre></td></tr></table></figure></p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>1.一般情况下，如果同一个线程先后两次调用lock，在第二次调用时，由于锁已经被占用，该线程会挂起等待别的线程释放锁，然而锁正是被自己占用着的，该线程又被挂起而没有机会释放锁，因此就永远处于挂起等待状态了，这叫做死锁（Deadlock）。<br>2.另一种典型的死锁情形是这样：线程A获得了锁1，线程B获得了锁2，这时线程A调用lock试图获得锁2，结果是需要挂起等待线程B释放锁2，而这时线程B也调用lock试图获得锁1，结果是需要挂起等待线程A释放锁1，于是线程A和B都永远处于挂起状态了。不难想象，如果涉及到更多的线程和更多的锁，有没有可能死锁的问题将会变得复杂和难以判断。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title=" 参考文章:"></a> 参考文章:</h2><p><a href="https://akaedu.github.io/book/ch35s04.html" target="_blank" rel="noopener">线程</a><br><a href="https://akaedu.github.io/book/ch30s04.html" target="_blank" rel="noopener">进程间通信</a><br><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0013868322563729e03f6905ea94f0195528e3647887415000" target="_blank" rel="noopener">进程和线程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对于进程和线程之间的关系及其本质有所疑惑，在网上查询了多个答案之后有了些感想，记录下&lt;/p&gt;
&lt;h2 id=&quot;多任务&quot;&gt;&lt;a href=&quot;#多任务&quot; class=&quot;headerlink&quot; title=&quot;多任务&quot;&gt;&lt;/a&gt;多任务&lt;/h2&gt;&lt;p&gt;现代操作系统比如Mac OS X，UNIX，Linux，Windows等，都是支持“多任务”的操作系统。&lt;br&gt;什么叫“多任务”呢？简单地说，就是操作系统可以同时运行多个任务。打个比方，你一边在用浏览器上网，一边在听MP3，一边在用Word赶作业，这就是多任务，至少同时有3个任务正在运行。还有很多任务悄悄地在后台同时运行着，只是桌面上没有显示而已。&lt;br&gt;现在，多核CPU已经非常普及了，但是，即使过去的单核CPU，也可以执行多任务。由于CPU执行代码都是顺序执行的，那么，单核CPU是怎么执行多任务的呢？&lt;br&gt;答案就是操作系统轮流让各个任务交替执行，任务1执行0.01秒，切换到任务2，任务2执行0.01秒，再切换到任务3，执行0.01秒……这样反复执行下去。表面上看，每个任务都是交替执行的，但是，由于CPU的执行速度实在是太快了，我们感觉就像所有任务都在同时执行一样。&lt;br&gt;真正的并行执行多任务只能在多核CPU上实现，但是，由于任务数量远远多于CPU的核心数量，所以，操作系统也会自动把很多任务轮流调度到每个核心上执行。&lt;/p&gt;
&lt;h2 id=&quot;进程的概念&quot;&gt;&lt;a href=&quot;#进程的概念&quot; class=&quot;headerlink&quot; title=&quot;进程的概念&quot;&gt;&lt;/a&gt;进程的概念&lt;/h2&gt;&lt;p&gt;对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个Word就启动了一个Word进程。&lt;/p&gt;
&lt;h2 id=&quot;进程的本质&quot;&gt;&lt;a href=&quot;#进程的本质&quot; class=&quot;headerlink&quot; title=&quot;进程的本质&quot;&gt;&lt;/a&gt;进程的本质&lt;/h2&gt;&lt;p&gt;cpu的单次运算&lt;/p&gt;
&lt;h2 id=&quot;线程的概念&quot;&gt;&lt;a href=&quot;#线程的概念&quot; class=&quot;headerlink&quot; title=&quot;线程的概念&quot;&gt;&lt;/a&gt;线程的概念&lt;/h2&gt;&lt;p&gt;有些进程还不止同时干一件事，比如Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。&lt;/p&gt;
&lt;h2 id=&quot;线程的本质&quot;&gt;&lt;a href=&quot;#线程的本质&quot; class=&quot;headerlink&quot; title=&quot;线程的本质&quot;&gt;&lt;/a&gt;线程的本质&lt;/h2&gt;&lt;p&gt;由于每个进程至少要干一件事，所以，一个进程至少有一个线程。当然，像Word这种复杂的进程可以有多个线程，多个线程可以同时执行，多线程的执行方式和多进程是一样的，也是由操作系统在多个线程之间快速切换，让每个线程都短暂地交替运行，看起来就像同时执行一样。当然，真正地同时执行多线程需要多核CPU才可能实现。&lt;/p&gt;
&lt;h2 id=&quot;线程的特点&quot;&gt;&lt;a href=&quot;#线程的特点&quot; class=&quot;headerlink&quot; title=&quot;线程的特点&quot;&gt;&lt;/a&gt;线程的特点&lt;/h2&gt;&lt;p&gt;由于同一进程的多个线程共享同一地址空间，因此Text Segment、Data Segment都是共享的，如果定义一个函数，在各线程中都可以调用，如果定义一个全局变量，在各线程中都可以访问到，除此之外，各线程还共享以下进程资源和环境：&lt;br&gt;文件描述符表&lt;br&gt;每种信号的处理方式（SIG_IGN、SIG_DFL或者自定义的信号处理函数）&lt;br&gt;当前工作目录&lt;br&gt;用户id和组id&lt;br&gt;但有些资源是每个线程各有一份的：&lt;br&gt;线程id&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux基础" scheme="http://graychen.git.io/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Webpack595错误</title>
    <link href="http://graychen.git.io/2017/05/13/Webpack595%E9%94%99%E8%AF%AF/"/>
    <id>http://graychen.git.io/2017/05/13/Webpack595错误/</id>
    <published>2017-05-13T15:39:40.000Z</published>
    <updated>2018-05-27T09:59:36.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="错误情况"><a href="#错误情况" class="headerlink" title="错误情况"></a>错误情况</h2><p>Mix incompatible with Webpack 2.3.0? #595</p><h2 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h2><p>这是laravel5.4的错误webpack依赖包兼容问题</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在package,json 修改”aravel-mix”: “^0.10.0” 修复这个错误<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;错误情况&quot;&gt;&lt;a href=&quot;#错误情况&quot; class=&quot;headerlink&quot; title=&quot;错误情况&quot;&gt;&lt;/a&gt;错误情况&lt;/h2&gt;&lt;p&gt;Mix incompatible with Webpack 2.3.0? #595&lt;/p&gt;
&lt;h2 id=&quot;错误原因&quot;&gt;&lt;a href=&quot;#错误原因&quot; class=&quot;headerlink&quot; title=&quot;错误原因&quot;&gt;&lt;/a&gt;错误原因&lt;/h2&gt;&lt;p&gt;这是laravel5.4的错误webpack依赖包兼容问题&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;在package,json 修改”aravel-mix”: “^0.10.0” 修复这个错误&lt;br&gt;
    
    </summary>
    
      <category term="错误日志" scheme="http://graychen.git.io/categories/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="错误日志" scheme="http://graychen.git.io/tags/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
