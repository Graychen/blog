<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Graychen的博客</title>
  <subtitle>这个世界需要更多的英雄</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://graychen.git.io/"/>
  <updated>2017-05-09T15:49:09.456Z</updated>
  <id>http://graychen.git.io/</id>
  
  <author>
    <name>Graychen</name>
    <email>13780185250@sina.cn</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lnmp源码搭建</title>
    <link href="http://graychen.git.io/2017/05/08/lnmp%E6%BA%90%E7%A0%81%E6%90%AD%E5%BB%BA/"/>
    <id>http://graychen.git.io/2017/05/08/lnmp源码搭建/</id>
    <published>2017-05-08T14:47:02.000Z</published>
    <updated>2017-05-09T15:49:09.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql源码安装"><a href="#mysql源码安装" class="headerlink" title="mysql源码安装"></a>mysql源码安装</h2><p>1.安装编译源码需要的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install make cmake gcc g++ bison libncurses5-dev</div></pre></td></tr></table></figure></p>
<p>2.下载相应源码包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@graychen ~]# wget https://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</div><div class="line">[root@graychen ~]# wget http://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5.7.13.tar.gz</div></pre></td></tr></table></figure></p>
<p>3.新建MySQL用户和用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@graychen ~]# groupadd -r mysql &amp;&amp; useradd -r -g mysql -s /sbin/nologin -M mysql</div></pre></td></tr></table></figure></p>
<p>4.预编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">[root@graychen ~]# tar -zxvf boost_1_59_0.tar.gz</div><div class="line">[root@graychen data]# md5sum mysql-5.7.13.tar.gz </div><div class="line">8fab75dbcafcd1374d07796bff88ae00  mysql-5.7.13.tar.gz</div><div class="line">[root@graychen ~]# tar -zxvf mysql-5.7.13.tar.gz</div><div class="line">[root@graychen data]# mkdir -p /data/mysql</div><div class="line">[root@graychen data]# cd mysql-5.7.13</div><div class="line">[root@graychen data]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</div><div class="line">-DMYSQL_DATADIR=/data/mysql \</div><div class="line">-DWITH_BOOST=../boost_1_59_0 \</div><div class="line">-DSYSCONFDIR=/etc \</div><div class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</div><div class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</div><div class="line">-DENABLED_LOCAL_INFILE=1 \</div><div class="line">-DENABLE_DTRACE=0 \</div><div class="line">-DDEFAULT_CHARSET=utf8mb4 \</div><div class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</div><div class="line">-DWITH_EMBEDDED_SERVER=1</div></pre></td></tr></table></figure>
<p>5.编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# make -j `grep processor /proc/cpuinfo | wc -l`</div><div class="line">#编译很消耗系统资源，小内存可能编译通不过make install</div><div class="line">[root@graychen mysql-5.7.13]# make install</div></pre></td></tr></table></figure>
<p>6.设置启动脚本，开机自启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# ls -lrt /usr/local/mysql</div><div class="line">[root@graychen mysql-5.7.13]# cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</div><div class="line">[root@graychen mysql-5.7.13]# chmod +x /etc/init.d/mysqld</div><div class="line">[root@graychen mysql-5.7.13]# systemctl enable mysqld</div><div class="line">mysqld.service is not a native service, redirecting to /sbin/chkconfig.</div><div class="line">Executing /sbin/chkconfig mysqld on</div></pre></td></tr></table></figure>
<p>7.配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">/etc/my.cnf，仅供参考 </div><div class="line">[root@graychen mysql-5.7.13]# cat &gt; /etc/my.cnf &lt;&lt; EOF</div><div class="line">[client]</div><div class="line">port = 3306</div><div class="line">socket = /dev/shm/mysql.sock</div><div class="line">[mysqld]</div><div class="line">port = 3306</div><div class="line">socket = /dev/shm/mysql.sock</div><div class="line">basedir = /usr/local/mysql</div><div class="line">datadir = /data/mysql</div><div class="line">pid-file = /data/mysql/mysql.pid</div><div class="line">user = mysql</div><div class="line">bind-address = 0.0.0.0</div><div class="line">server-id = 1</div><div class="line">init-connect = &apos;SET NAMES utf8mb4&apos;</div><div class="line">character-set-server = utf8mb4</div><div class="line">#skip-name-resolve</div><div class="line">#skip-networking</div><div class="line">back_log = 300</div><div class="line">max_connections = 1000</div><div class="line">max_connect_errors = 6000</div><div class="line">open_files_limit = 65535</div><div class="line">table_open_cache = 128</div><div class="line">max_allowed_packet = 4M</div><div class="line">binlog_cache_size = 1M</div><div class="line">max_heap_table_size = 8M</div><div class="line">tmp_table_size = 16M</div><div class="line">read_buffer_size = 2M</div><div class="line">read_rnd_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">join_buffer_size = 8M</div><div class="line">key_buffer_size = 4M</div><div class="line">thread_cache_size = 8</div><div class="line">query_cache_type = 1</div><div class="line">query_cache_size = 8M</div><div class="line">query_cache_limit = 2M</div><div class="line">ft_min_word_len = 4</div><div class="line">log_bin = mysql-bin</div><div class="line">binlog_format = mixed</div><div class="line">expire_logs_days = 30</div><div class="line">log_error = /data/mysql/mysql-error.log</div><div class="line">slow_query_log = 1</div><div class="line">long_query_time = 1</div><div class="line">slow_query_log_file = /data/mysql/mysql-slow.log</div><div class="line">performance_schema = 0</div><div class="line">explicit_defaults_for_timestamp</div><div class="line">#lower_case_table_names = 1</div><div class="line">skip-external-locking</div><div class="line">default_storage_engine = InnoDB</div><div class="line">#default-storage-engine = MyISAM</div><div class="line">innodb_file_per_table = 1</div><div class="line">innodb_open_files = 500</div><div class="line">innodb_buffer_pool_size = 64M</div><div class="line">innodb_write_io_threads = 4</div><div class="line">innodb_read_io_threads = 4</div><div class="line">innodb_thread_concurrency = 0</div><div class="line">innodb_purge_threads = 1</div><div class="line">innodb_flush_log_at_trx_commit = 2</div><div class="line">innodb_log_buffer_size = 2M</div><div class="line">innodb_log_file_size = 32M</div><div class="line">innodb_log_files_in_group = 3</div><div class="line">innodb_max_dirty_pages_pct = 90</div><div class="line">innodb_lock_wait_timeout = 120</div><div class="line">bulk_insert_buffer_size = 8M</div><div class="line">myisam_sort_buffer_size = 8M</div><div class="line">myisam_max_sort_file_size = 10G</div><div class="line">myisam_repair_threads = 1</div><div class="line">interactive_timeout = 28800</div><div class="line">wait_timeout = 28800</div><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">max_allowed_packet = 16M</div><div class="line">[myisamchk]</div><div class="line">key_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line">read_buffer = 4M</div><div class="line">write_buffer = 4M</div><div class="line">EOF</div></pre></td></tr></table></figure>
<p>9.添加mysql的环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# echo -e &apos;\n\nexport PATH=/usr/local/mysql/bin:$PATH\n&apos; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile</div></pre></td></tr></table></figure>
<p>10.初始化数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql</div></pre></td></tr></table></figure>
<p>11.启动数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# systemctl start mysqld</div><div class="line">[root@graychen mysql-5.7.13]# systemctl status mysqld</div><div class="line">● mysqld.service - LSB: start and stop MySQL</div><div class="line">Loaded: loaded (/etc/rc.d/init.d/mysqld)</div><div class="line">Active: active (running) since 一 2016-07-18 11:15:35 CST; 8s ago</div><div class="line">Docs: man:systemd-sysv-generator(8)</div><div class="line">Process: 23927 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)</div><div class="line">CGroup: /system.slice/mysqld.service</div><div class="line">├─23940 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class="line">└─24776 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-err...</div><div class="line"></div><div class="line">7月 18 11:15:32 graychen systemd[1]: Starting LSB: start and stop MySQL...</div><div class="line">7月 18 11:15:35 graychen mysqld[23927]: Starting MySQL..[  OK   ]</div><div class="line">7月 18 11:15:35 graychen systemd[1]: Started LSB: start and stop MySQL.</div></pre></td></tr></table></figure>
<p>12.查看MySQL服务进程和端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# ps -ef | grep mysql</div><div class="line">root     23940     1  0 11:15 ?        00:00:00 /bin/sh /usr/local/mysql/bin/mysqld_safe --datadir=/data/mysql --pid-file=/data/mysql/mysql.pid</div><div class="line">mysql    24776 23940  0 11:15 ?        00:00:00 /usr/local/mysql/bin/mysqld --basedir=/usr/local/mysql --datadir=/data/mysql --plugin-dir=/usr/local/mysql/lib/plugin --user=mysql --log-error=/data/mysql/mysql-error.log --open-files-limit=65535 --pid-file=/data/mysql/mysql.pid --socket=/dev/shm/mysql.sock --port=3306</div><div class="line">[root@graychen mysql-5.7.13]# netstat -tunpl | grep 3306</div><div class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      24776/mysqld</div></pre></td></tr></table></figure></p>
<p>13.设置数据库root用户密码</p>
<p>MySQL和Oracle数据库一样，数据库也默认自带了一个 root 用户（这个和当前Linux主机上的root用户是完全不搭边的），我们在设置好MySQL数据库的安全配置后初始化root用户的密码。配制过程中，一路输入 y 就行了。这里只说明下MySQL5.7.13版本中，用户密码策略分成低级 LOW 、中等 MEDIUM 和超强 STRONG 三种，推荐使用中等 MEDIUM 级别！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@graychen mysql-5.7.13]# mysql_secure_installation</div></pre></td></tr></table></figure>
<h2 id="php源码安装"><a href="#php源码安装" class="headerlink" title="php源码安装"></a>php源码安装</h2><p>1.安装编译源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget http://am1.php.net/get/php-7.1.4.tar.bz2/from/mirror</div><div class="line">tar jxvf php-7.1.4.tar.bz2 </div><div class="line">bzip2 -d php-7.1.4.tar.bz2 </div><div class="line">cd php-7.1.4/</div><div class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-config-file-scan-dir=/usr/local/php/etc/php.d --with-mcrypt=/usr/include --enable-mysqlnd --with-mysqli --with-pdo-mysql --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --with-iconv --with-zlib --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-mbregex --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-curl --with-jpeg-dir --with-freetype-dir --enable-opcache --with-libxml-dir=/usr</div><div class="line">sudo make test</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>2.配置php.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp php.ini-development /usr/local/php/etc/php.ini</div><div class="line">sudo mv php-fpm.d/www.conf.default php-fpm.d/www.conf</div></pre></td></tr></table></figure></p>
<p>3.配置php-fpm.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/php/etc/</div><div class="line">mv php-fpm.conf.default php-fpm.conf</div><div class="line">sudo mv php-fpm.conf.default php-fpm.conf</div><div class="line">sudo mv php-fpm.d/www.conf.default php-fpm.d/www.conf</div></pre></td></tr></table></figure></p>
<p>4.配置php-fpm开机启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cd ~/src/php-7.1.4/sapi/fpm</div><div class="line">sudo cp init.d.php-fpm /etc/init.d/php-fpm</div><div class="line">sudo chmod +x /etc/init.d/php-fpm </div><div class="line">chkconfig --add php-fpm</div><div class="line">systemctl --add php-fpm</div><div class="line">sudo /sbin/chkconfig</div><div class="line">sudo vi /etc/init.d/php-fpm</div><div class="line">update-rc.d -f php-fpm defaults</div><div class="line">runlevel</div><div class="line">sudo service php-fpm start</div></pre></td></tr></table></figure></p>
<h2 id="nginx源码安装"><a href="#nginx源码安装" class="headerlink" title="nginx源码安装"></a>nginx源码安装</h2><p>1.下载源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/download/nginx-1.11.2.tar.gz</div><div class="line">tar -xzvf nginx-1.11.2.tar.gz -C /usr/src</div></pre></td></tr></table></figure></p>
<p>2.安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install gcc libpcre3 libpcre3-dev openssl libssl-dev libssl0.9.8 perl libperl-dev</div></pre></td></tr></table></figure></p>
<p>3.编译安装源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /usr/src/nginx-1.11.2</div><div class="line"># 以下是一行。。用于生成makefile。如果需要添加第三方模块，使用--add-module=/path/module1的方法编译</div><div class="line">./configure --prefix=/usr/local/nginx --with-ipv6 --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gzip_static_module --with-http_perl_module --with-mail --with-mail_ssl_module</div><div class="line"># make是生成在objs目录中，make install则安装到prefix所示的目录中</div><div class="line">make &amp;&amp; make install</div><div class="line"># 没有错误出现的话，就可以进入nginx安装目录(/usr/local/nginx)配置。</div></pre></td></tr></table></figure></p>
<blockquote>
<p>成功安装后，进入/usr/local/nginx，可以看到4个目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root@graychen:/usr/local/nginx# ll</div><div class="line">total 44</div><div class="line">drwxr-xr-x 11 root   root 4096 Jul 26 10:06 ./</div><div class="line">drwxr-xr-x 12 root   root 4096 Jul 26 10:03 ../</div><div class="line">drwxr-xr-x  2 root   root 4096 Jul 26 10:11 conf/</div><div class="line">drwxr-xr-x  2 root   root 4096 Jul 26 10:03 html/</div><div class="line">drwxr-xr-x  2 root   root 4096 Jul 26 10:07 logs/</div><div class="line">drwxr-xr-x  2 root   root 4096 Jul 26 10:03 sbin/</div></pre></td></tr></table></figure></p>
</blockquote>
<p>其中，</p>
<p> conf：放置nginx相关的配置文件，最核心的是nginx.conf<br> html：默认的网站根目录<br> logs：日志文件目录(访问日志，错误日志，运行时的进程id cat logs/nginx.pid)<br> sbin：主程序(nginx)目录<br>4.配置Nginx开机自启动<br>Ubuntu/Linux系统开机自启动，很简单，在/etc/init.d/目录下编写一个服务脚本(比如nginx)，然后在/etc/init.d/rc.local中添加一行启动命令。操作步骤如下</p>
<blockquote>
<ul>
<li><p>vi /etc/init.d/nginx ,其中具体的脚本展示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">[plain] view plain copy</div><div class="line"></div><div class="line"> #!/bin/bash</div><div class="line"> # nginx Startup script for the Nginx HTTP Server</div><div class="line"> # it is v.0.0.2 version.</div><div class="line"> # chkconfig: - 85 15</div><div class="line"> # description: Nginx is a high-performance web and proxy server.</div><div class="line"> #              It has a lot of features, but it&apos;s not for everyone.</div><div class="line"> # processname: nginx</div><div class="line"> # pidfile: /var/run/nginx.pid</div><div class="line"> # config: /usr/local/nginx/conf/nginx.conf</div><div class="line"></div><div class="line"> #注意：这里的三个变量需要根据具体的环境而做修改。</div><div class="line"> nginxd=/opt/nginx/sbin/nginx</div><div class="line"> nginx_config=/opt/nginx/conf/nginx.conf</div><div class="line"> nginx_pid=/opt/nginx/logs/nginx.pid</div><div class="line"> RETVAL=0</div><div class="line"> prog=&quot;nginx&quot;</div><div class="line"></div><div class="line"> # Check that networking is up.</div><div class="line"> [ -x $nginxd  ] || exit 0</div><div class="line"> # Start nginx daemons functions.</div><div class="line"> start() &#123;</div><div class="line">     if [ -e $nginx_pid  ];then</div><div class="line">        echo &quot;nginx already running....&quot;</div><div class="line">        exit 1</div><div class="line">     fi</div><div class="line">        echo -n $&quot;Starting $prog: &quot;</div><div class="line">        $nginxd -c $&#123;nginx_config&#125;</div><div class="line">        RETVAL=$?</div><div class="line">        echo</div><div class="line">        [ $RETVAL = 0  ]</div><div class="line">        return $RETVAL</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> # Stop nginx daemons functions.</div><div class="line"> stop() &#123;</div><div class="line">       echo -n $&quot;Stopping $prog: &quot;</div><div class="line">       $nginxd -s stop</div><div class="line">       RETVAL=$?</div><div class="line">       echo</div><div class="line">       [ $RETVAL = 0  ] &amp;&amp; rm -f /var/lock/subsys/nginx $nginx_pid</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> # reload nginx service functions.</div><div class="line"> reload() &#123;</div><div class="line">       echo -n $&quot;Reloading $prog: &quot;</div><div class="line">       kill -HUP `cat $&#123;nginx_pid&#125;`</div><div class="line">       RETVAL=$?</div><div class="line">       echo</div><div class="line">     </div><div class="line">&#125;</div><div class="line"> # See how we were called.</div><div class="line"> case &quot;$1&quot; in</div><div class="line">   start)</div><div class="line">           start</div><div class="line">           ;;</div><div class="line">   stop)</div><div class="line">           stop</div><div class="line">           ;;</div><div class="line">   reload)</div><div class="line">           reload</div><div class="line">           ;;</div><div class="line">   restart)</div><div class="line">           stop</div><div class="line">           start</div><div class="line">           ;;</div><div class="line">   status)</div><div class="line">           status $prog</div><div class="line">           RETVAL=$?</div><div class="line">           ;;</div><div class="line">   *)</div><div class="line">           echo $&quot;Usage: $prog &#123;start|stop|restart|reload|status|help&#125;&quot;</div><div class="line">           exit 1</div><div class="line"> esac</div><div class="line"> exit $RETVAL</div></pre></td></tr></table></figure>
</li>
<li><p>sudo chmod a+x /etc/init.d/nginx</p>
</li>
<li>在rc.local文件的最后中添加如下的一行: /etc/init.d/nginx start<br>最后，nginx可以通过 /etc/init.d/nginx start或者 service nginx start进行启动。</li>
</ul>
</blockquote>
<p>到这里整个LNMP已经安装完成.</p>
<h2 id="nginx和php的关联"><a href="#nginx和php的关联" class="headerlink" title="nginx和php的关联"></a>nginx和php的关联</h2><p>下面我们就配置php和nginx能运行php网站: 首先为php创建配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cp php.ini-production /usr/local/php/php.ini # 如果是开发就复制php.ini-development</div><div class="line">cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf</div><div class="line">ln -s /usr/local/php/bin/php /usr/bin/</div></pre></td></tr></table></figure></p>
<p>配置php-fpm,编辑php-fpm.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/php/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<p>找到listen那一行,修改成如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen = /var/run/php-fpm/php-fpm.sock   # 使用unix socket</div></pre></td></tr></table></figure>
<p>启动php-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /var/run/php-fpm</div><div class="line">/usr/local/php/sbin/php-fpm</div></pre></td></tr></table></figure>
<p>然后配置nginx,编辑nginx配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>修改nginx配置文件支持php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   html;</div><div class="line">            index  index.php index.html index.htm;         # 添加index.php的首页文件</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # 添加下面内容</div><div class="line">        location ~ \.php$ &#123;</div><div class="line">            fastcgi_pass        unix:/var/run/php-fpm/php-fpm.sock;</div><div class="line">            fastcgi_index       index.php;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;</div><div class="line">            include fastcgi_params;</div><div class="line">            include fastcgi.conf;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改完毕后保存退出重启nginx:</p>
<p>pkill -9 nignx<br>/usr/local/nginx/sbin/nginx<br>然后在/usr/local/nginx/html下创建index.php,</p>
<p>vi /usr/local/nginx/html/index.php<br>添加下面内容:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">phpinfo();</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>保存退出后访问<a href="http://localhost/index.php,看到下面页面表示已经安装配置成功" target="_blank" rel="external">http://localhost/index.php,看到下面页面表示已经安装配置成功</a>:</p>
<p><img src="/assets/blogImg/php.png" alt="php页面"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;mysql源码安装&quot;&gt;&lt;a href=&quot;#mysql源码安装&quot; class=&quot;headerlink&quot; title=&quot;mysql源码安装&quot;&gt;&lt;/a&gt;mysql源码安装&lt;/h2&gt;&lt;p&gt;1.安装编译源码需要的包&lt;br&gt;&lt;figure class=&quot;highlight p
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>计划虽然不酷，但是很有用</title>
    <link href="http://graychen.git.io/2017/02/04/%E8%AE%A1%E5%88%92%E8%99%BD%E7%84%B6%E4%B8%8D%E9%85%B7%EF%BC%8C%E4%BD%86%E6%98%AF%E5%BE%88%E6%9C%89%E7%94%A8/"/>
    <id>http://graychen.git.io/2017/02/04/计划虽然不酷，但是很有用/</id>
    <published>2017-02-04T06:26:37.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<p>这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！<br> <img src="/assets/blogImg/女神2.jpg" alt="&quot;我是傲娇的女神&quot;"><br> 请收下这波安利，好了，安利结束，我们谈正事，写这篇文章的目的是自己过于散漫，做事不够坚持，然后看到有人凭着年度计划，一步步完善自己，所以我也想试试，学习优秀的人的习惯，总不至于让自己变得太差。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p> 我的目标是什么呢？在工作之余，以三个月为限，做出上线运营的项目，也就是说我的2017要产出4个上线的项目，每个季度都要产出一个线上运营的项目，而且这都是业余时间完成的，这对我真是一个不小的挑战了，<br> 我希望自己能产出卓越的产品，但是我认为没有量的积累，这永远都不可能，千里之行，始于足下，我这几个产品可能不会优秀,不够细致，过于粗糙，但是<br> 完成比完美重要，上线就是我的目的。之前都是学习技术，今年我会转向输出,输出产品。</p>
<h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p> 我的计划是什么呢？一个季度是三个月，每个月是4个星期，这是一个系列文章，我会在每个周日的晚上发博文(很可能是微博)来报告这周的完成情况和下周的计划安排,并且这个过程是透明的，我写下的所有源码我都会放到github上，从这个网站上<br> 你将会看到我的行动轨迹，我有没有食言，只要方格是绿色的，那就表示我输出了很多的代码，否则我可能就是食言了，但愿不要吧,我还是比较虚的！</p>
<h2 id="计划详情"><a href="#计划详情" class="headerlink" title="计划详情"></a>计划详情</h2><p> 事先声明，这篇博客我会持续更新的，我思考了下决定了我的第一个项目，我会给它起一个有趣的代号，因为我喜欢看一些动漫，所以我决定给他们起动漫中的物品</p>
<h2 id="我是傲娇的分割线O-∩-∩-O"><a href="#我是傲娇的分割线O-∩-∩-O" class="headerlink" title="我是傲娇的分割线O(∩_∩)O~~"></a>我是傲娇的分割线O(∩_∩)O~~</h2><h3 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h3><h4 id="代号：OnePiece"><a href="#代号：OnePiece" class="headerlink" title="代号：OnePiece"></a>代号：<strong>OnePiece</strong></h4><p><img src="/assets/blogImg/onepiece.png" alt="&quot;我是伟大的OnePiece&quot;"></p>
<blockquote>
<p>这是海贼王的伟大冒险的终点，当然也是所有故事的起点，是引起这个海贼世界变革的重要地点，我特别欣赏里面的对梦想的执着和对友情的重视,所以我的第一个项目以此为名。</p>
</blockquote>
<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>这个项目我决定做一个租借平台,总有一些东西让我们食之无味，弃之可惜，这个项目要把那些人们不舍得的东西放到网上出租，第一个月我想把最核心的浏览列表和上传物品的功能做完，有别于寻常的项目，我这次要从前台开始做起，<br>前台做完之后再开始做后台功能，我要倒过来做。</p>
<h4 id="可能会用到的技术"><a href="#可能会用到的技术" class="headerlink" title="可能会用到的技术"></a>可能会用到的技术</h4><ul>
<li>语言：php+js</li>
<li>框架：laravel+vue.js</li>
<li>平台：移动端</li>
<li>类型：移动端的网站<br>做这些项目当然也要提要自己啦，我会尽可能尝试不同的语言，第一个项目我的技术选型相对保守，先从最熟悉的技术开始实现吧。由于我不是专业的设计，前期的页面可能相对粗糙，还请见谅。<h4 id="项目时间安排"><a href="#项目时间安排" class="headerlink" title="项目时间安排"></a>项目时间安排</h4>今天已经是二月5日了，由于我这个人懒得算数，就以二月份开始吧，那么截止时间就定在4月30号，4月30号我会做项目演示，会公布线上网址（如果我做好的话）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一遍迟到的年度计划了，这篇文章的名字是取自我最近看的日剧《逃避虽然可耻，但是很有用》,说到这里，女神镇楼！&lt;br&gt; &lt;img src=&quot;/assets/blogImg/女神2.jpg&quot; alt=&quot;&amp;quot;我是傲娇的女神&amp;quot;&quot;&gt;&lt;br&gt; 请收下这波安利，好了，
    
    </summary>
    
      <category term="随笔" scheme="http://graychen.git.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Composer包是怎样炼成的</title>
    <link href="http://graychen.git.io/2016/10/19/composer%E5%8C%85%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/"/>
    <id>http://graychen.git.io/2016/10/19/composer包是怎样炼成的/</id>
    <published>2016-10-19T03:20:43.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>Composer</strong>是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 –<a href="http://www.phpcomposer.com/" target="_blank" rel="external">Composer中文网</a></p>
</blockquote>
<p>关于Composer的安装和下载可以直接点击上方的链接查看，本篇博文主要讲解该怎样创建自己的Composer包，并把它提交到<a href="https://packagist.org/" target="_blank" rel="external">packgist</a></p>
<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><h3 id="产商名称和包名"><a href="#产商名称和包名" class="headerlink" title="产商名称和包名"></a>产商名称和包名</h3><p>在设置命名空间之前，先要确定产商名称和包名，类似于<strong>laravel/framework</strong>,确保它的唯一性，在packgist中不存在.厂商名称和包名是为了让packgist识别组件，而组件的命名空间是为了在php中使用组件，这是两个概念。</p>
<h3 id="文件系统结构"><a href="#文件系统结构" class="headerlink" title="文件系统结构"></a>文件系统结构</h3><ul>
<li><strong>src</strong>:这个目录用于存放组件的源码   </li>
<li><strong>tests</strong>:这个目录用于存放测试代码   </li>
<li><strong>composer.json</strong>:Composer配置文件，用于描述组件，声明组件依赖以及自动加载配置等   </li>
<li><strong>README.md</strong>:这个Markdown提供组件的相关信息,使用文档说明软件许可证等   </li>
<li><strong>CONTRIBUTING.md</strong>:这个Markdown文件告知别人如何为这个组件做贡献  </li>
<li><strong>LICENSE</strong>：纯文本文件，声明组件的软件许可证</li>
<li><strong>CHANGELOG.md</strong>：Markdown文件，列出组件在每个版本中引入的改动</li>
</ul>
<h3 id="文件系统结构-1"><a href="#文件系统结构-1" class="headerlink" title="文件系统结构"></a>文件系统结构</h3><p>我们新建一个组件目录（~/Packages/urlscanner），然后在urlscanner目录下通过如下命令生成composer.json文件：<br>composer init</p>
<p>然后在终端会让我们按照提示向导一步步填写composer.json内容：<br>最后回车，会生成相应的composer.json文件，我们对该文件作如下修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"graychen/container"</span>,</div><div class="line">    <span class="string">"description"</span>: <span class="string">"a container for interface and container"</span>,</div><div class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">    <span class="string">"authors"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="string">"name"</span>: <span class="string">"Graychen"</span>,</div><div class="line">            <span class="string">"email"</span>: <span class="string">"13780185250@sina.cn"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"minimum-stability"</span>: <span class="string">"dev"</span>,</div><div class="line">    <span class="string">"require"</span>: &#123;&#125;,</div><div class="line">    <span class="string">"require-dev"</span>: &#123;</div><div class="line">            <span class="string">"phpunit/phpunit"</span> : <span class="string">"~4.3"</span> </div><div class="line">        &#125;,</div><div class="line">    <span class="string">"autoload"</span>:&#123;</div><div class="line">        <span class="string">"psr-4"</span>:&#123;</div><div class="line">            <span class="string">"graychen\\container\\"</span> : <span class="string">"src"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"autoload-dev"</span>:&#123;</div><div class="line">        <span class="string">"psr-4"</span>:&#123;</div><div class="line">            <span class="string">"graychen\\container\\Tests\\"</span>:<span class="string">"tests/"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们来仔细研究一下这个文件，看看每个部分究竟是什么意思：</p>
<ul>
<li>name：组件的厂商名和包名，也是Packagist中的组件名</li>
<li>description：简要说明组件</li>
<li>keywords：描述属性的关键字</li>
<li>homepage：组件网站URL</li>
<li>license：PHP组件采用的软件许可证（更多软件许可证参考：<a href="http://choosealicense.com/）" target="_blank" rel="external">http://choosealicense.com/）</a></li>
<li>authors：作者信息数组</li>
<li>support：组件用户获取技术支持的方式</li>
<li>require：组件自身依赖的组件</li>
<li>require-dev：开发这个组件所需的依赖</li>
<li>suggest：建议安装的组件</li>
<li>autoload：告诉Composer自动加载器如何自动加载这个组件</li>
</ul>
<p>READEME.md</p>
<p>通常这个是用户最先阅读的文件，对托管在Github和Bitbucket中的组件来说，更是如此。标准的READEME.md文件至少提供以下信息：</p>
<ul>
<li>组件的名称和描述</li>
<li>安装说明</li>
<li>使用说明</li>
<li>测试说明</li>
<li>贡献方式</li>
<li>支持资源</li>
<li>作者信息</li>
<li>软件许可证</li>
</ul>
<p>实现组件</p>
<p>开始之前我们使用如下命令安装依赖：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer install</div></pre></td></tr></table></figure></p>
<p>该命令会把依赖组件安装到vendor目录并生成自动加载器。<br>安装好以后我们来实现组件的具体功能。将所有的类，接口和Trait都放到src这个目录下。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">container</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@brief</span> 服务容器</div><div class="line">* author Graychen</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> $_bindings = [];<span class="comment">//服务列表</span></div><div class="line">    <span class="keyword">private</span> $_instances= [];<span class="comment">//已经实例化的服务</span></div><div class="line">    <span class="comment">//获取服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name,$params=[])</span></span>&#123;</div><div class="line">        <span class="comment">//先从实例化的列表中查找</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$_instances[$name]))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$_instances[$name]; </div><div class="line">        &#125;</div><div class="line">        <span class="comment">//检测有没有注册该服务</span></div><div class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;$_bindings[$name]))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        $concrete = <span class="keyword">$this</span>-&gt;$_bindings[$name][<span class="string">'class'</span>];<span class="comment">//对象具体注册内容</span></div><div class="line">        $obj = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> \Closure)&#123; <span class="comment">//匿名函数方式</span></div><div class="line">            $obj = call_user_func_array($concrete,$params);</div><div class="line">        &#125;<span class="keyword">elseif</span>(is_string($concrete))&#123;     <span class="comment">//字符串方式</span></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>($params))&#123;</div><div class="line">                $obj = <span class="keyword">new</span> $concrete;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//带参数的类实例化,使用反射</span></div><div class="line">                $class = <span class="keyword">new</span> \reflectionClass($concrete);</div><div class="line">                $obj = $class-&gt;newInstanceArgs($params);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_bindings[$name][<span class="string">'shared'</span>]==<span class="keyword">true</span> &amp;&amp; $ojb)&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_instances[$name]=$obj;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $obj;</div><div class="line">    &#125; </div><div class="line">    <span class="comment">//检测是否已经绑定</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span><span class="params">($name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_bindings[$name]) <span class="keyword">or</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_instances[$name]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//卸载服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">($name)</span></span>&#123;</div><div class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_bindings[$name],<span class="keyword">$this</span>-&gt;_instances[$name]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name,$class)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_registerService($name,$class);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置共享服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setShared</span><span class="params">($name,$class)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_registerService($name,$class,<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//注册服务</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_registerService</span><span class="params">($name,$class,$shared=false)</span></span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;remove($name);</div><div class="line">        <span class="keyword">if</span>(!($class <span class="keyword">instanceof</span> \Closure) &amp;&amp; is_object($class))&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_instances[$name]=$class;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_bindings[$name]=<span class="keyword">array</span>(<span class="string">"class"</span>=&gt;$class,<span class="string">"shared"</span>=&gt;$shared); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//ArrayAccess接口，检测服务是否存在</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span><span class="params">($offset)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;has($offset);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span><span class="params">($offset)</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($offset); </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//ArrayAccess接口,以$di[$name]方式获取服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span><span class="params">($offset,$value)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;set($offset,$value);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//卸载服务</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span><span class="params">($offset)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;remove($offset);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="提交到packglist"><a href="#提交到packglist" class="headerlink" title="提交到packglist"></a>提交到packglist</h3><p>我们先将代码提交到GitHub,注意将vendor目录添加到.gitignore仓库,我的是graychen/container：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git remote add origin https://github.com/nonfu/urlscanner.git</div><div class="line">git add .</div><div class="line">git commit -m “urlscanner&quot;</div><div class="line">git pull origin master</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p> <img src="/assets/blogImg/Graychen-Container.gif" alt="&quot;我是傲娇的效果图&quot;"><br> 然后在Packagist中通过GitHub账户登录，通过<a href="https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：" target="_blank" rel="external">https://packagist.org/packages/submit提交组件，在输入框中输入刚刚提交的GitHub仓库地址：</a><br> check成功后点击submit即可将组件提交到Packagist：<br> <img src="/assets/blogImg/Packagist.gif" alt="&quot;我是傲娇的效果图&quot;"></p>
<h2 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h2><p> 至此，我们已经成功将自己的组件提交到Packagist，现在任何人都可以使用Composer安装这个URL扫描器组件，然后在自己的PHP应用中使用。在终端执行如下命令安装这个组件：</p>
<p> composer require graychen/container dev-master</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Composer&lt;/strong&gt;是php用来管理依赖关系的工具，你可以在自己的项目中声明所依赖的外部工具库，Composer会帮助你安装这些依赖的库文件 –&lt;a href=&quot;http://www.phpcomposer.com/&quot;
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>深入解析php的容器模式</title>
    <link href="http://graychen.git.io/2016/10/19/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90php%E7%9A%84%E5%AE%B9%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://graychen.git.io/2016/10/19/深入解析php的容器模式/</id>
    <published>2016-10-19T03:20:43.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<p>先说结论，<strong>容器</strong>在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。</p>
<h3 id="我是傲娇的代码块"><a href="#我是傲娇的代码块" class="headerlink" title="我是傲娇的代码块:"></a>我是傲娇的代码块:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@brief</span> 服务容器</div><div class="line">* author Graychen</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> <span class="keyword">implements</span> \<span class="title">ArrayAccess</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> $_binContainerngs = [];<span class="comment">//服务列表</span></div><div class="line">  <span class="keyword">private</span> $_instances= [];<span class="comment">//已经实例化的服务</span></div><div class="line"></div><div class="line">  <span class="comment">//获取服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name,$params=[])</span></span>&#123;</div><div class="line">  <span class="comment">//先从实例化的列表中查找</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_instances[$name]))&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_instances[$name];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//检测有没有注册该服务</span></div><div class="line">  <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  $concrete = <span class="keyword">$this</span>-&gt;_binContainerngs[$name][<span class="string">'class'</span>];<span class="comment">//对象具体注册内容</span></div><div class="line"></div><div class="line">  $obj = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> \Closure)&#123; <span class="comment">//匿名函数方式</span></div><div class="line">  $obj = call_user_func_array($concrete,$params);</div><div class="line">  &#125;<span class="keyword">elseif</span>(is_string($concrete))&#123; <span class="comment">//字符串方式</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">empty</span>($params))&#123;</div><div class="line">  $obj = <span class="keyword">new</span> $concrete;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="comment">//带参数的类实例化,使用反射</span></div><div class="line">  $class = <span class="keyword">new</span> \reflectionClass($concrete);</div><div class="line">  $obj = $class-&gt;newInstanceArgs($params);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class="line">  <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name][<span class="string">'shared'</span>]==<span class="keyword">true</span> &amp;&amp; $ojb)&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;_instances[$name]=$obj;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> $obj;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//检测是否已经绑定</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span><span class="params">($name)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name]) <span class="keyword">or</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_instances[$name]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//卸载服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">($name)</span></span>&#123;</div><div class="line">  <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name],<span class="keyword">$this</span>-&gt;_instances[$name]);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//设置服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name,$class)</span></span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;_registerService($name,$class);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//设置共享服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setShared</span><span class="params">($name,$class)</span></span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;_registerService($name,$class,<span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//注册服务</span></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_registerService</span><span class="params">($name,$class,$shared=false)</span></span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;remove($name);</div><div class="line">  <span class="keyword">if</span>(!($class <span class="keyword">instanceof</span> \Closure) &amp;&amp; is_object($class))&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;_instances[$name]=$class;</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;_binContainerngs[$name]=<span class="keyword">array</span>(<span class="string">"class"</span>=&gt;$class,<span class="string">"shared"</span>=&gt;$shared);</div><div class="line">  &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//ArrayAccess接口，检测服务是否存在</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetExists</span><span class="params">($offset)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;has($offset);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetGet</span><span class="params">($offset)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get($offset);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//ArrayAccess接口,以$Container[$name]方式获取服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetSet</span><span class="params">($offset,$value)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;set($offset,$value);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//卸载服务</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">offsetUnset</span><span class="params">($offset)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;remove($offset);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">header(<span class="string">"Content-Type:text/html;charset=utf8"</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> $name;</div><div class="line">  <span class="keyword">public</span> $age;</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name=<span class="string">""</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">include</span> <span class="string">"Container.class.php"</span>;</div><div class="line">$Container = <span class="keyword">new</span> Container();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@brief</span> $Container-&gt;setShared 匿名函数方式注册一个名为a1的服务</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> 'a1'</div><div class="line">* <span class="doctag">@param</span></div><div class="line">*/</div><div class="line">$Container-&gt;setShared(<span class="string">'a1'</span>,<span class="function"><span class="keyword">function</span><span class="params">($name=<span class="string">""</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> A($name);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">$a1 = $Container-&gt;get(<span class="string">'a1'</span>,<span class="keyword">array</span>(<span class="string">"小李"</span>));</div><div class="line"><span class="keyword">echo</span> $a1-&gt;name.<span class="string">"&lt;br/&gt;"</span>;<span class="comment">//小李</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@brief</span> $Container-&gt;set 直接以类名方式注册</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> 'a2'</div><div class="line">* <span class="doctag">@param</span> 'A'</div><div class="line">*/</div><div class="line">$Container-&gt;set(<span class="string">'a2'</span>,<span class="string">'A'</span>);</div><div class="line"></div><div class="line">$a2 = $Container-&gt;get(<span class="string">'a2'</span>,<span class="keyword">array</span>(<span class="string">"小张"</span>));</div><div class="line"><span class="keyword">echo</span> $a2-&gt;name.<span class="string">"&lt;br/&gt;"</span>;<span class="comment">//小张</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* <span class="doctag">@brief</span> $Container-&gt;set 直接传入实例化的对象</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> 'a3'</div><div class="line">* <span class="doctag">@param</span> "小唐"</div><div class="line">*/</div><div class="line">$Container-&gt;set(<span class="string">'a3'</span>,<span class="keyword">new</span> A(<span class="string">"小唐"</span>));</div><div class="line"><span class="keyword">echo</span> $a3-&gt;name.<span class="string">"&lt;br/&gt;"</span>;<span class="comment">//小唐</span></div></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过上面的代码实例，我们可以看到php注入容器(数组)的三种方式</p>
<ul>
<li>匿名函数方式注册</li>
<li>类名方式注册</li>
<li>直接传入实例化的对象的注册<br>然后get方法<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取服务</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name,$params=[])</span></span>&#123;</div><div class="line"><span class="comment">//先从实例化的列表中查找</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_instances[$name]))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_instances[$name];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//检测有没有注册该服务</span></div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name]))&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$concrete = <span class="keyword">$this</span>-&gt;_binContainerngs[$name][<span class="string">'class'</span>];<span class="comment">//对象具体注册内容</span></div><div class="line"></div><div class="line">$obj = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> \Closure)&#123; <span class="comment">//匿名函数方式</span></div><div class="line">$obj = call_user_func_array($concrete,$params);</div><div class="line">&#125;<span class="keyword">elseif</span>(is_string($concrete))&#123; <span class="comment">//字符串方式</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($params))&#123;</div><div class="line">$obj = <span class="keyword">new</span> $concrete;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//带参数的类实例化,使用反射</span></div><div class="line">$class = <span class="keyword">new</span> \reflectionClass($concrete);</div><div class="line">$obj = $class-&gt;newInstanceArgs($params);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果是共享服务，则写入_instances列表，下次直接取回</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;_binContainerngs[$name][<span class="string">'shared'</span>]==<span class="keyword">true</span> &amp;&amp; $ojb)&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;_instances[$name]=$obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> $obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>实际上通过分析get方法对这三种注入方式的数组都做了对应的处理</p>
<h1 id="匿名方式"><a href="#匿名方式" class="headerlink" title="匿名方式"></a>匿名方式</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$Container-&gt;setShared(<span class="string">'a1'</span>,<span class="function"><span class="keyword">function</span><span class="params">($name=<span class="string">""</span>)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> A($name);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($concrete <span class="keyword">instanceof</span> \Closure)&#123; <span class="comment">//匿名函数方式</span></div><div class="line">$obj = call_user_func_array($concrete,$params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  首先通过<strong>$concrete instanceof \Closure</strong>来判断是否是匿名函数，然后通过<strong>call_user_func_array($concrete,$params)</strong>来调用这个函数，匿名方式注册的本身就是一个已经new的方法，自然get的时候就成功调用了这个已经实例化的方法。换句话说，匿名方式写的时候写的就是实例化的方法，容器的数组里面就存在了这个已经new的方法，只要判断是回调函数，就调用到了这个已经实例化的方法。</p>
<h1 id="类名方式注册"><a href="#类名方式注册" class="headerlink" title="类名方式注册"></a>类名方式注册</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$Container-&gt;set(<span class="string">'a2'</span>,<span class="string">'A'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#125;<span class="keyword">elseif</span>(is_string($concrete))&#123; <span class="comment">//字符串方式</span></div><div class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>($params))&#123;</div><div class="line">$obj = <span class="keyword">new</span> $concrete;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 直接以类名注册的方式比较简单，只要判断是字符串并且参数为空那么对应的get方法就会直接实例化（new）这个方法名，就比如上面的例子，直接就会实例化A这个方法名</p>
<h1 id="带参数的类实例化-使用反射-接口方式"><a href="#带参数的类实例化-使用反射-接口方式" class="headerlink" title="带参数的类实例化,使用反射(接口方式)"></a>带参数的类实例化,使用反射(接口方式)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$Container-&gt;set(<span class="string">'a3'</span>,<span class="keyword">new</span> A(<span class="string">"小唐"</span>));</div></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//带参数的类实例化,使用反射</span></div><div class="line">$class = <span class="keyword">new</span> \reflectionClass($concrete);</div><div class="line">$obj = $class-&gt;newInstanceArgs($params);</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>reflectionClass</strong>: ReflectionClass 类报告了一个类的有关信息。<br><strong>newInstanceArgs</strong>: ReflectionClass::newInstanceArgs — 从给出的参数创建一个新的类实例。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先说结论，&lt;strong&gt;容器&lt;/strong&gt;在php中是一组健值对，php容器类通过数组来控制对象的生成,资源的获取,销毁和处理对象和对象的依赖关系。&lt;/p&gt;
&lt;h3 id=&quot;我是傲娇的代码块&quot;&gt;&lt;a href=&quot;#我是傲娇的代码块&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://graychen.git.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>变身吧！我的linux配置环境</title>
    <link href="http://graychen.git.io/2016/10/18/%E5%8F%98%E8%BA%AB%E5%90%A7%EF%BC%81%E6%88%91%E7%9A%84linux%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>http://graychen.git.io/2016/10/18/变身吧！我的linux配置环境/</id>
    <published>2016-10-18T06:35:17.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<p> 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。</p>
<h1 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h1><p> <img src="/assets/blogImg/桌面带终端效果图.png" alt="&quot;我是傲娇的效果图&quot;"></p>
<h2 id="终端改造-Terminator"><a href="#终端改造-Terminator" class="headerlink" title="终端改造  Terminator"></a>终端改造  Terminator</h2><p>ubuntu自带的终端原本也不错，只是缺少分屏功能和强大的复制粘贴功能，所以就用Terminator来代替，其强大的分屏功能真是我的最爱了。</p>
<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>sudo apt-get install terminator</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><p>垂直分割窗口 <code>Ctrl+Shift+e</code><br>水平分割窗口 <code>Ctrl+Shift+o</code><br>复制         <code>Ctrl+Shift+c</code><br>粘贴         <code>Ctrl+Shift+v</code><br>切换窗口     <code>Ctrl+Shift+n</code><br>将分割的某个窗口放大至全屏使用         <code>Ctrl+Shift+x</code><br>从放大的某一窗口回到多窗口格局         <code>Ctrl+Shift+z</code><br> <img src="/assets/blogImg/多窗终端.png" alt="&quot;我是傲娇的效果图&quot;"></p>
<h3 id="终端主题"><a href="#终端主题" class="headerlink" title="终端主题"></a>终端主题</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-get install zsh</div><div class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh</div><div class="line">chsh -s `which zsh`</div><div class="line">sudo shutdown -r 0</div></pre></td></tr></table></figure>
<p> 我用的主题是<code>ys</code></p>
<h3 id="桌面主题"><a href="#桌面主题" class="headerlink" title="桌面主题"></a>桌面主题</h3><p> 首先在这里<a href="https://github.com/anmoljagetia/Flatabulous/archive/master.zip" target="_blank" rel="external">下载</a>主题包，将文件解压后移动到<code>/usr/share/themes/</code>,接着安装图标:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:noobslab/icons</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install ultra-flat-icons</div></pre></td></tr></table></figure></p>
<p> 然后需要<code>unity-tweak-tool</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install unity-tweak-tool</div><div class="line">sudo unity-tweak-tool</div></pre></td></tr></table></figure></p>
<p>在Themes和icons下分别选择刚刚的主题和图标，大功告成！</p>
<p> <img src="/assets/blogImg/选择主题.png" alt="&quot;我是傲娇的效果图&quot;"></p>
<p>完成后的样子<br> <img src="/assets/blogImg/桌面效果图.png" alt="&quot;我是傲娇的效果图&quot;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 我用的linux是ubuntu16长期支持版，自带的桌面太丑，自带的终端一直没有分屏功能，所以我就开始了改造工作。&lt;/p&gt;
&lt;h1 id=&quot;先上效果图&quot;&gt;&lt;a href=&quot;#先上效果图&quot; class=&quot;headerlink&quot; title=&quot;先上效果图&quot;&gt;&lt;/a&gt;先上效果图
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://graychen.git.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vichrome像vi一样操作你的chrome浏览器</title>
    <link href="http://graychen.git.io/2016/10/18/vichrome%E5%83%8Fvi%E4%B8%80%E6%A0%B7%E6%93%8D%E4%BD%9C%E4%BD%A0%E7%9A%84chrome%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://graychen.git.io/2016/10/18/vichrome像vi一样操作你的chrome浏览器/</id>
    <published>2016-10-18T01:24:53.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<p><strong>vichrome</strong>是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。<br>下面是它的操作命令：</p>
<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><ul>
<li>k 上移 </li>
<li>j 下移 </li>
<li>H 后退 </li>
<li>L 前进</li>
<li>gg 飞到顶部 </li>
<li>G 掉到底部 </li>
<li>gt 去下一个标签 (ctrl+l) </li>
<li>gT 去上一个标签 (ctrl+h)</li>
<li>t 新开一个标签 </li>
<li>x 关闭当前标签页 </li>
<li>X 关闭当前标签页并跳到下一个标签页  </li>
<li>u 恢复刚刚的标签页 </li>
<li>r 刷新 </li>
<li>f 进入f模式(可以点击链接) </li>
<li>F 在新标签中进入f模式 </li>
<li>i 聚焦在第一个输入框</li>
<li>esc 退出<h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2></li>
<li>ctrl+f 下一页</li>
<li>ctrl+b 上一页</li>
<li>ctrl+d 下半页</li>
<li>ctrl+u 上半页</li>
<li>/ 搜索</li>
<li>? 反向搜索</li>
<li>a 在带链接的文本中搜索</li>
<li>n 下一个搜索结果</li>
<li>N 上一个搜索结果</li>
<li>tab 下一个候补选项</li>
<li>shift+tab 上一个候补选项</li>
<li>: 进入命令模式</li>
<li>yy 复制url</li>
<li>p/P 打开刚刚复制的url</li>
<li>o/O 打开(输入url)</li>
<li>s/S 用搜索引擎搜索</li>
<li>b/B 打开收藏夹<h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2></li>
<li>gp 新开一个窗口(对当前标签页)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;vichrome&lt;/strong&gt;是一款chrome浏览器的插件,它让你可以像vi一样使用命令来操作你的浏览器，是提高效率的利器。&lt;br&gt;下面是它的操作命令：&lt;/p&gt;
&lt;h2 id=&quot;基础篇&quot;&gt;&lt;a href=&quot;#基础篇&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="http://graychen.git.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vi的使用总结</title>
    <link href="http://graychen.git.io/2016/09/21/vi%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://graychen.git.io/2016/09/21/vi的使用总结/</id>
    <published>2016-09-21T14:15:36.000Z</published>
    <updated>2017-05-07T14:20:07.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初级篇"><a href="#初级篇" class="headerlink" title="初级篇"></a>初级篇</h1><h2 id="移动篇"><a href="#移动篇" class="headerlink" title="移动篇"></a>移动篇</h2><ul>
<li>上 k</li>
<li>下 j</li>
<li>左 h</li>
<li><p>右 l</p>
</li>
<li><p>至顶 gg</p>
</li>
<li>至尾部 Shift+g</li>
<li><p>行跳转 行号+gg</p>
</li>
<li><p>行首 Shift+6 (^)</p>
</li>
<li><p>行尾 Shift+4 ($) </p>
</li>
<li><p>词组移动(词首) w </p>
</li>
<li>词组移动(词首) W </li>
<li>词组移动(词尾) e </li>
<li><p>词组移动(词尾) E </p>
</li>
<li><p>移动到查找的字母后 f</p>
</li>
<li>移动到查找的字母后 F</li>
</ul>
<h2 id="操作篇"><a href="#操作篇" class="headerlink" title="操作篇"></a>操作篇</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul>
<li>在单词前插入 i</li>
<li>在单词前插入 a</li>
<li>在句首前插入 I</li>
<li>在句尾插入 A</li>
<li>在下一行插入 o</li>
<li>在上一行插入 O<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3></li>
<li>删除光标行内容 d</li>
<li>删除光标至尾行内容 D</li>
<li>删除当前行及n-1行数 数字dd<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3></li>
<li>复制 yy</li>
<li>粘贴 p</li>
<li>替换插入 s</li>
<li>替换整句插入 S</li>
<li>替换单个字母 r</li>
<li>接下来的子都要替换 R</li>
<li>当前行替换第一个单词 :s/oldwords/newwords/</li>
<li>替换当前行所有单词 :s/oldwords/newwords/g</li>
<li>替换每一行的第一个单词 :%s/oldwords/newwords/</li>
<li>替换每一行的单词 :%s/oldwords/newwords/g</li>
</ul>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><ul>
<li>向后查找 /</li>
<li>向前查找 ?</li>
</ul>
<h2 id="选中篇"><a href="#选中篇" class="headerlink" title="选中篇"></a>选中篇</h2><ul>
<li>左选择 v+h</li>
<li>右选择 v+l</li>
<li>上选择 v+k</li>
<li><p>下选择 v+j</p>
</li>
<li><p>选择当前行V(shift+v) </p>
</li>
<li>选择向上行V+k(shift+v) </li>
<li><p>选择向下行V+j(shift+v) </p>
</li>
<li><p>括号内的选择 v+i+) (不含括号)</p>
</li>
<li><p>括号内的选择 v+a+) (包含括号)</p>
</li>
<li><p>居中显示 zz </p>
</li>
<li>头部显示 zt </li>
<li>尾巴显示 zb <h2 id="退出篇"><a href="#退出篇" class="headerlink" title="退出篇"></a>退出篇</h2></li>
<li>不保存退出 :q </li>
<li>保存退出 :wq </li>
<li>保存 :w </li>
<li>强制退出 :q! </li>
<li>强制退出 ctrl+z </li>
<li>恢复 fg<h2 id="文件切换篇"><a href="#文件切换篇" class="headerlink" title="文件切换篇"></a>文件切换篇</h2></li>
<li>向右切换 tg</li>
<li>向左切换 tG</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初级篇&quot;&gt;&lt;a href=&quot;#初级篇&quot; class=&quot;headerlink&quot; title=&quot;初级篇&quot;&gt;&lt;/a&gt;初级篇&lt;/h1&gt;&lt;h2 id=&quot;移动篇&quot;&gt;&lt;a href=&quot;#移动篇&quot; class=&quot;headerlink&quot; title=&quot;移动篇&quot;&gt;&lt;/a&gt;移动篇&lt;/h
    
    </summary>
    
      <category term="技术" scheme="http://graychen.git.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="编辑器" scheme="http://graychen.git.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
</feed>
