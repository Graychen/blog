<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-16T06:24:39.709Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Graychen,13780185250@sina.cn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于软件工程师的思考</title>
    <link href="http://yoursite.com/2019/10/16/%E5%85%B3%E4%BA%8E%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2019/10/16/关于软件工程师的思考/</id>
    <published>2019-10-16T04:40:13.000Z</published>
    <updated>2019-10-16T06:24:39.709Z</updated>
    
    <content type="html"><![CDATA[<p>最近经历了一次打击，被别人否定了能力和做事的态度，我觉得自身目前确实存在这些问题，希望通过博客来自省。问题的指出还是要尽可能的改正和克服，这样才能成长。</p><h1 id="缺乏工程师的思维模式"><a href="#缺乏工程师的思维模式" class="headerlink" title="缺乏工程师的思维模式"></a>缺乏工程师的思维模式</h1><p>这是我目前最大的问题，我现在debug的能力还是偏弱的，遇到bug常常是靠猜测，凭借经验去假设出现bug的原因，然后就是去谷歌，去搜索之前是否有别人已经解决过这个问题。<br>这其实是非常不好的表现，软件是千变万化的东西，这两种手段是非常偶发的，随机性很高的手段，不具有高效率和普遍性。软件的debug应该是一项工程调试，应该更多的关注软件<br>本身的结构，本身的运行流程，通过错误日志来定位问题，通过错误提示或者异常来判断问题可能的原因。我在debug的过程中太过关注解决问题这件事情，往往忽视了排查问题原因<br>的过程才是最重要的。一步一步按节奏不紧不慢地排查出问题的原因这个过程才是我接下来要努力提高的目标，近期要有意识地锻炼自己解决bug的能力，按照工程师的思维方式去排查<br>问题的原因。</p><h1 id="源码重要还是文档重要"><a href="#源码重要还是文档重要" class="headerlink" title="源码重要还是文档重要"></a>源码重要还是文档重要</h1><p>我之前非常重视文档，觉得文档是开发者的字典。但其实开发者在迭代的过程中是很容易忘记同时修改文档的，所以看源码远远比看文档要更准确，更能反映一个项目的业务逻辑。<br>而且另一方面，阅读源码你会更容易了解这个项目的来龙去脉，更能知道作者一些方法实现的过程，很容易知道这个项目的筋脉在哪里。之前一直不明白为什么要去看底层，为什么<br>要去看框架的源码，因为了解框架的源码会更容易知道这些方法在项目的哪里，原来是因为那样才可以使用这个方法的，从整体的角度来看开发。</p><h1 id="知其然，知其所以然"><a href="#知其然，知其所以然" class="headerlink" title="知其然，知其所以然"></a>知其然，知其所以然</h1><p>之前只知道一个东西的使用方法，但不知道它运行背后的原理，这个也是很重要的，一个方法的使用,原理和使用是相伴随行的，光是知道使用的话其实还是很难熟练变通的，要想游刃<br>有余还是要仔细地思考背后的原理,这样才能游刃有余的知道使用过程中这些问题的答案，本质的一些东西是不会轻易改变的，大多数新东西的原理还是老的，所以掌握背后的原理其实<br>还是更能知道这些新东西的使用。我的基础还是薄弱的，接下来一段时间要努力的补充基础知识，最基础的东西往往会影响一个软件的性能。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>以上就是这段时间的感悟，希望能在接下来的一段时间努力地客服这些东西，只有这样，同样的教训才不会再次发生，才能成长的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近经历了一次打击，被别人否定了能力和做事的态度，我觉得自身目前确实存在这些问题，希望通过博客来自省。问题的指出还是要尽可能的改正和克服，这样才能成长。&lt;/p&gt;
&lt;h1 id=&quot;缺乏工程师的思维模式&quot;&gt;&lt;a href=&quot;#缺乏工程师的思维模式&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="个人感悟" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>记录一次阿里云上docker启动不了的bug</title>
    <link href="http://yoursite.com/2019/10/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8Adocker%E5%90%AF%E5%8A%A8%E4%B8%8D%E4%BA%86%E7%9A%84bug/"/>
    <id>http://yoursite.com/2019/10/09/记录一次阿里云上docker启动不了的bug/</id>
    <published>2019-10-09T05:25:06.000Z</published>
    <updated>2019-10-09T05:34:15.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。"><a href="#最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。" class="headerlink" title="最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。"></a>最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: start-limit) since 六 2019-09-28 12:05:46 CST; 5min ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line">  Process: 1250 ExecStart=/usr/bin/dockerd --registry-mirror=39.98.73.138 --registry-mirror=&lt;your accelerate address&gt; --registry-mirror=&lt;your accelerate address&gt; --registry-mirror=&lt;your accelerate address&gt; -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 1250 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">9月 28 12:05:44 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">9月 28 12:05:44 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 28 12:05:44 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 28 12:05:44 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: docker.service failed.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: docker.service holdoff time over, scheduling restart.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: start request repeated too quickly for docker.service</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: docker.service failed.</span><br><span class="line">[root@iZ8vbcuptq5g86qk6lk4x1Z ~]# journalctl -xe</span><br><span class="line">--</span><br><span class="line">-- Unit docker.socket has finished shutting down.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Stopping Docker Socket for the API.</span><br><span class="line">-- Subject: Unit docker.socket has begun shutting down</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit docker.socket has begun shutting down.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Starting Docker Socket for the API.</span><br><span class="line">-- Subject: Unit docker.socket has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit docker.socket has begun starting up.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Listening on Docker Socket for the API.</span><br><span class="line">-- Subject: Unit docker.socket has finished start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit docker.socket has finished starting up.</span><br><span class="line">--</span><br><span class="line">-- The start-up result is done.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: start request repeated too quickly for docker.service</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">-- Subject: Unit docker.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit docker.service has failed.</span><br><span class="line">--</span><br><span class="line">-- The result is failed.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 28 12:05:46 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: docker.service failed.</span><br><span class="line">9月 28 12:10:01 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Started Session 6 of user root.</span><br><span class="line">-- Subject: Unit session-6.scope has finished start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit session-6.scope has finished starting up.</span><br><span class="line">--</span><br><span class="line">-- The start-up result is done.</span><br><span class="line">9月 28 12:10:01 iZ8vbcuptq5g86qk6lk4x1Z CROND[1271]: (root) CMD (/usr/lib64/sa/sa1 1 1)</span><br><span class="line">9月 28 12:20:01 iZ8vbcuptq5g86qk6lk4x1Z systemd[1]: Started Session 7 of user root.</span><br><span class="line">-- Subject: Unit session-7.scope has finished start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">--</span><br><span class="line">-- Unit session-7.scope has finished starting up.</span><br><span class="line">--</span><br><span class="line">-- The start-up result is done.</span><br><span class="line">9月 28 12:20:01 iZ8vbcuptq5g86qk6lk4x1Z CROND[1277]: (root) CMD (/usr/lib64/sa/sa1 1 1)</span><br><span class="line">lines 2500-2550/2550 (END)</span><br></pre></td></tr></table></figure><h1 id="解决的步骤"><a href="#解决的步骤" class="headerlink" title="解决的步骤:"></a>解决的步骤:</h1><p>1）清除/etc/systemd/system/目录下的 docker.service.requires这个目录的生成是安装别的系统Kubernete时生成的依赖信息。<br>个人总结：对这类问题清除/etc/systemd/system目录下不用的目录和文件是首选<br>2）执行systemctl daemon-reload或重启系统</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.talkwithtrend.com/Question/415283?order=desc" target="_blank" rel="noopener">启动DOCKER时，遇到一个很奇葩的问题？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。&quot;&gt;&lt;a href=&quot;#最近在阿里云上遇到一个docker启动不了的bug，解决的时间蛮久的，所以想记录一下。&quot; class=&quot;headerlink&quot; title=&quot;最近在阿里云
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>php利用puppeteer来抓取西瓜视频</title>
    <link href="http://yoursite.com/2019/08/26/php%E5%88%A9%E7%94%A8puppeteer%E6%9D%A5%E6%8A%93%E5%8F%96%E8%A5%BF%E7%93%9C%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2019/08/26/php利用puppeteer来抓取西瓜视频/</id>
    <published>2019-08-26T10:12:44.000Z</published>
    <updated>2019-08-26T10:39:16.097Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要抓取西瓜视频，却发现它的页面是react做的，动态的js渲染，使用普通的http只能抓到静态的页面，找了好久才发现可以使用无头的浏览器来渲染它的页面,而提供puppeteer就是对无界面的chrome浏览器的js组件<br>本来下载puppeteer的时候它会自动下载无头的chrome的,但是由于被墙的原因，这个方案不行，我后面是用了阿里的一个改进版的puppeteer库，但后面发现还是不行，最后我只能在我的docker里面先下chrome的组件了<br>下面是我的dockerfile<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> graychen/alpine-php7.<span class="number">1</span>:alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /var/www/html</span></span><br><span class="line"><span class="bash">COPY supervisord.conf /etc/supervisor/conf.d/</span></span><br><span class="line"><span class="bash">COPY . /var/www/html</span></span><br><span class="line"><span class="bash">ENV CHROME_BIN=<span class="string">"/usr/bin/chromium-browser"</span>\</span></span><br><span class="line"><span class="bash">    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=<span class="string">"true"</span></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">&amp;&amp; apk update \</span></span><br><span class="line"><span class="bash">&amp;&amp; apk upgrade \</span></span><br><span class="line"><span class="bash"><span class="comment"># replacing default repositories with edge ones</span></span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">"http://dl-cdn.alpinelinux.org/alpine/edge/testing"</span> &gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">"http://dl-cdn.alpinelinux.org/alpine/edge/community"</span> &gt;&gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">&amp;&amp; <span class="built_in">echo</span> <span class="string">"http://dl-cdn.alpinelinux.org/alpine/edge/main"</span> &gt;&gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="comment"># Add the packages</span></span></span><br><span class="line"><span class="bash">apk add --no-cache dumb-init curl make gcc g++ python linux-headers binutils-gold gnupg libstdc++ nss nodejs nodejs-npm \</span></span><br><span class="line"><span class="bash">  <span class="comment">#alsa-lib \</span></span></span><br><span class="line"><span class="bash">  <span class="comment">#at-spi2-atk \</span></span></span><br><span class="line"><span class="bash">  <span class="comment">#atk \</span></span></span><br><span class="line"><span class="bash">  cairo \</span></span><br><span class="line"><span class="bash">  cups-libs \</span></span><br><span class="line"><span class="bash">  dbus-libs \</span></span><br><span class="line"><span class="bash">  eudev-libs \</span></span><br><span class="line"><span class="bash">  expat \</span></span><br><span class="line"><span class="bash">  flac \</span></span><br><span class="line"><span class="bash">  gdk-pixbuf \</span></span><br><span class="line"><span class="bash">  glib \</span></span><br><span class="line"><span class="bash">  libgcc \</span></span><br><span class="line"><span class="bash">  libjpeg-turbo \</span></span><br><span class="line"><span class="bash">  libpng \</span></span><br><span class="line"><span class="bash">  libwebp \</span></span><br><span class="line"><span class="bash">  libx11 \</span></span><br><span class="line"><span class="bash">  libxcomposite \</span></span><br><span class="line"><span class="bash">  libxdamage \</span></span><br><span class="line"><span class="bash">  libxext \</span></span><br><span class="line"><span class="bash">  libxfixes \</span></span><br><span class="line"><span class="bash">  tzdata \</span></span><br><span class="line"><span class="bash">  libexif \</span></span><br><span class="line"><span class="bash">  udev \</span></span><br><span class="line"><span class="bash">  xvfb \</span></span><br><span class="line"><span class="bash">  zlib-dev \</span></span><br><span class="line"><span class="bash">  chromium \</span></span><br><span class="line"><span class="bash">  chromium-chromedriver &amp;&amp; \</span></span><br><span class="line"><span class="bash">npm install cnpm -g --registry=https://r.npm.taobao.org &amp;&amp; \</span></span><br><span class="line"><span class="bash">cnpm install puppeteer@0.13.0  &amp;&amp; \</span></span><br><span class="line"><span class="bash">apk del --no-cache make gcc g++ python binutils-gold gnupg libstdc++ &amp;&amp; \</span></span><br><span class="line"><span class="bash">docker-php-ext-install sockets</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"/usr/bin/supervisord"</span>, <span class="string">"-n"</span>, <span class="string">"-c"</span>,  <span class="string">"/etc/supervisor/conf.d/supervisord.conf"</span>]%</span></span><br></pre></td></tr></table></figure></p><p>因为我本身是用php，所以要下这个使用别人已经封装好的composer包<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer <span class="keyword">require</span> jaeger/querylist-puppeteer</span><br></pre></td></tr></table></figure></p><p>然后安装Node依赖（与composer一样在项目根目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nesk/puphpeteer</span><br></pre></td></tr></table></figure></p><p>下面是这个组件的用法<br>在QueryList中注册插件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">QL</span>\<span class="title">QueryList</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">QL</span>\<span class="title">Ext</span>\<span class="title">Chrome</span>;</span><br><span class="line"></span><br><span class="line">$ql = QueryList::getInstance();</span><br><span class="line"><span class="comment">// 注册插件，默认注册的方法名为: chrome</span></span><br><span class="line">$ql-&gt;use(Chrome::class);</span><br><span class="line"><span class="comment">// 或者自定义注册的方法名</span></span><br><span class="line">$ql-&gt;use(Chrome::class,<span class="string">'chrome'</span>);</span><br></pre></td></tr></table></figure></p><p>基本用法<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抓取的目标页面是使用Vue.js动态渲染的页面</span></span><br><span class="line">$text = $ql-&gt;chrome(<span class="string">'https://www.iviewui.com/components/button'</span>)-&gt;find(<span class="string">'h1'</span>)-&gt;text();</span><br><span class="line">print_r($text);</span><br><span class="line"><span class="comment">// 输出: Button 按钮</span></span><br><span class="line">$rules = [</span><br><span class="line"> <span class="string">'h1'</span> =&gt; [<span class="string">'h1'</span>,<span class="string">'text'</span>]</span><br><span class="line">];</span><br><span class="line">$ql = $ql-&gt;chrome(<span class="string">'https://www.iviewui.com/components/button'</span>);</span><br><span class="line">$data = $ql-&gt;rules($rules)-&gt;queryData();</span><br></pre></td></tr></table></figure></p><p>后面我优化了一下参数,我将抓取的步骤放到了队列中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public function execute($queue)</span><br><span class="line">    &#123;</span><br><span class="line">            $ql = QueryList::getInstance();</span><br><span class="line">                // 注册插件，默认注册的方法名为: chrome</span><br><span class="line">                $ql-&gt;use(Chrome::class);</span><br><span class="line">                $ql-&gt;use(Chrome::class,&apos;chrome&apos;);</span><br><span class="line">                $url = &apos;https://www.ixigua.com/&apos;.$this-&gt;jumpUrl;</span><br><span class="line">                $text = $ql-&gt;chrome($url,[executablePath =&gt; &apos;/usr/bin/chromium-browser&apos;, args=&gt; [&apos;--no-sandbox&apos;, &apos;--disable-setuid-sandbox&apos;,&apos;--proxy-server=&quot;direct://&quot;&apos;,</span><br><span class="line">                &apos;--proxy-bypass-list=*&apos;,&apos;–disable-gpu&apos;,</span><br><span class="line">                &apos;–disable-dev-shm-usage&apos;,</span><br><span class="line">                &apos;–disable-setuid-sandbox&apos;,</span><br><span class="line">                &apos;–no-first-run&apos;,</span><br><span class="line">                &apos;–no-zygote&apos;,</span><br><span class="line">                &apos;–single-process&apos;]],</span><br><span class="line">                function ($page,$browser) &#123;</span><br><span class="line">                    $page-&gt;setUserAgent(&apos;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36&apos;);</span><br><span class="line">                    // 设置cookie</span><br><span class="line">                    $page-&gt;setCookie([</span><br><span class="line">                    &apos;name&apos; =&gt; &apos;foo&apos;,</span><br><span class="line">                    &apos;value&apos; =&gt; &apos;xxx&apos;,</span><br><span class="line">                    &apos;url&apos; =&gt; $url</span><br><span class="line">                    ],[</span><br><span class="line">                    &apos;name&apos; =&gt; &apos;foo2&apos;,</span><br><span class="line">                    &apos;value&apos; =&gt; &apos;yyy&apos;,</span><br><span class="line">                    &apos;url&apos; =&gt; $url</span><br><span class="line">                    ]);</span><br><span class="line">                    $page-&gt;goto($url);</span><br><span class="line">                    // 等待h1元素出现</span><br><span class="line">                    $page-&gt;waitFor(&apos;#vs&apos;);</span><br><span class="line">                    $page-&gt;waitFor(&apos;xg-poster&apos;);</span><br><span class="line">                    $page-&gt;waitForNavigation();</span><br><span class="line">                    $page-&gt;screenshot([</span><br><span class="line">                        &apos;path&apos; =&gt; &apos;page.png&apos;,</span><br><span class="line">                        &apos;fullPage&apos; =&gt; true</span><br><span class="line">                    ]);</span><br><span class="line">                    // 获取页面HTML内容</span><br><span class="line">                    $html = $page-&gt;content();</span><br><span class="line">                    // 关闭浏览器</span><br><span class="line">                    $browser-&gt;close();</span><br><span class="line">                    // 返回值一定要是页面的HTML内容</span><br><span class="line">                    return $html;</span><br><span class="line">                &#125;)-&gt;getHtml();</span><br><span class="line">                $img = &quot;#&lt;xg-poster.*&gt;([^&lt;]*)&lt;/xg-poster&gt;#&quot;;</span><br><span class="line">                preg_match($img, $text, $contentImg);</span><br><span class="line">                $str = explode(&quot;;&quot;,$contentImg[0]);</span><br><span class="line">                $strUrl = explode(&quot;&amp;&quot;,$str[1]);</span><br><span class="line">                $imgUrl=$strUrl[0];</span><br><span class="line">                $s = file_get_contents($imgUrl);</span><br><span class="line">                $moive = new Moive();</span><br><span class="line">                $dir = \Yii::getAlias(&apos;@frontend&apos;) . &apos;/web/uploads/cover/&apos;.date(&apos;Ymd&apos;);</span><br><span class="line">                if(!is_dir($dir)) &#123;</span><br><span class="line">                    mkdir($dir);</span><br><span class="line">                &#125;</span><br><span class="line">                $imgShotPath=&apos;cover/&apos;.date(&apos;Ymd&apos;).&apos;/&apos;.time().&apos;.jpg&apos;;</span><br><span class="line">                $imgPath = $dir.&apos;/&apos;.time().&apos;.jpg&apos;;</span><br><span class="line">                file_put_contents($imgPath, $s);</span><br><span class="line">                $head=&quot;#&lt;h1&gt;([^&lt;]*)&lt;/h1&gt;#&quot;;</span><br><span class="line">                preg_match($head, $text, $contentHead);</span><br><span class="line">                $regex = &quot;/src=\s*[\&apos;|\&quot;]+?(.*?)[\&apos;|\&quot;]+?/&quot;;</span><br><span class="line">                $return = preg_match_all($regex, $text, $content);</span><br><span class="line">                $pathUrl = $content[1][4];</span><br><span class="line">                $s = file_get_contents($pathUrl);</span><br><span class="line">                $dir = \Yii::getAlias(&apos;@frontend&apos;) . &apos;/web/uploads/video/&apos;.date(&apos;Ymd&apos;);</span><br><span class="line">                if(!is_dir($dir)) &#123;</span><br><span class="line">                    mkdir($dir);</span><br><span class="line">                &#125;</span><br><span class="line">                $videoShotPath = &apos;video/&apos;.date(&apos;Ymd&apos;).&apos;/&apos;.time().&apos;.mp4&apos;;</span><br><span class="line">                $videoPath = $dir.&apos;/&apos;.time().&apos;.mp4&apos;;</span><br><span class="line">                file_put_contents($videoPath, $s);</span><br><span class="line">                $contentArray = explode(&quot;：&quot;, $contentHead[1]);</span><br><span class="line">                $describe=$contentArray[1];</span><br><span class="line">                $status = Moive::STATUS_SHOW;</span><br><span class="line">                $num = 0;</span><br><span class="line">                $this-&gt;saveData($moive, $describe, $status, $num, $imgShotPath, $videoShotPath);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>其实我现在的代码还有个问题，就是渲染出来的页面有时候没有渲染好就打印出来了，接下来看看怎么优化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想要抓取西瓜视频，却发现它的页面是react做的，动态的js渲染，使用普通的http只能抓到静态的页面，找了好久才发现可以使用无头的浏览器来渲染它的页面,而提供puppeteer就是对无界面的chrome浏览器的js组件&lt;br&gt;本来下载puppeteer的时候它会自动下
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>在minikube部署个node服务</title>
    <link href="http://yoursite.com/2019/08/22/%E5%9C%A8minikube%E9%83%A8%E7%BD%B2%E4%B8%AAnode%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/08/22/在minikube部署个node服务/</id>
    <published>2019-08-22T10:51:09.000Z</published>
    <updated>2019-08-22T11:10:28.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建Node-js应用程序"><a href="#创建Node-js应用程序" class="headerlink" title="创建Node.js应用程序"></a>创建Node.js应用程序</h2><p>先编写server.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> handleRequest = <span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received request for URL: '</span> + request.url);</span><br><span class="line">  response.writeHead(<span class="number">200</span>);</span><br><span class="line">  response.end(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> www = http.createServer(handleRequest);</span><br><span class="line">www.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure></p><p>然后在<a href="http://localhost:8080/中看到&quot;Hello" target="_blank" rel="noopener">http://localhost:8080/中看到&quot;Hello</a> World”</p><h2 id="创建Docker容器镜像"><a href="#创建Docker容器镜像" class="headerlink" title="创建Docker容器镜像"></a>创建Docker容器镜像</h2><p>在hellonode文件夹中创建一个Dockerfile命名的文件。Dockerfile描述了build的镜像，通过现有的镜像扩展（extend）build Docker容器镜像，本教程中的镜像扩展（extend）了现有的Node.js镜像。<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">6.9</span>.<span class="number">2</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> server.js .</span></span><br><span class="line"><span class="bash">CMD node server.js</span></span><br></pre></td></tr></table></figure></p><p>确保使用Minikube Docker守护进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval $(minikube docker-env)</span><br></pre></td></tr></table></figure></p><p>注意：如果不在使用Minikube主机时，可以通过运行eval $(minikube docker-env -u)来撤消此更改。<br>使用Minikube Docker守护进程build Docker镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-node:v1 .</span><br></pre></td></tr></table></figure></p><h2 id="创建Deployment"><a href="#创建Deployment" class="headerlink" title="创建Deployment"></a>创建Deployment</h2><p>使用kubectl run命令创建Deployment来管理Pod。Pod根据hello-node:v1Docker运行容器镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run hello-node --image=hello-node:v1 --port=8080</span><br></pre></td></tr></table></figure></p><p>查看Deployment：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployments</span><br></pre></td></tr></table></figure></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">hello-node   1         1         1            1           3m</span><br></pre></td></tr></table></figure><p>查看Pod：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                         READY     STATUS    RESTARTS   AGE</span><br><span class="line">hello-node-714049816-ztzrb   1/1       Running   0          6m</span><br></pre></td></tr></table></figure></p><p>查看群集events：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get events</span><br></pre></td></tr></table></figure><p>查看kubectl配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl config view</span><br></pre></td></tr></table></figure></p><h2 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h2><p>默认情况，这Pod只能通过Kubernetes群集内部IP访问。要使hello-node容器从Kubernetes虚拟网络外部访问，须要使用Kubernetes Service暴露Pod。<br>我们可以使用kubectl expose命令将Pod暴露到外部环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment hello-node --type=LoadBalancer</span><br></pre></td></tr></table></figure></p><p>查看刚创建的Service：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get services</span><br></pre></td></tr></table></figure></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">hello-node   10.0.0.71    &lt;pending&gt;     8080/TCP   6m</span><br><span class="line">kubernetes   10.0.0.1     &lt;none&gt;        443/TCP    14d</span><br></pre></td></tr></table></figure><p>通过–type=LoadBalancer flag来在群集外暴露Service，在支持负载均衡的云提供商上，将配置外部IP地址来访问Service。在Minikube上，该LoadBalancer type使服务可以通过minikube Service 命令访问。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube service hello-node</span><br></pre></td></tr></table></figure></p><p>将打开浏览器，在本地IP地址为应用提供服务，显示“Hello World”的消息。<br>最后可以查看到一些日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl logs &lt;POD-NAME&gt;</span><br></pre></td></tr></table></figure></p><p>更新应用程序<br>编辑server.js文件以返回新消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.end(&apos;Hello World Again!&apos;);</span><br></pre></td></tr></table></figure></p><p>build新版本镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t hello-node:v2 .</span><br></pre></td></tr></table></figure></p><p>Deployment更新镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl set image deployment/hello-node hello-node=hello-node:v2</span><br></pre></td></tr></table></figure></p><p>再次运行应用以查看新消息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube service hello-node</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;创建Node-js应用程序&quot;&gt;&lt;a href=&quot;#创建Node-js应用程序&quot; class=&quot;headerlink&quot; title=&quot;创建Node.js应用程序&quot;&gt;&lt;/a&gt;创建Node.js应用程序&lt;/h2&gt;&lt;p&gt;先编写server.js&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
    
      <category term="DevOps" scheme="http://yoursite.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes本地实验环境</title>
    <link href="http://yoursite.com/2019/08/22/Kubernetes%E6%9C%AC%E5%9C%B0%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/08/22/Kubernetes本地实验环境/</id>
    <published>2019-08-22T05:12:59.000Z</published>
    <updated>2019-08-22T05:25:08.802Z</updated>
    
    <content type="html"><![CDATA[<p>最近在配置本地的k8s环境，由于网络原因，老是配置不成，偶然发现了阿里改版的minikube，<br>所以使用这个minikube来安装.<br>我是mac电脑，首先<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubernetes-cli</span><br></pre></td></tr></table></figure></p><p>然后确认是否安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl version</span><br></pre></td></tr></table></figure></p><p>接着安装<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VitualBox</a><br>然后安装改版的minikube<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Lo minikube http://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.2.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure></p><p>接着启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube start --registry-mirror=https://registry.docker-cn.com</span><br></pre></td></tr></table></figure></p><p>打开Kubernetes控制台<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">Minikube - Kubernetes本地实验环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在配置本地的k8s环境，由于网络原因，老是配置不成，偶然发现了阿里改版的minikube，&lt;br&gt;所以使用这个minikube来安装.&lt;br&gt;我是mac电脑，首先&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="DevOps" scheme="http://yoursite.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>mac终端走shadowsocks代理</title>
    <link href="http://yoursite.com/2019/08/22/mac%E7%BB%88%E7%AB%AF%E8%B5%B0shadowsocks%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/08/22/mac终端走shadowsocks代理/</id>
    <published>2019-08-22T03:44:23.000Z</published>
    <updated>2019-08-22T05:32:02.065Z</updated>
    
    <content type="html"><![CDATA[<p>shadowsocks设置为：</p><p>打开shadowsocks<br>自动代理模式<br>服务器（香港阿里云）<br>以zsh作为说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ vim ~/.zshrc</span><br></pre></td></tr></table></figure></p><p>添加如下代理配置:</p><h1 id="proxy-list"><a href="#proxy-list" class="headerlink" title="proxy list"></a>proxy list</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> proxy=<span class="string">'export all_proxy=socks5://127.0.0.1:1080'</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">'unset all_proxy'</span></span><br><span class="line">:wq保存退出</span><br><span class="line">➜  ~ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>使用proxy前先查看下当前的ip地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl ip.cn</span><br><span class="line">当前 IP：112.64.xxx.xx 来自：上海市 联通</span><br><span class="line">或者</span><br><span class="line">~ curl cip.cc</span><br><span class="line">IP: 140.206.97.42</span><br><span class="line">地址: 中国  上海</span><br><span class="line"></span><br><span class="line">数据二: 上海市 | 联通</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/140.206.97.42</span><br><span class="line">执行:</span><br><span class="line"></span><br><span class="line">➜  ~ proxy</span><br><span class="line">➜  ~ curl ip.cn</span><br><span class="line">当前 IP：47.89.xx.xxx 来自：香港特别行政区 阿里云</span><br><span class="line">如果ip.cn不能用，可以换个类似的站点查询</span><br><span class="line">~ curl cip.cc</span><br><span class="line">IP: 45.78.47.19</span><br><span class="line">地址: 美国  加利福尼亚</span><br><span class="line"></span><br><span class="line">数据二: 美国 | 加利福尼亚州洛杉矶市 IT7 Networks</span><br><span class="line"></span><br><span class="line">URL: http://www.cip.cc/45.78.47.19</span><br></pre></td></tr></table></figure><p>没问题，终端走了代理，brew update顺畅了- -</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shadowsocks设置为：&lt;/p&gt;
&lt;p&gt;打开shadowsocks&lt;br&gt;自动代理模式&lt;br&gt;服务器（香港阿里云）&lt;br&gt;以zsh作为说明&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>解析jwt</title>
    <link href="http://yoursite.com/2019/08/21/%E8%A7%A3%E6%9E%90jwt/"/>
    <id>http://yoursite.com/2019/08/21/解析jwt/</id>
    <published>2019-08-21T11:01:07.000Z</published>
    <updated>2019-08-21T13:09:47.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jwt是什么"><a href="#jwt是什么" class="headerlink" title="jwt是什么"></a>jwt是什么</h1><p>jwt全称是JSON Web Token，是目前流行的跨域认证解决方案</p><h1 id="为什么使用jwt"><a href="#为什么使用jwt" class="headerlink" title="为什么使用jwt"></a>为什么使用jwt</h1><p>要知道为什么使用jwt，我们先来看看传统的认证方式<br>1、用户向服务器发送用户名和密码。<br>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。<br>3、服务器向用户返回一个 session_id，写入用户的 Cookie。<br>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。<br>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。<br>这种方式的扩展性不好，如果是服务器集群，就要求session数据共享，每台服务器都能读取session<br>一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。<br>另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。</p><h1 id="jwt的原理"><a href="#jwt的原理" class="headerlink" title="jwt的原理"></a>jwt的原理</h1><p>jwt的原理是服务器认证后，生成一个JSON对象，发回给用户<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"姓名"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="attr">"角色"</span>: <span class="string">"管理员"</span>,</span><br><span class="line">  <span class="attr">"到期时间"</span>: <span class="string">"2018年7月1日0点0分"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。<br>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h1 id="jwt的数据结构"><a href="#jwt的数据结构" class="headerlink" title="jwt的数据结构"></a>jwt的数据结构</h1><p>它是一个很长的字符串，中间用点（.）分隔成三个部分。例如<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1bmlvbmlkIjoiMDdhMjIwMDE5ODI1YWY5YjYwZDVlYWI1NGI1OTNkYmYiLCJ3eF91bmlvbmlkIjpudWxsLCJwbGF0Zm9ybSI6IkhXTUNfQVBQIiwiZXhwaXJlX2F0IjoxNTY3MjIxMDY5fQ.AsdOrML1WrCBtOiCs4afi5cCPbWK5dLPO_29Vb1w0EE</span><br></pre></td></tr></table></figure></p><blockquote><blockquote><blockquote><p>jwt的三个部分如下</p><ul><li>Header(头部)</li><li>Payload(负载)</li><li>Signature(签名)<br>写成一行就是<em>Header.Payload.Signature</em><br>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote></blockquote></blockquote><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。<br>3.2 Payload<br>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure></p><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sub"</span>: <span class="string">"1234567890"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"John Doe"</span>,</span><br><span class="line">  <span class="attr">"admin"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。<br>这个json对象使用Base64URL 算法转成字符串<br>3.3 Signature<br>Signature 部分是对前两部分的签名，防止数据篡改。<br>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">"."</span> +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure></p><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><h2 id="jwt的使用方式"><a href="#jwt的使用方式" class="headerlink" title="jwt的使用方式"></a>jwt的使用方式</h2><p>jwt可以存储在cookie里，也可以存储在localStorage<br>在header里面放 Authorization: Bearer <token><br>也可以放在post的请求数据体里<br>代码实现<br><a href="https://github.com/firebase/php-jwt" target="_blank" rel="noopener">参考这个jwt类</a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($payload, $key, $alg = <span class="string">'HS256'</span>, $keyId = null, $head = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $header = <span class="keyword">array</span>(<span class="string">'typ'</span> =&gt; <span class="string">'JWT'</span>, <span class="string">'alg'</span> =&gt; $alg);</span><br><span class="line">        <span class="keyword">if</span> ($keyId !== <span class="keyword">null</span>) &#123;</span><br><span class="line">            $header[<span class="string">'kid'</span>] = $keyId;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">isset</span>($head) &amp;&amp; is_array($head) ) &#123;</span><br><span class="line">            $header = array_merge($head, $header);</span><br><span class="line">        &#125;</span><br><span class="line">        $segments = <span class="keyword">array</span>();</span><br><span class="line">        $segments[] = <span class="keyword">static</span>::urlsafeB64Encode(<span class="keyword">static</span>::jsonEncode($header));</span><br><span class="line">        $segments[] = <span class="keyword">static</span>::urlsafeB64Encode(<span class="keyword">static</span>::jsonEncode($payload));</span><br><span class="line">        $signing_input = implode(<span class="string">'.'</span>, $segments);</span><br><span class="line"></span><br><span class="line">        $signature = <span class="keyword">static</span>::sign($signing_input, $key, $alg);</span><br><span class="line">        $segments[] = <span class="keyword">static</span>::urlsafeB64Encode($signature);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> implode(<span class="string">'.'</span>, $segments);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></token></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jwt是什么&quot;&gt;&lt;a href=&quot;#jwt是什么&quot; class=&quot;headerlink&quot; title=&quot;jwt是什么&quot;&gt;&lt;/a&gt;jwt是什么&lt;/h1&gt;&lt;p&gt;jwt全称是JSON Web Token，是目前流行的跨域认证解决方案&lt;/p&gt;
&lt;h1 id=&quot;为什么使用j
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>mac下配置vscode的xdebug</title>
    <link href="http://yoursite.com/2019/08/21/mac%E4%B8%8B%E9%85%8D%E7%BD%AEvscode%E7%9A%84xdebug/"/>
    <id>http://yoursite.com/2019/08/21/mac下配置vscode的xdebug/</id>
    <published>2019-08-21T10:39:44.000Z</published>
    <updated>2019-08-22T05:26:09.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路"><a href="#最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路" class="headerlink" title="最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路"></a>最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路</h1><h2 id="首先下载xdebug的扩展"><a href="#首先下载xdebug的扩展" class="headerlink" title="首先下载xdebug的扩展"></a>首先下载xdebug的扩展</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl install xdebug</span><br></pre></td></tr></table></figure><h3 id="配置php-ini"><a href="#配置php-ini" class="headerlink" title="配置php.ini"></a>配置php.ini</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zend_extension=<span class="string">"xdebug.so"</span></span><br><span class="line">xdebug.profiler_enable = on</span><br><span class="line">xdebug.trace_output_dir = <span class="string">"/data/logs/xdebug"</span></span><br><span class="line">xdebug.profile_output_dir = <span class="string">"/data/logs/xdebug"</span></span><br><span class="line">xdebug.remote_enable = <span class="number">1</span></span><br><span class="line">xdebug.remote_autostart = <span class="number">1</span></span><br><span class="line">xdebug.remote_host = <span class="string">"localhost"</span></span><br><span class="line">xdebug.remote_port = <span class="number">9000</span></span><br><span class="line">xdebug.idekey = <span class="string">"phpStorm"</span></span><br></pre></td></tr></table></figure><h3 id="保存并退出，重启php-fpm"><a href="#保存并退出，重启php-fpm" class="headerlink" title="保存并退出，重启php-fpm"></a>保存并退出，重启php-fpm</h3> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services restart php72</span><br></pre></td></tr></table></figure><h2 id="二、VS-Code-配置"><a href="#二、VS-Code-配置" class="headerlink" title="二、VS Code 配置"></a>二、VS Code 配置</h2><p>1.安装 PHP Debug 扩展<br>2.左侧调试按钮 - 左侧顶部调试[Listen for XDebug]，设置<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="string">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Listen for Xdebug"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"php"</span>,</span><br><span class="line">        <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">9000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Launch currently open script"</span>,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"php"</span>,</span><br><span class="line">        <span class="string">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">        <span class="string">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">        <span class="string">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">        <span class="string">"port"</span>: <span class="number">9001</span></span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="然后就可以利用xdebug调试php了"><a href="#然后就可以利用xdebug调试php了" class="headerlink" title="然后就可以利用xdebug调试php了"></a>然后就可以利用xdebug调试php了</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路&quot;&gt;&lt;a href=&quot;#最近将mac环境下的vscode配置了xdebug，因为配置的比较曲折，所以决定记录下思路&quot; class=&quot;headerlink&quot; title=&quot;最近
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>秒杀防止库存超卖的思路</title>
    <link href="http://yoursite.com/2019/07/25/%E7%A7%92%E6%9D%80%E9%98%B2%E6%AD%A2%E5%BA%93%E5%AD%98%E8%B6%85%E5%8D%96%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://yoursite.com/2019/07/25/秒杀防止库存超卖的思路/</id>
    <published>2019-07-25T08:09:11.000Z</published>
    <updated>2019-07-25T08:09:11.055Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql优化总结</title>
    <link href="http://yoursite.com/2019/04/27/mysql%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/27/mysql优化总结/</id>
    <published>2019-04-27T09:00:21.000Z</published>
    <updated>2019-07-23T12:19:48.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近总结下mysql的优化思路，希望接下来能看到这篇文章回忆和参考</p><h1 id="优化sql语句"><a href="#优化sql语句" class="headerlink" title="优化sql语句"></a>优化sql语句</h1><h2 id="通过show-status命令了解各种sql的执行效率"><a href="#通过show-status命令了解各种sql的执行效率" class="headerlink" title="通过show status命令了解各种sql的执行效率"></a>通过show status命令了解各种sql的执行效率</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;Com_%&apos;;</span><br></pre></td></tr></table></figure><ul><li>Com_select:执行select操作的次数，一次查询只增加1</li><li>Com_insert:执行insert操作的次数，对于批量插入的insert操作，只累加一次</li><li>Com_update: 执行update操作的次数</li><li>Com_delete: 执行delete操作的次数<br>对InnoDB存储引擎<br>Innodb_rows_read: select查询返回的行数<br>Innodb_rows_inserted: 执行insert操作的行数<br>Innodb_rows_update: 执行update操作更新的行数<br>Innodb_rows_delete: 执行delete操作的行数<br>了解当前数据以插入更新为主还是以查询为主，各种类型sql的执行比例。对于更新操作的计数，是执行次数的计数。通过com_commit和Com_rollback可以了解事务提交和回滚的情况<h2 id="定位执行效率较低的sql语句"><a href="#定位执行效率较低的sql语句" class="headerlink" title="定位执行效率较低的sql语句"></a>定位执行效率较低的sql语句</h2></li><li>通过慢查询日志定位那些执行效率低的sql语句，用–log-slow-queries=[filename]</li><li>通过show processlist命令查看mysql进行的线程，包括线程的状态，是否锁表<h2 id="通过explain分析sql的执行计划"><a href="#通过explain分析sql的执行计划" class="headerlink" title="通过explain分析sql的执行计划"></a>通过explain分析sql的执行计划</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> mysql&gt; explain select sum(amount) from customer a , payment b where <span class="number">1</span>=<span class="number">1</span> a.customer_id = b.customer_id <span class="keyword">and</span> email = <span class="string">'JANE.BENNETT@SAKILACUSTOMER.org'</span>\G</span><br><span class="line">***************<span class="number">1.</span> row*********************</span><br><span class="line">id:<span class="number">1</span></span><br><span class="line">select_type:SIMPLE</span><br><span class="line">table:a</span><br><span class="line">type:ALL</span><br><span class="line">possible_keys:PRIMARY</span><br><span class="line">key:<span class="keyword">NULL</span></span><br><span class="line">key_len:<span class="keyword">NULL</span></span><br><span class="line">ref:<span class="keyword">NULL</span></span><br><span class="line">ROWS:<span class="number">583</span></span><br><span class="line">***************<span class="number">2.</span> row*********************</span><br><span class="line">id:<span class="number">2</span></span><br><span class="line">select_type:SIMPLE</span><br><span class="line">table:b</span><br><span class="line">type: ref</span><br><span class="line">possible_keys:idx_fk_customer_id</span><br><span class="line">key:idx_fk_customer_id</span><br><span class="line">key_len:<span class="number">2</span></span><br><span class="line">ref:sakila.a.customer_id</span><br><span class="line">ROWS:<span class="number">12</span></span><br><span class="line">************************************</span><br></pre></td></tr></table></figure></li></ul><blockquote></blockquote><p>slect_type: select的类型</p><ul><li>SIMPLE(简单表，不使用表连接或者子查询)</li><li>PRIMARY(主查询:外层的查询)</li><li>UNION(UNION中的第二个或者后面的查询语句)</li><li>SUBQUERY(子查询中的第一个SELECT)<br>table:输出结果集的表<br>type:</li><li>ALL 全表扫描（表里全表来找到匹配的行）</li><li>index 索引全扫描 (遍历索引来查询匹配的行)</li><li>range 索引范围扫描 (常见&lt; &gt; &lt;= &gt;= between)</li><li>ref 非唯一索引扫描表</li><li>eq_ref 唯一索引扫描表 </li><li>const/system 最多有一个匹配行<br>NULL：不用访问表或者索引</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近总结下mysql的优化思路，希望接下来能看到这篇文章回忆和参考&lt;/p&gt;
&lt;h1 id=&quot;优化sql语句&quot;&gt;&lt;a href=&quot;#优化sql语句&quot; class=&quot;headerlink&quot; title=&quot;优化sql语句&quot;&gt;&lt;/a&gt;优化sql语句&lt;/h1&gt;&lt;h2 id=&quot;通过sh
      
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hprose使用说明</title>
    <link href="http://yoursite.com/2018/05/20/Hprose%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/05/20/Hprose使用说明/</id>
    <published>2018-05-20T04:37:25.000Z</published>
    <updated>2019-03-27T13:25:38.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hprose(High Performance Remote Object Service Engine)<br>是一款先进的轻量级、跨语言、跨平台、无侵入式、高性能动态远程对象调用引擎库。它不仅简单易用，而且功能强大。 你无需专门学习，只需看上几眼，就能用它轻松构建分布式应用系统。</p><h1 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a>使用手册</h1><h1 id="案例-php"><a href="#案例-php" class="headerlink" title="案例(php)"></a>案例(php)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>使用<code>composer require hprose/hprose</code><br>如果你正在使用 composer 管理你的项目，那么你不需要做任何特别处理。只要在 composer.json 中的 require 段添加了对 hprose/hprose 的引用就可以了。如果你需要 swoole 支持，添加 hprose/hprose-swoole 就可以了。<br>然后在代码中这样引用</li></ul><a id="more"></a><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Hprose\Swoole\Http\Server;</span><br><span class="line"></span><br><span class="line">//定义Hello服务</span><br><span class="line">function hello($name) &#123;</span><br><span class="line">    return &quot;Hello $name!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//发布服务器</span><br><span class="line">$server = new Server();</span><br><span class="line"></span><br><span class="line">//注册hello方法</span><br><span class="line">$server-&gt;addFunction(&apos;hello&apos;);</span><br><span class="line"></span><br><span class="line">$server-&gt;start();</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Hprose</span>\<span class="title">Client</span>;</span><br><span class="line"></span><br><span class="line">$client=Client::create(<span class="string">'http://localhost/'</span>,<span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">echo</span> $client-&gt;hello(<span class="string">"World"</span>);</span><br></pre></td></tr></table></figure><h1 id="案例-go"><a href="#案例-go" class="headerlink" title="案例(go)"></a>案例(go)</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/gorilla/websocket</span><br><span class="line">go get github.com/valyala/fasthttp</span><br><span class="line">go get github.com/hprose/hprose-golang</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import(</span><br><span class="line">    &quot;net/http&quot;</span><br><span class="line">    &quot;github.com/hprose/hprose-golang/rpc&quot;</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">func hello(name string) string &#123;</span><br><span class="line">    return &quot;Hello&quot; + name + &quot;!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    service := rpc.NewHTTPService()</span><br><span class="line">    service.AddFunction(&quot;hello&quot;, hello, rpc.Options&#123;&#125;)</span><br><span class="line">    http.ListenAndServer(&quot;:8080&quot;,service)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"fmt"</span></span><br><span class="line">        <span class="string">"github.com/hprose/hprose-golang/rpc"</span></span><br><span class="line">       )</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Stub <span class="keyword">struct</span> &#123;</span><br><span class="line">    Hello <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span></span><br><span class="line"><span class="function">    <span class="title">AsyncHello</span> <span class="title">func</span><span class="params">(<span class="keyword">func</span>(<span class="keyword">string</span>, error)</span>,<span class="title">string</span>) `<span class="title">name</span>:"<span class="title">hello</span>"`</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := rpc.NewClient(<span class="string">"http://127.0.0.1:8080/"</span>)</span><br><span class="line">    <span class="keyword">var</span> stub *Stub</span><br><span class="line">    client.UseService(&amp;stub)</span><br><span class="line">    stub.AsyncHello(<span class="function"><span class="keyword">func</span><span class="params">(result <span class="keyword">string</span>,err error)</span></span> &#123;</span><br><span class="line">            fmt.Println(result, error)</span><br><span class="line">            &#125;,<span class="string">"async world"</span>)</span><br><span class="line">            fmt.Println(stub.Hello(<span class="string">"world"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Hprose(High Performance Remote Object Service Engine)&lt;br&gt;是一款先进的轻量级、跨语言、跨平台、无侵入式、高性能动态远程对象调用引擎库。它不仅简单易用，而且功能强大。 你无需专门学习，只需看上几眼，就能用它轻松构建分布式应用系统。&lt;/p&gt;
&lt;h1 id=&quot;使用手册&quot;&gt;&lt;a href=&quot;#使用手册&quot; class=&quot;headerlink&quot; title=&quot;使用手册&quot;&gt;&lt;/a&gt;使用手册&lt;/h1&gt;&lt;h1 id=&quot;案例-php&quot;&gt;&lt;a href=&quot;#案例-php&quot; class=&quot;headerlink&quot; title=&quot;案例(php)&quot;&gt;&lt;/a&gt;案例(php)&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;composer require hprose/hprose&lt;/code&gt;&lt;br&gt;如果你正在使用 composer 管理你的项目，那么你不需要做任何特别处理。只要在 composer.json 中的 require 段添加了对 hprose/hprose 的引用就可以了。如果你需要 swoole 支持，添加 hprose/hprose-swoole 就可以了。&lt;br&gt;然后在代码中这样引用&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>利用gitlab进行持续部署</title>
    <link href="http://yoursite.com/2018/02/12/%E5%88%A9%E7%94%A8gitlab%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/02/12/利用gitlab进行持续部署/</id>
    <published>2018-02-12T15:55:00.000Z</published>
    <updated>2018-05-27T09:59:36.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitLab-CI使用Docker进行持续部署"><a href="#GitLab-CI使用Docker进行持续部署" class="headerlink" title="GitLab-CI使用Docker进行持续部署"></a>GitLab-CI使用Docker进行持续部署</h2><p>Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u username -p password registry.demo.com</span><br><span class="line">docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br></pre></td></tr></table></figure></p><p>其中 <code>username</code>是用户名, <code>password</code>是密码, registry.demo.com是私有镜像库地址,<br><code>$CI_PROJECT_NAME</code> 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t registry.demo.com/repos/image-name:latest .</span><br></pre></td></tr></table></figure></p><p><code>image-name</code>, 就是要构建的镜像名称, <code>latest</code>是TAG标签, <code>repos</code>是仓库的空间名称</p><p>在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库, 部署时通过拉取最新的镜像库, 进行部署<br><a id="more"></a><br>项目的deploy目录中, 放置一些配置文件, 如Dockerfile, docker-compose.yml等, 通过rsync同步到部署服务器上, 用于部署所需<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">image: zacksleo/docker-composer:1.1</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">    - prepare    </span><br><span class="line">    - build</span><br><span class="line">    - deploy</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">    COMPOSER_CACHE_DIR: &quot;/cache/composer&quot;</span><br><span class="line">    DOCKER_DRIVER: overlay</span><br><span class="line"></span><br><span class="line">installing-dependencies:</span><br><span class="line">    stage: prepare</span><br><span class="line">    script:</span><br><span class="line">        - composer install --prefer-dist -n --no-interaction -v --no-suggest</span><br><span class="line">    artifacts:</span><br><span class="line">        name: &quot;vendor&quot;</span><br><span class="line">        untracked: true</span><br><span class="line">        expire_in: 60 mins</span><br><span class="line">        paths:</span><br><span class="line">            - $CI_PROJECT_DIR/vendor    </span><br><span class="line">test-image:</span><br><span class="line">    stage: build</span><br><span class="line">    image: docker:latest</span><br><span class="line">    services:</span><br><span class="line">        - docker:dind</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - docker login -u username -p password registry.demo.com</span><br><span class="line">        - docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .</span><br><span class="line">        - docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest</span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats        </span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker login -u username -p password registry.demo.com&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;cd /data/$CI_PROJECT_NAME &amp;&amp; docker-compose stop &amp;&amp; docker-compose rm -f &amp;&amp; docker-compose pull &amp;&amp; docker-compose up -d&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME chown www-data:www-data web/assets&quot;</span><br><span class="line">        - ssh root@$DEPLOY_SERVER &quot;docker exec -i $CI_PROJECT_NAME ./yii migrate/up --interactive=0&quot;</span><br></pre></td></tr></table></figure></p><h2 id="GitLab-CI使用LFTP进行持续部署"><a href="#GitLab-CI使用LFTP进行持续部署" class="headerlink" title="GitLab-CI使用LFTP进行持续部署"></a>GitLab-CI使用LFTP进行持续部署</h2><p>LFTP是一款FTP客户端软件, 支持 FTP 、 FTPS 、 HTTP 、 HTTPS 、 SFTP 、 FXP 等多种文件传输协议。</p><p>本文介绍如何使用 LFTP 将文件同步到远程FTP服务器上, 从而实现自动部署</p><p>mirror 命令及主要参数</p><p>-R 反向传输, 因为是上传(put)到远程服务器, 所以使用该参数 (默认是从远程服务器下载)<br>-L 下载符号链接作为文件, 主要处理文件软链接的问题<br>-v 详细输出日志<br>-n 只传输新文件 (相同的旧文件不会传输, 大大提升了传输效率)<br>–transfer-all 传输所有文件, 不论新旧<br>–parallel 同时传输的文件数<br>–file 本地文件<br>–target-directory 目标目录</p><p>配置参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    stage: deploy</span><br><span class="line">    dependencies:</span><br><span class="line">        - installing-dependencies</span><br><span class="line">    script:</span><br><span class="line">        - apk add lftp</span><br><span class="line">        # 只上传新文件</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST; cd /wwwroot; mirror -RLnv ./ /wwwroot --ignore-time --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 指定目录覆盖上传 (强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -RLv ./vendor/composer /wwwroot/vendor/composer --ignore-time --transfer-all --parallel=50 --exclude-glob .git* --exclude .git/&quot;</span><br><span class="line">        # 单独上传autoload文件(强制更新)</span><br><span class="line">        - lftp -c &quot;set ftp:ssl-allow no; open -u $FTP_USERNAME,$FTP_PASSWORD $FTP_HOST;mirror -Rv --file=vendor/autoload.php --target-directory=/wwwroot/vendor/ --transfer-all&quot;</span><br><span class="line">    only:</span><br><span class="line">        - master</span><br></pre></td></tr></table></figure></p><h2 id="GitLab-CI使用Rsync进行持续部署"><a href="#GitLab-CI使用Rsync进行持续部署" class="headerlink" title="GitLab-CI使用Rsync进行持续部署"></a>GitLab-CI使用Rsync进行持续部署</h2><p>rsync命令是一个远程数据同步工具<br>主要参数<br>-r 递归目录<br>-t 保留修改时间<br>-v 详细日志<br>-h 输出数字以人类可读的格式<br>-z 在传输过程中压缩文件数据<br>-e 指定要使用的远程shell, 注意该过程需要注入SSH</p><p>配置参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">before_script:</span><br><span class="line">    - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">    - apk add rsync</span><br><span class="line">    - eval $(ssh-agent -s)</span><br><span class="line">    - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; ~/deploy.key</span><br><span class="line">    - chmod 0600 ~/deploy.key</span><br><span class="line">    - ssh-add ~/deploy.key</span><br><span class="line">    - mkdir -p ~/.ssh</span><br><span class="line">    - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line">    - export APP_ENV=testing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">testing-server:</span><br><span class="line">    stage: deploy</span><br><span class="line">    image: alpine</span><br><span class="line">    variables:</span><br><span class="line">        DEPLOY_SERVER: &quot;server-host&quot;</span><br><span class="line">    script:</span><br><span class="line">        - cd deploy</span><br><span class="line">        - rsync -rtvhze ssh . root@$DEPLOY_SERVER:/data/$CI_PROJECT_NAME --stats</span><br></pre></td></tr></table></figure></p><blockquote><p>注意<br>远程服务器需要安装rsync, 否则会出现 bash: rsync: command not found 错误</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GitLab-CI使用Docker进行持续部署&quot;&gt;&lt;a href=&quot;#GitLab-CI使用Docker进行持续部署&quot; class=&quot;headerlink&quot; title=&quot;GitLab-CI使用Docker进行持续部署&quot;&gt;&lt;/a&gt;GitLab-CI使用Docker进行持续部署&lt;/h2&gt;&lt;p&gt;Docker镜像通过私有仓库进行发布(如阿里云), 发布命令为:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker login -u username -p password registry.demo.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker build -t registry.demo.com/repos/$CI_PROJECT_NAME:latest .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker push registry.demo.com/repos/$CI_PROJECT_NAME:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;username&lt;/code&gt;是用户名, &lt;code&gt;password&lt;/code&gt;是密码, registry.demo.com是私有镜像库地址,&lt;br&gt;&lt;code&gt;$CI_PROJECT_NAME&lt;/code&gt; 是GitLab-CI内置变量, 会自动替换为项目的名称, 这里也可以直接写死, 如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker build -t registry.demo.com/repos/image-name:latest .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;image-name&lt;/code&gt;, 就是要构建的镜像名称, &lt;code&gt;latest&lt;/code&gt;是TAG标签, &lt;code&gt;repos&lt;/code&gt;是仓库的空间名称&lt;/p&gt;
&lt;p&gt;在下面的例子中, 首先通过composer安装依赖库, 然后通过artifacts传递给构建任务, 构建完镜像将镜像发布到私有库, 部署时通过拉取最新的镜像库, 进行部署&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="devops" scheme="http://yoursite.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci由浅入深</title>
    <link href="http://yoursite.com/2018/02/11/gitlab-ci%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1/"/>
    <id>http://yoursite.com/2018/02/11/gitlab-ci由浅入深/</id>
    <published>2018-02-11T14:57:07.000Z</published>
    <updated>2018-05-27T09:59:36.026Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。</p><p>持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。 持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段YAML脚本来实现持续集成.</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="持续集成可以实现的功能"><a href="#持续集成可以实现的功能" class="headerlink" title="持续集成可以实现的功能:"></a>持续集成可以实现的功能:</h2><ul><li>代码审核: 自动化代码规范审查, 甚至代码质量检查</li><li>自动化测试: 单元测试, 功能测试和验收测试</li><li>编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布</li><li>构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2></li></ul><p>GitLab-CI 检测每次代码变动, 通过.gitlab-ci.yml脚本执行构建命令, 将命令发布到GitLab-Runners(运行机)上, 进而执行命令.<br>GitLab-Runners 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.<br>GitLab-Runners把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.<br><a id="more"></a><br>在仓库根目录创建 .gitlab-ci.yml 文件, 内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">job-1:</span><br><span class="line">  script:</span><br><span class="line">      - echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></p><pre><code>这样, 在每次提交代码后, 都会自动执行以上脚本. 其中job-1是任务名称, 可以定义多个任务,script下面是 shell 命令, 只要命令执行成功, 就代表本次构建通过(出现passed标记)</code></pre><p>  这样, 一次简单的持续集成已经搞定了.</p><p>  如何编写GitLab-CI配置文件</p><p>  见文档 如何编写GitLab-CI配置文件</p><p>  远程拉取代码</p><p>  使用ssh远程登录服务器, 然后执行git pull 拉取代码, 实现代码热更新</p><p>  由于ssh无密码登录需要用到密钥, 所以首先需要注入私钥</p><p>  如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">release-doc:</span><br><span class="line">    stage: deploy</span><br><span class="line">        script:</span><br><span class="line">          - ssh root@$DEPLOY_SERVER &quot;cd /mnt/data/docker-gollum/wiki &amp;&amp; git pull origin master&quot;</span><br></pre></td></tr></table></figure></p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="根主要关键词一览"><a href="#根主要关键词一览" class="headerlink" title="根主要关键词一览"></a>根主要关键词一览</h3><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明使用的Docker镜像</td><td>为空时使用默认镜像</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stages</td><td>定义构建阶段</td><td>为空时, 单纯定义jobs</td><td>项目的构建分为多个阶段, 例如: 安装依赖/准备, 编译, 测试, 发布等, 同时每个阶段包含若干任务</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可空</td><td>每个job启动时会先执行该脚本</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可空</td><td>同上</td></tr><tr><td>variables</td><td>定义变量</td><td>可空</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可空</td><td>同上</td></tr></tbody></table><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo:"></a>Demo:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">image: aipline</span><br><span class="line">services:</span><br><span class="line">  - mysql</span><br><span class="line">  - redis</span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - test</span><br><span class="line">  - deploy</span><br><span class="line">before_script:</span><br><span class="line">  - bundle install  </span><br><span class="line">after_script:</span><br><span class="line">  - rm secrets</span><br><span class="line">cache:</span><br><span class="line">paths:</span><br><span class="line">  - binaries/</span><br><span class="line">  - .config</span><br></pre></td></tr></table></figure><h2 id="Jobs中的关键词"><a href="#Jobs中的关键词" class="headerlink" title="Jobs中的关键词"></a>Jobs中的关键词</h2><h3 id="jobs中存在一些与根中相同的关键词-这些一旦定义-则会向前覆盖-即根中定义的则不会在该job执行"><a href="#jobs中存在一些与根中相同的关键词-这些一旦定义-则会向前覆盖-即根中定义的则不会在该job执行" class="headerlink" title="jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行"></a>jobs中存在一些与根中相同的关键词, 这些一旦定义, 则会向前覆盖, 即根中定义的则不会在该job执行</h3><h4 id="job-这里译为任务"><a href="#job-这里译为任务" class="headerlink" title="job 这里译为任务"></a>job 这里译为任务</h4><table><thead><tr><th>关键词</th><th>含义</th><th>可选</th><th>备注</th></tr></thead><tbody><tr><td>image</td><td>声明任务使用的Docker镜像</td><td>为空时使用根中的定义</td><td>该镜像应当满足脚本执行的环境依赖</td></tr><tr><td>services</td><td>任务中Docker镜像使用的服务, 通过链接的方式来调用所需服务</td><td>可空</td><td>常用于链接数据库</td></tr><tr><td>stage</td><td>所属构建阶段</td><td>为空时则不使用stages</td><td>一个任务属于一个构建阶段</td></tr><tr><td>before_script</td><td>定义每个job之前执行的脚本</td><td>可选</td><td>如果在job中定义则会覆盖根中的内容</td></tr><tr><td>script</td><td>定义每个job执行的脚本</td><td>必须</td></tr><tr><td>after_script</td><td>定义每个job之后执行的脚本</td><td>可选</td><td>同上</td></tr><tr><td>variables</td><td>定义任务中使用的变量</td><td>可选</td><td>同上</td></tr><tr><td>cache</td><td>定义与后续job之间应缓存的文件</td><td>可选</td><td>同上</td></tr><tr><td>only</td><td>指定应用的Git分支</td><td>可选</td><td>可以是分支名称, 可用正则匹配分支, 也可是tags来指定打过标签的分支</td></tr><tr><td>except</td><td>排除应用的Git分支</td><td>可选</td><td>同上</td></tr><tr><td>tags</td><td>指定执行的GitLab-Runners</td><td>可选</td><td>通过匹配Runners的标签选定</td></tr><tr><td>allow_failure</td><td>允许失败</td><td>默认为false 如果允许失败, 本次任务不会影响整个构建的结果</td></tr><tr><td>when</td><td>定义合适执行任务</td><td>默认为always</td><td>有on_success, on_failure, always or manual可选</td></tr><tr><td>dependencies</td><td>定义合任务所需要的工件</td><td>可空</td><td>需要首先定义工件</td></tr><tr><td>artifacts</td><td>定义工件</td><td>可空</td><td>工件中指定的目录会在任务执行成功后压缩传到GitLab, 后面需要该工件的任务执行时, 再自行下载解压</td></tr><tr><td>environment</td><td>定义环境</td><td>可空</td><td>在部署任务中, 定义该任务所属的环境</td></tr></tbody></table><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">installing-dependencies:</span><br><span class="line">  script:</span><br><span class="line">    - composer install --prefer-dist --optimize-autoloader -n --no-interaction -v --no-suggest</span><br><span class="line">    - composer dump-autoload --optimize</span><br><span class="line">  artifacts:</span><br><span class="line">    - name: &quot;vendor&quot;</span><br><span class="line">    - untracked: true</span><br><span class="line">    - expire_in: 60 mins</span><br><span class="line">    - paths:</span><br><span class="line">    - vendor/    </span><br><span class="line">deleteocker-build-image:    </span><br><span class="line">  stage: test</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">  except:</span><br><span class="line">    - develop</span><br><span class="line">  tags:</span><br><span class="line">    - ruby</span><br><span class="line">    - postgres</span><br><span class="line">  allow_failure: true</span><br><span class="line">  dependencies:</span><br><span class="line">    - installing-dependencies</span><br><span class="line">  script:        </span><br><span class="line">    - docker build -t registry.com/mops/image:latest .</span><br><span class="line">    - docker push registry.com/mops/image:latest</span><br></pre></td></tr></table></figure></p><blockquote><p>注意:<br>jobs的名称不能重名<br>同一阶段中的任务, 是并行执行的<br>上一阶段所有任务执行完后, 才会进入下一阶段<br>定义工件时, 务必定义工件的过期时间, 否则工件会一直寸在GitLab上, 占用空间<br>如果需要在任务中传递文件, 优先选择使用 dependencies (结合artifacts)</p></blockquote><h3 id="验证配置文件合法性"><a href="#验证配置文件合法性" class="headerlink" title="验证配置文件合法性"></a>验证配置文件合法性</h3><p>  在GitLab中, 打开 /ci/lint网址, 将配置文件粘贴在些, 进行验证</p><h2 id="通过gitlab-ci实现文件的自动部署"><a href="#通过gitlab-ci实现文件的自动部署" class="headerlink" title="通过gitlab-ci实现文件的自动部署"></a>通过gitlab-ci实现文件的自动部署</h2><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>  文档托管在gitlab上, 每次代码更新, 会自动出发gitlab-ci构建 在构建脚本中, 通过ssh 登录远程服务器执行git拉取文档的命令</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="生成ssh证书"><a href="#生成ssh证书" class="headerlink" title="生成ssh证书"></a>生成ssh证书</h4><p>  在服务器上, 使用ssh-keygen生成root用户(或其他有权访问的用户)的公钥和私钥<br>  在用户根目录(~)中, 创建authorized_keys并设置权限: chmod 600 authorized_keys</p><h4 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h4><p>  添加公钥: cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br>  id_rsa.pub为第一步生成的公钥<br>  注意该证书的用户必须与ssh远程登录的用户一样, 例如我们的用户名是root<br>  将公钥添加到gitlab上, 以便于该用于可以拉取代码, 在User Settings找到 SSH Keys, 添加上面拿到的公钥</p><h4 id="设置CI-CD变量"><a href="#设置CI-CD变量" class="headerlink" title="设置CI/CD变量"></a>设置CI/CD变量</h4><p>  在 CI/CD Piplines中设置 Secret Variables, 包括 DEPLOY_SERVER 和 SSH_PRIVATE_KEY<br>  其中 SSH_PRIVATE_KEY 的内容是服务器上的私钥, DEPLOY_SERVER 是服务器地址<br>  编写 .gitlab-ci.yml 文件, 注入密钥, 通过ssh执行远程命令<br>  完整代码<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 使用alpine镜像, 该镜像很少,只有几兆</span><br><span class="line">image: alpine</span><br><span class="line">stages:</span><br><span class="line">  - deploy</span><br><span class="line">before_script:</span><br><span class="line">  # 预先装 ssh-agent</span><br><span class="line">  - &apos;which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)&apos;</span><br><span class="line">  # 启动服务</span><br><span class="line">  - eval $(ssh-agent -s)</span><br><span class="line">  # 将私钥写入deploy.key 文件</span><br><span class="line">  - echo &quot;$SSH_PRIVATE_KEY&quot; &gt; deploy.key</span><br><span class="line">  # 配置较低权限</span><br><span class="line">  - chmod 0600 deploy.key</span><br><span class="line">  # 注入密钥</span><br><span class="line">  - ssh-add deploy.key</span><br><span class="line">  - mkdir -p ~/.ssh    </span><br><span class="line">  - &apos;[[ -f /.dockerenv ]] &amp;&amp; echo -e &quot;Host *\n\tStrictHostKeyChecking no\n\n&quot; &gt; ~/.ssh/config&apos;</span><br><span class="line"></span><br><span class="line">release-doc:</span><br><span class="line">  stage: deploy</span><br><span class="line">  variables:</span><br><span class="line">    GIT_STRATEGY: none     </span><br><span class="line">  script:</span><br><span class="line">    # 连接远程服务器并执行拉取代码的命令</span><br><span class="line">    - ssh root@$DEPLOY_SERVER &quot;cd /path/to/wiki &amp;&amp; git pull origin master&quot;</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">  environment:</span><br><span class="line">    name: production</span><br><span class="line">    url: http://$DEPLOY_SERVER</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;持续集成（CI）和 持续交付(CD) 是一种流行的软件开发实践，每次提交都通过自动化的构建（测试、编译、发布）来验证，从而尽早的发现错误。&lt;/p&gt;
&lt;p&gt;持续集成实现了DevOps, 使开发人员和运维人员从繁琐的工作中解放出来。另外，这种形式极大地提高了开发者的开发效率和开发质量。 持续集成有多种工具，如Jenkins. GitLab内置了GitLab-CI，通过配置一段YAML脚本来实现持续集成.&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;h2 id=&quot;持续集成可以实现的功能&quot;&gt;&lt;a href=&quot;#持续集成可以实现的功能&quot; class=&quot;headerlink&quot; title=&quot;持续集成可以实现的功能:&quot;&gt;&lt;/a&gt;持续集成可以实现的功能:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码审核: 自动化代码规范审查, 甚至代码质量检查&lt;/li&gt;
&lt;li&gt;自动化测试: 单元测试, 功能测试和验收测试&lt;/li&gt;
&lt;li&gt;编译发布: 将源代码编译成可执行程序, 并将程序上传到托管发布平台实现自动发布&lt;/li&gt;
&lt;li&gt;构建部署: 通过构建Docker镜像, 或登录远程服务器执行相关部署命令和脚本, 实现自动化部署&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitLab-CI 检测每次代码变动, 通过.gitlab-ci.yml脚本执行构建命令, 将命令发布到GitLab-Runners(运行机)上, 进而执行命令.&lt;br&gt;GitLab-Runners 基于Docker执行持续集成的每项任务, 这样就解决了环境依赖问题.&lt;br&gt;GitLab-Runners把实时将执行结果输出到GitLab网页上, 任务执行完后, 通过徽章标记和邮箱告知执行结果.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git使用规范</title>
    <link href="http://yoursite.com/2018/02/11/git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/02/11/git使用规范/</id>
    <published>2018-02-11T14:30:54.000Z</published>
    <updated>2018-05-27T09:59:36.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul><li>master: 用于生产环境部署, 只接受合并请求, 不直接提交</li><li>testing: 用于测试环境测试</li><li>develop: 用于日常开发主线, 其他分支只能合并到 develop 分支</li><li>feature-xxx: 用于增加一个新功能</li><li><p>hotfix-xxx: 用于修复一个紧急bug<br>每次开发新功能，都应该新建一个单独的分支</p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2></li><li><p>如果要贡献代码, 首先应阅读贡献指南, 确认如果贡献代码</p></li><li>Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发</li><li>开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息</li><li>开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库<h2 id="Commit-message-和-Change-log-编写指南"><a href="#Commit-message-和-Change-log-编写指南" class="headerlink" title="Commit message 和 Change log 编写指南"></a>Commit message 和 Change log 编写指南</h2></li></ul><p>Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交 +Commit message 遵从<a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener"> Angular 规范</a></p><h3 id="安装-Commitizen-来格式化-commit-使其遵循以上规范"><a href="#安装-Commitizen-来格式化-commit-使其遵循以上规范" class="headerlink" title="安装 Commitizen 来格式化 commit , 使其遵循以上规范"></a>安装 Commitizen 来格式化 commit , 使其遵循以上规范</h3><p>首先注意将package.json和node_modules加入.gitignore文件<br>全局安装commitizen: <code>npm install -g commitizen</code><br>在项目根目录初始化package.json: <code>npm init --yes</code><br>项目根目录运行 <code>commitizen init cz-conventional-changelog --save --save-exact</code><br>每次提交代码时, 用 <code>git cz</code> 代替<code>git commit</code><br><a id="more"></a></p><h2 id="自动生成-Change-log"><a href="#自动生成-Change-log" class="headerlink" title="自动生成 Change log"></a>自动生成 Change log</h2><p>安装 <code>npm install -g conventional-changelog-cli</code><br>使用<code>conventional-changelog</code>生成日志: <code>conventional-changelog -p angular -i CHANGELOG.md -s -r 0</code></p><h2 id="版本号使用规范"><a href="#版本号使用规范" class="headerlink" title="版本号使用规范"></a>版本号使用规范</h2><p>版本号遵循语义化版本规范.</p><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><p>主版本号：当你做了不兼容的 API 修改，<br>次版本号：当你做了向下兼容的功能性新增，<br>修订号：当你做了向下兼容的问题修正。<br>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><p>更多内容参见 <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">语义化版本</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git 使用规范流程</a><br><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">Commit message 和 Change log 编写指南</a><br><a href="http://blog.cheenwe.cn/2016-04-18/git-commit-message/" target="_blank" rel="noopener">Git commit message 规范</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git工作流程&quot;&gt;&lt;a href=&quot;#Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;Git工作流程&quot;&gt;&lt;/a&gt;Git工作流程&lt;/h1&gt;&lt;h2 id=&quot;分支&quot;&gt;&lt;a href=&quot;#分支&quot; class=&quot;headerlink&quot; title=&quot;分支&quot;&gt;&lt;/a&gt;分支&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;master: 用于生产环境部署, 只接受合并请求, 不直接提交&lt;/li&gt;
&lt;li&gt;testing: 用于测试环境测试&lt;/li&gt;
&lt;li&gt;develop: 用于日常开发主线, 其他分支只能合并到 develop 分支&lt;/li&gt;
&lt;li&gt;feature-xxx: 用于增加一个新功能&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hotfix-xxx: 用于修复一个紧急bug&lt;br&gt;每次开发新功能，都应该新建一个单独的分支&lt;/p&gt;
&lt;h2 id=&quot;工作流&quot;&gt;&lt;a href=&quot;#工作流&quot; class=&quot;headerlink&quot; title=&quot;工作流&quot;&gt;&lt;/a&gt;工作流&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果要贡献代码, 首先应阅读贡献指南, 确认如果贡献代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Fork对应的项目, 然后基于develop分支, 新建一个分支, 在这个分支上进行开发&lt;/li&gt;
&lt;li&gt;开发时应遵守相应的编码规范和Git日志规范, 提交日志应当给出完整扼要的提交信息&lt;/li&gt;
&lt;li&gt;开发完毕后, 先在本项目库上合并到develop分支, 合并完成之后再PR到原项目库&lt;h2 id=&quot;Commit-message-和-Change-log-编写指南&quot;&gt;&lt;a href=&quot;#Commit-message-和-Change-log-编写指南&quot; class=&quot;headerlink&quot; title=&quot;Commit message 和 Change log 编写指南&quot;&gt;&lt;/a&gt;Commit message 和 Change log 编写指南&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交 +Commit message 遵从&lt;a href=&quot;http://blog.cheenwe.cn/2016-04-18/git-commit-message/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Angular 规范&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装-Commitizen-来格式化-commit-使其遵循以上规范&quot;&gt;&lt;a href=&quot;#安装-Commitizen-来格式化-commit-使其遵循以上规范&quot; class=&quot;headerlink&quot; title=&quot;安装 Commitizen 来格式化 commit , 使其遵循以上规范&quot;&gt;&lt;/a&gt;安装 Commitizen 来格式化 commit , 使其遵循以上规范&lt;/h3&gt;&lt;p&gt;首先注意将package.json和node_modules加入.gitignore文件&lt;br&gt;全局安装commitizen: &lt;code&gt;npm install -g commitizen&lt;/code&gt;&lt;br&gt;在项目根目录初始化package.json: &lt;code&gt;npm init --yes&lt;/code&gt;&lt;br&gt;项目根目录运行 &lt;code&gt;commitizen init cz-conventional-changelog --save --save-exact&lt;/code&gt;&lt;br&gt;每次提交代码时, 用 &lt;code&gt;git cz&lt;/code&gt; 代替&lt;code&gt;git commit&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="技术 php" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF-php/"/>
    
  </entry>
  
  <entry>
    <title>集中式日志管理elk搭建</title>
    <link href="http://yoursite.com/2018/02/10/%E9%9B%86%E4%B8%AD%E5%BC%8F%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86elk%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2018/02/10/集中式日志管理elk搭建/</id>
    <published>2018-02-10T05:56:26.000Z</published>
    <updated>2018-05-27T09:59:36.034Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，我们组内决定将各个应用的日志都集中管理起来，所以需要一款集中式的日志管理系统，查找了市面上的系统发现elk不错，所以我就研究搭建了elk，下面是我在搭建过程中的一些心得。</p><blockquote><p>elk:这其实是一套组件的缩写，其中比较核心的是三个组件ELK(Elasticsearch, Logstash, Kibana), 经过这么多年的发展已经是6.0.0版本</p><ul><li>Elasticsearch 高可用性，实时索引，拓展简单，接口友好</li><li>Kibana 提供分析和可视化的 Web 平台，用来查询分析以及生成各种报表</li><li>Logstash 是一个具有实时的数据收集引擎，几乎可以收集所有的数据</li><li>Beats 轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据</li><li>X-Pack 是集成了多种便捷功能的单个插件 — security、alerting、monitoring、reporting、graph 探索</li></ul></blockquote><h2 id="elk的初始化"><a href="#elk的初始化" class="headerlink" title="elk的初始化"></a>elk的初始化</h2><p>其实elk既可以在linux的环境安装也可以使用docker形式，我在github上找到一个已经配置好的docker环境的<a href="https://github.com/deviantony/docker-elk" target="_blank" rel="noopener">docker-elk</a><br>使用git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:deviantony/docker-elk.git后执行docker-compose up,然后我们访问<a href="http://localhost:5601,以下是它的端口" target="_blank" rel="noopener">http://localhost:5601,以下是它的端口</a></p><ul><li>5000: Logstash TCP input.</li><li>9200: Elasticsearch HTTP</li><li>9300: Elasticsearch TCP transport</li><li>5601: Kibana<a id="more"></a><h2 id="elk-配置"><a href="#elk-配置" class="headerlink" title="elk 配置"></a>elk 配置</h2>我们先配置’elk/logstash/pipeline/logstash.conf’<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">        beats &#123; #通过这个端口接收filebeat组件发送过来的日志</span><br><span class="line">                port =&gt; 5043</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">## Add your filters / logstash plugins configuration here</span><br><span class="line">filter &#123;</span><br><span class="line">        grok &#123; # 正则形式将无序的日志整理成有序的结构形式</span><br><span class="line">                match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;GREEDYDATA:health_Timestamp&#125;\[%&#123;IPV4:health_IPaddress&#125;\]\[-\]\[-\]\[%&#123;LOGLEVEL:health_LogLevel&#125;\]\[%&#123;NOTSPACE:health_Category&#125;\]%&#123;GREEDYDATA:health_Text&#125;&quot; &#125; </span><br><span class="line">        &#125;    </span><br><span class="line">        geoip &#123; #通过这个可以将ip和地理位置相关联</span><br><span class="line">                source =&gt; &quot;clientip&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123; #将日志信息交给elasticsearch处理</span><br><span class="line">        elasticsearch &#123;</span><br><span class="line">                hosts =&gt; &quot;elasticsearch:9200&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="filebeat配置"><a href="#filebeat配置" class="headerlink" title="filebeat配置"></a>filebeat配置</h2><p>然后我们到我们要挖掘日志的应用中添加filebeat组件，将日志的搬运方向直销刚刚留出来的elk的ip:5043端口</p><ul><li><p>现在docker-compose.yml添加filebeat组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filebeat:</span><br><span class="line">        image: docker.elastic.co/beats/filebeat:6.0.0</span><br><span class="line">        hostname: filebeat</span><br><span class="line">        container_name: filebeat</span><br><span class="line">        restart: always</span><br><span class="line">        volumes:</span><br><span class="line">        - ./services/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml</span><br><span class="line">        - ./services/filebeat/config/filebeat.template.json:/usr/share/filebeat/filebeat.template.json</span><br><span class="line">        - ./api/runtime/logs:/var/logs</span><br><span class="line">        - ./api/runtime/debug:/var/debug</span><br><span class="line">        depends_on:</span><br><span class="line">        - web</span><br></pre></td></tr></table></figure></li><li><p>接着我们配置刚刚docker-compose配置的./services/filebeat/config/filebeat.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- type: log</span><br><span class="line">  paths:</span><br><span class="line">      - &quot;/var/logs/*.log&quot;</span><br><span class="line">     #- &quot;/var/debug/*.data&quot;</span><br><span class="line">registry_file: /etc/registry/mark</span><br><span class="line">#============================= 将以时间的日志归并为一行 ===============================</span><br><span class="line">  multiline.pattern: &apos;^[0-9]&#123;4&#125;-[0-9]&#123;2&#125;-[0-9]&#123;2&#125;&apos;</span><br><span class="line">  multiline.negate: true</span><br><span class="line">  multiline.match: after</span><br><span class="line">  multiline.timeout: 10s</span><br><span class="line">enable: true</span><br><span class="line">#============================= Filebeat modules ===============================</span><br><span class="line">#</span><br><span class="line">filebeat.config.modules:</span><br><span class="line"># Glob pattern for configuration loading</span><br><span class="line">  path: /usr/share/filebeat/modules.d/*.yml</span><br><span class="line">#</span><br><span class="line"># Set to true to enable config reloading</span><br><span class="line">reload.enabled: true</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">logstash:</span><br><span class="line">hosts: [&quot;刚刚配置的elk的ip地址:5043&quot;]</span><br><span class="line"></span><br><span class="line">logging:</span><br><span class="line">files:</span><br><span class="line">rotateeverybytes: 10485760 # = 10MB</span><br></pre></td></tr></table></figure><p>参考文章:</p></li></ul><hr><p><a href="https://www.elastic.co/cn/products" target="_blank" rel="noopener">官网</a><br><a href="http://blog.csdn.net/sysushui/article/details/78461498" target="_blank" rel="noopener">使用Docker搭建ELK日志系统</a><br><a href="https://www.jianshu.com/p/a980cd121212" target="_blank" rel="noopener">ELK—合并多行日志（php.log）</a><br><a href="https://jicki.me/2016/10/11/docker-elk-filebeat/" target="_blank" rel="noopener">docker容器日志集中ELK</a><br><a href="https://my.oschina.net/openplus/blog/1584861" target="_blank" rel="noopener">filebeat+logstash配置搭建</a><br><a href="https://www.cnblogs.com/stozen/p/5638369.html" target="_blank" rel="noopener">关于Logstash中grok插件的正则表达式例子</a><br><a href="http://blog.51cto.com/john88wang/1641723" target="_blank" rel="noopener">使用Logstash收集PHP相关日志-Linux SA John-51CTO博客</a><br><a href="https://birdben.github.io/2016/11/21/Logstash/Logstash%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89Logstash%E6%95%B4%E5%90%88Kafka/" target="_blank" rel="noopener">Logstash整合Kafka</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，我们组内决定将各个应用的日志都集中管理起来，所以需要一款集中式的日志管理系统，查找了市面上的系统发现elk不错，所以我就研究搭建了elk，下面是我在搭建过程中的一些心得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;elk:这其实是一套组件的缩写，其中比较核心的是三个组件ELK(Elasticsearch, Logstash, Kibana), 经过这么多年的发展已经是6.0.0版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 高可用性，实时索引，拓展简单，接口友好&lt;/li&gt;
&lt;li&gt;Kibana 提供分析和可视化的 Web 平台，用来查询分析以及生成各种报表&lt;/li&gt;
&lt;li&gt;Logstash 是一个具有实时的数据收集引擎，几乎可以收集所有的数据&lt;/li&gt;
&lt;li&gt;Beats 轻量型采集器的平台，从边缘机器向 Logstash 和 Elasticsearch 发送数据&lt;/li&gt;
&lt;li&gt;X-Pack 是集成了多种便捷功能的单个插件 — security、alerting、monitoring、reporting、graph 探索&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;elk的初始化&quot;&gt;&lt;a href=&quot;#elk的初始化&quot; class=&quot;headerlink&quot; title=&quot;elk的初始化&quot;&gt;&lt;/a&gt;elk的初始化&lt;/h2&gt;&lt;p&gt;其实elk既可以在linux的环境安装也可以使用docker形式，我在github上找到一个已经配置好的docker环境的&lt;a href=&quot;https://github.com/deviantony/docker-elk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docker-elk&lt;/a&gt;&lt;br&gt;使用git clone &lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@github.com&lt;/a&gt;:deviantony/docker-elk.git后执行docker-compose up,然后我们访问&lt;a href=&quot;http://localhost:5601,以下是它的端口&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost:5601,以下是它的端口&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5000: Logstash TCP input.&lt;/li&gt;
&lt;li&gt;9200: Elasticsearch HTTP&lt;/li&gt;
&lt;li&gt;9300: Elasticsearch TCP transport&lt;/li&gt;
&lt;li&gt;5601: Kibana
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux基础" scheme="http://yoursite.com/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>集群的nginx配置</title>
    <link href="http://yoursite.com/2018/01/15/%E9%9B%86%E7%BE%A4%E7%9A%84nginx%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/01/15/集群的nginx配置/</id>
    <published>2018-01-14T16:01:54.000Z</published>
    <updated>2018-05-27T09:59:36.028Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是nginx的进阶篇，我会详细梳理集群的nginx配置,包括nginx服务器的反向代理，负载均衡,不过这些都是要先建立后端服务器组。<br>按照上篇的惯例，我们先亮出集群nginx配置文件</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">user nobody nobody;</span><br><span class="line">worker_process 2;</span><br><span class="line">error_log /usr/local/webserver/nginx/logs/nginx_error.log crit;</span><br><span class="line">pid /usr/local/webserver/nginx/nginx/pid;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        woreker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">        include mime.types;</span><br><span class="line">        default_type application/octet-stream;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        sendfile on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line">        tcp_nodelay on;</span><br><span class="line">        client_body_buffer_size 512k;</span><br><span class="line">        proxy_connect_timeout 5;</span><br><span class="line">        proxy_read_timeout 60;</span><br><span class="line">        proxy_send_timeout 5;</span><br><span class="line">        proxy_buffer_size 16k;</span><br><span class="line">        proxy_buffers 4 16k;</span><br><span class="line">        proxy_busy_buffers_size 128k;</span><br><span class="line">        proxy_temp_file_write_size 128k;</span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length 1k;</span><br><span class="line">        gzip_buffers 4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line"><span class="meta">#</span><span class="bash">设置Web缓存区名称为cache_one,内存缓存空间大小为200M,1天清理一次缓存，硬盘缓存空间大小为30GB</span></span><br><span class="line">        proxy_temp_file_path /data0/proxy_temp_dir;</span><br><span class="line">        proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m</span><br><span class="line">        inactive=1d max_size=30g;</span><br><span class="line">        upstream backend &#123;</span><br><span class="line">                server 192.168.1.3:80 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">                server 192.168.1.4:80 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">                server 192.168.1.5:80 weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        &#125;</span><br><span class="line">        server</span><br><span class="line">        &#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                server_name myweb;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">                root /data0/htdocs/www;</span><br><span class="line">                location /</span><br><span class="line">                &#123;</span><br><span class="line">                        #如果后端的服务器返回502,504执行超时等错误，将请求转发到另一台服务器。</span><br><span class="line">                        proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">                        proxy_cache cache_one;</span><br><span class="line">                        #针对不同HTTP状态设置不同的缓存时间</span><br><span class="line">                        proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">                        proxy_set_header Host $host;</span><br><span class="line">                        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                        proxy_pass http://backend_server;</span><br><span class="line">                        expires 1d;</span><br><span class="line">                &#125;</span><br><span class="line">                #配置缓存清楚功能</span><br><span class="line">                location ~ /purge(/.*)</span><br><span class="line">                &#123;</span><br><span class="line">                        allow 127.0.0.1;</span><br><span class="line">                        allow 192.168.0.0/16;</span><br><span class="line">                        deny all;                </span><br><span class="line">                        proxy_cache_purge cache_one $host$1$is_args$args;</span><br><span class="line">                &#125;</span><br><span class="line">                #配置数据不缓存</span><br><span class="line">                location ~ .*\.(php|jpg|cgi)?$</span><br><span class="line">                &#123;</span><br><span class="line">                        proxy_set_header Host $host;</span><br><span class="line">                        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                        proxy_pass http://backend;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="后端服务器组"><a href="#后端服务器组" class="headerlink" title="后端服务器组"></a>后端服务器组</h2><h3 id="upstream"><a href="#upstream" class="headerlink" title="upstream"></a>upstream</h3><p>upstream backend<br>{<br>        server backend1.example weight=5; #组内服务器设置权重，数字越大有限级越高<br>        server 127.0.0.1:8080 max_fails=3 fail_timeout=30s; #1请求失败的次数 2请求组内服务器的时间 #30秒内失败3次该服务器是无效状态<br>        server 127.0.0.1:8081 backup; #备用服务器<br>        server 127.0.0.1:8082 down; #永久无效状态<br>        server unix:/tmp/backend3;<br>}<br>upstream backend2<br>{<br>        ip_hash #实现会话保持功能，将某个客户端定向到同一服务器，保证session,不能和weight一起用<br>        server myback1.proxy.com;<br>        server myback2.proxy.com;<br>        keeyalive 10 #控制网络连接保持功能,保证工作进程为服务器组打开一部分连接，控制数量<br>        last_conn;#选择当前网络连接最少的服务器<br>}</p><h2 id="rewrite功能配置"><a href="#rewrite功能配置" class="headerlink" title="rewrite功能配置"></a>rewrite功能配置</h2><h3 id="ngx-http-rewrite-module模块"><a href="#ngx-http-rewrite-module模块" class="headerlink" title="ngx_http_rewrite_module模块"></a>ngx_http_rewrite_module模块</h3><blockquote><p>用于实现url的重写，依赖PCRE库，是一种地址重写，会产生两次请求</p></blockquote><p>last：终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行<br>location / {<br>     rewrite ^(/myweb/.<em>)/media/(.</em>)..<em>$ $1/mp3/$2.mp3 last;<br>     rewrite ^(/myweb/.</em>)/audio/(.<em>).</em>$ $1/mp3/$2.ra last;<br>}</p><h3 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name jump.myweb.name;</span><br><span class="line">        rewrite ^ http://www.myweb.info/;#域名跳转</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name jump.myweb.name jump.myweb.info</span><br><span class="line">        if($host ^ myweb.\info) #.用\转义</span><br><span class="line">        &#123;</span><br><span class="line">                rewrite *(.*) http://jump.myweb.name$1 permanent; #多域名跳转</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;       </span><br><span class="line">        server_name jump1.myweb.name jump2.myweb.name;</span><br><span class="line">        if($http_host ~* ^(.*)\.myweb\.name$)</span><br><span class="line">        &#123;</span><br><span class="line">                rewrite ^(.*) http://jump.myweb.name$1; #三级域名跳转</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="域名镜像"><a href="#域名镜像" class="headerlink" title="域名镜像"></a>域名镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name mirror1.myweb.name;</span><br><span class="line">        rewrite ^(.*) http://jump1.myweb.name$1 last;</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 81;</span><br><span class="line">        server_name mirror2.myweb.name;</span><br><span class="line">        rewrite ^(.*) http://jump2.myweb.name$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独立域名"><a href="#独立域名" class="headerlink" title="独立域名"></a>独立域名</h3><p>当一个网站包含多个板块时，可以为某些板块设置独立域名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name bbs.myweb.name;</span><br><span class="line">        rewrite ^(.*) http://www.myweb.com/bbs$1 last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)*</span><br><span class="line">&#123;</span><br><span class="line">        valid_referers none blocked server_name *. myweb.name;</span><br><span class="line">        if($invalid_referer) #检查请求头部Referer头域是不是自己的站点，如果不是，返回固定图片</span><br><span class="line">        &#123;</span><br><span class="line">                rewrite ^/ http://www.myweb.com/images/forbidden.png;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>局域网向Internet提供局域网内的资源，设置一个代理服务器</p></blockquote><p>proxy_pass URL 设置被代理的服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">upstream proxy_svrs</span><br><span class="line">&#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">        location /</span><br><span class="line">        &#123;</span><br><span class="line">                proxy_pass proxy_svrs;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>proxy_hide_header field;#用于设置Nginx发送响应时，隐藏头域名信息</li><li>proxy_pass_header field;#设置需要发送的头域信息</li><li>proxy_pass_request_body on | false;# 是否将客户端的请求体发送给代理服务器</li><li>proxy_pass_request_headers on | off; # 是否将客户端的请求头发送给代理服务器</li><li>proxy_set_header field value; #更改接收的客户端请求的请求头信息，将新的请求头发送给被代理服务器</li><li>proxy_set_body value; #更改客户端接收的请求体，将新的请求体发送给服务器</li><li>proxy_bind; #强制将代理主机的连接绑定到指定的IP地址</li><li>proxy_connect_timeout time;#与被代理服务器的连接超时时间</li><li>proxy_read_timeout time;#被代理服务器组read后，等待响应超时时间</li><li>proxy_send_timeout time; #被代理服务器组write后，等待响应超时时间 </li><li>proxy_http_version 1.0|1.1#设置nginx和代理服务器的http协议版本</li><li>proxy_method;#nginx 和代理服务器组的请求方法</li><li>proxy_ignore_client_abort on; #客户端请求中断时，是否中断对被代理服务器的请求</li><li>proxy_ignore_headers field;#nginx收到代理服务器的响应请求后，不会处理被设置的头域</li><li>proxy_redirect; #修改被代理服务器组的Location域和Refresh域</li><li>proxy_intercept_errors off; #直接返回代理服务器的http状态码</li><li>proxy_hash_max_size 512; #http报头文的容量上限</li><li>proxy_headers_hash_bucket_size 64; #http报头文的哈希表容量的单位大小</li><li>proxy_next_upstream status;#遵循upstream指令的轮询规则</li><li>proxy_ssl_session_reuse on;#开启ssl代理间协议<h4 id="Proxy-Buffer"><a href="#Proxy-Buffer" class="headerlink" title="Proxy Buffer"></a>Proxy Buffer</h4></li><li>proxy_buffering on; #开启proxy buffer(存放从代理服务器接收的一次响应数据的临时存放文件,接收完整的一次响应后才发送到客户端)</li><li>proxy_buffers 8 4k; #buffer个数 每个大小</li><li>proxy_busy_buffers_size 16kb; #busy状态下buffer总大小</li><li>proxy_temp_path /nginx/proxy_web/spool/proxy_temp 1 2; #临时文件路径 第几级目录</li><li>proxy_max_temp_file_size 1024MB #临时文件总体积上限值</li><li>proxy_temp_file_write_size 8kb; #数据量总大小限值<h4 id="Proxy-Cache-对已有数据在内存中建立缓存数据"><a href="#Proxy-Cache-对已有数据在内存中建立缓存数据" class="headerlink" title="Proxy Cache(对已有数据在内存中建立缓存数据)"></a>Proxy Cache(对已有数据在内存中建立缓存数据)</h4></li><li>proxy_cache zone | off #设置存放缓存内存区域名字</li><li>proxy_cache_bypass #向客户端发送数据时不从缓存中获取</li><li>proxy_cache_key $scheme$proxy_host$is_args$args #缓存数据建立索引的关键字</li><li>proxy_cache_lock on#缓存中的数据同时只能被一条请求读取</li><li>proxy_cache_lock_timeout 5s; #缓存锁的超时时间</li><li>proxy_cache_min_use 1; #向代理发送相同请求超过几次才缓存</li><li>proxy_cache_path /nginx/cache/a levels=1 keys_zone=a:10m;# 缓存路径 一级目录 缓存内存区域的名称和大小</li><li>proxy_cache_use_stale error | timeout |invalid_header|updating|http_500|http_502#代理服务器出错时访问历史缓存</li><li>proxy_cache_valid 200 302 10m #对返回200和302状态缓存10分钟</li><li>proxy_store on;#开启本地磁盘缓存数据</li><li>proxy_store_access user:rw group:rw all:r #配置缓存权限<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>将网络访问平衡地分摊到网络集群的各个操作单元上,减少用户的等待时间</p></blockquote></li></ul><p>upstream backend<br>{<br>  server 192.168.1.2:80 weight=5 #权限最高<br>  server 192.168.1.3:80 weight=2<br>  server 192.168.1.4:80          #默认1<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是nginx的进阶篇，我会详细梳理集群的nginx配置,包括nginx服务器的反向代理，负载均衡,不过这些都是要先建立后端服务器组。&lt;br&gt;按照上篇的惯例，我们先亮出集群nginx配置文件&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;user nobody nobody;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker_process 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_log /usr/local/webserver/nginx/logs/nginx_error.log crit;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid /usr/local/webserver/nginx/nginx/pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker_rlimit_nofile 65535;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        use epoll;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        woreker_connections 65535;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        include mime.types;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default_type application/octet-stream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        charset utf-8;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sendfile on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tcp_nopush on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keepalive_timeout 60;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tcp_nodelay on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client_body_buffer_size 512k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_connect_timeout 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_read_timeout 60;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_send_timeout 5;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_buffer_size 16k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_buffers 4 16k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_busy_buffers_size 128k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_temp_file_write_size 128k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_min_length 1k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_buffers 4 16k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_http_version 1.1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_comp_level 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_types text/plain application/x-javascript text/css application/xml;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_vary on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;设置Web缓存区名称为cache_one,内存缓存空间大小为200M,1天清理一次缓存，硬盘缓存空间大小为30GB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_temp_file_path /data0/proxy_temp_dir;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inactive=1d max_size=30g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        upstream backend &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server 192.168.1.3:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server 192.168.1.4:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server 192.168.1.5:80 weight=1 max_fails=2 fail_timeout=30s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                listen 80;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server_name myweb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                index index.html index.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                root /data0/htdocs/www;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location /&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        #如果后端的服务器返回502,504执行超时等错误，将请求转发到另一台服务器。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_next_upstream http_502 http_504 error timeout invalid_header;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_cache cache_one;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        #针对不同HTTP状态设置不同的缓存时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_cache_key $host$uri$is_args$args;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_set_header X-Forwarded-For $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_pass http://backend_server;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        expires 1d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #配置缓存清楚功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location ~ /purge(/.*)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        allow 127.0.0.1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        allow 192.168.0.0/16;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        deny all;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_cache_purge cache_one $host$1$is_args$args;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                #配置数据不缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location ~ .*\.(php|jpg|cgi)?$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_set_header Host $host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_set_header X-Forwarded-For $remote_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        proxy_pass http://backend;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置优化</title>
    <link href="http://yoursite.com/2018/01/04/nginx%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/01/04/nginx配置优化/</id>
    <published>2018-01-04T14:52:38.000Z</published>
    <updated>2018-05-27T09:59:36.032Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于刚看完nginx高性能web服务器详解，就想结合自己工作的经历，对nginx的优化配置做一个系统的总结，这篇是初级篇，是单机的nginx优化配置<br>首先我们看一份较简单的nginx.conf配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#### 全局块开始 ####</span><br><span class="line">user nobody nobody; #配置允许Nginx服务器的用户和用户组</span><br><span class="line">worker_processes 3; #配置Nginx进程生成的worker_processes数目</span><br><span class="line">error_log logs/error_log; #配置Nginx服务器允许对错误日志存放路径</span><br><span class="line">pid nginx.pid; #配置Nginx服务允许时的错误日志存放路径</span><br><span class="line">#### 全局块结束 ####</span><br><span class="line"></span><br><span class="line">#### event开始 ####</span><br><span class="line">events &#123;</span><br><span class="line">        use epoll; #配置事件驱动模型</span><br><span class="line">        worker_connections 1024; #配置最大连接数</span><br><span class="line">&#125;</span><br><span class="line">#### event结束 ####</span><br><span class="line">#### http块开始 ####</span><br><span class="line">http &#123;</span><br><span class="line">        include mime.types; #定义MIME-TYPE</span><br><span class="line">        default_type application/octet-stream; </span><br><span class="line">        sendfile on; #配置允许使用sendfile方式传输</span><br><span class="line">        keepalive_timeout 65; #配置连接超时</span><br><span class="line">        log_format access.log #配置请求处理日志的分格</span><br><span class="line">        &apos;$remote_addr-[$time_local]-&quot;$request&quot;-&quot;$http_user_agent&quot;&apos;</span><br><span class="line"></span><br><span class="line">        gzip on; #gzip功能设置</span><br><span class="line">        gzip_min_length 1024; #响应页数据上限</span><br><span class="line">        gzip_buffers 4 16k; # 缓存空间大小</span><br><span class="line">        gzip_comp_level 2; # 压缩级别为2</span><br><span class="line">        gzip_types text/plain application/x-javascript text/css application/xml; #压缩文件类型</span><br><span class="line">        gzip_vary on #启用压缩标识</span><br><span class="line">        gzip_disable &quot;MISIE[1-6]&quot;; #ie1-6不开启压缩功能</span><br><span class="line">        gunzip_static no #检查预压缩文件</span><br><span class="line">        gzip_static on;</span><br><span class="line">        gzup_http_version 1.0;</span><br><span class="line">#### server块开始 ####</span><br><span class="line">        server &#123; #配置虚拟主机1</span><br><span class="line">                listen 8081; </span><br><span class="line">                server_name myServer1; #监听端口和主机名称</span><br><span class="line">                access_log /myweb/server1/log/access_log; #配置请求处理日志存放路径</span><br><span class="line">                error_page 404 /404.html; </span><br><span class="line">                location /server1/location1 &#123; #配置处理/server1/location1 请求的location</span><br><span class="line">                        root /myweb;</span><br><span class="line">                        index index.svr1-local.htm;</span><br><span class="line">                &#125;</span><br><span class="line">                location /server2/location2 &#123; #配置处理/server2/location2 请求的location</span><br><span class="line">                        root /myweb;</span><br><span class="line">                        index index.svr2-local.htm;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        server &#123; #配置虚拟主机2</span><br><span class="line">                listen 8082; </span><br><span class="line">                gzip off; #主机2关闭压缩</span><br><span class="line">                server_name 192.168.1.3; #监听端口和主机名称</span><br><span class="line">                access_log /myweb/server2/log/access_log; #配置请求处理日志存放路径</span><br><span class="line">                error_page 404 /404.html; </span><br><span class="line">                location /server2/location1 &#123; #配置处理/server2/location1 请求的location</span><br><span class="line">                        root /myweb;</span><br><span class="line">                        index index.svr2-local.htm;</span><br><span class="line">                &#125;</span><br><span class="line">                location /server2/loc2 &#123; #配置处理/server2/location2 请求的location</span><br><span class="line">                        root /myweb;</span><br><span class="line">                        index index.svr2-local.htm;</span><br><span class="line">                &#125;</span><br><span class="line">                location = /404.html &#123;</span><br><span class="line">                        root /myweb/;</span><br><span class="line">                        index 404.html;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#### server块结束 ####</span><br><span class="line">&#125;</span><br><span class="line">#### http块结束 ####</span><br></pre></td></tr></table></figure></p><p>通过这个我们认识了nginx配置的基本组成:</p><ul><li>全局块：配置整体允许的配置指令，包括用户组，worker process数，Nginx进程,日志存放路径，配置文件引入</li><li>event块：与用户的网络连接,事件模型的选择，worker process下的网络序列化,是否允许同事接受多个网络连接，每个worker process最大支持连接数</li><li>http块：代理,缓存,日志定义,第三方模块的配置</li><li>server块：虚拟主机</li><li>location块: 基于请求对除虚拟主机之外的字符串进行匹配,包括地址定向，数据缓存，应答控制<a id="more"></a><h2 id="Nginx如何处理请求"><a href="#Nginx如何处理请求" class="headerlink" title="Nginx如何处理请求"></a>Nginx如何处理请求</h2><blockquote><p><em>同步和异步</em>：同步是指发送方发送请求后，需要等待接收到接收方发回的响应后，才接着发送下一个请求；异步是指发送第一个请求后，不等待接收方响应请求，就继续发送下个请求。在同步机制中，发送方和接收方的步调是一致的；异步中，所有请求形成队列，接收方处理完成后通知发送方。<br><em>阻塞和非阻塞</em>：描述进程处理调度方式，在网络通信中，主要指网络套接字Socket的阻塞和非阻塞，Socket的调用方式是调用结果返回之前，当前线程从运行状态被挂起，一直等到调用结果返回之后，才进入就绪状态，获取CPU后继续执行;Socket的非阻塞调用方式，如果调用结果不能返回，当前线程不会挂起，而是立即放回执行下一个调用。</p></blockquote></li></ul><p>Nginx主要使用Master-Worker模式，每个工作进程使用异步非阻塞方式，可以处理多个客户端请求。当某个工作进程接收到客户端的请求后，调用IO进行处理，如果不能立即得到结果，就去处理其他请求，而客户端再次期间也无需等待响应，可以去处理其他事情。当IO调用放回结果，就会通知此工作进程；该进程得到通知，暂时挂起当前处理的事物，去响应客户端请求。</p><h2 id="Nginx的事件驱动模型"><a href="#Nginx的事件驱动模型" class="headerlink" title="Nginx的事件驱动模型"></a>Nginx的事件驱动模型</h2><p>IO调用是如何把自己的状态通知给工作进程的呢？IO调用在完成后能主动通知工作进程主要是使用事件驱动模型。</p><blockquote><p><em>select</em>: 支持linux和windows，首先创建所关注事件的描述符集合（收集读事件的描述符，写事件的描述符，异常事件描述符）,然后调用select函数，轮询事件描述符，检查是否有相应事件发生。使用–with-select_module和–without-select_module是否编译该库。<br><em>poll</em>: 支持linux，是select的优化版本，在一个描述符上设置了读，写，异常事件,轮询时可以同时检查事件是否发生。<br><em>epoll</em>: 支持linux2.6以上，将待处理事件表直接放到内核中，然后给这些描述符设置所关注的事件，把它添加到事件列表中，在具体编码过程中通过相关调用对事件的描述符进行修改和删除。它支持一个进程打开大数目的事件描述符，上限是系统打开文件的最大数目，同时，epoll库的IO效率不随描述符怎家二线性下降，因为只对内核上报的活跃描述符进行操作。</p></blockquote><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程:"></a>主进程:</h3><ul><li>读取Nginx配置文件并验证其有效性和正确性</li><li>建立，绑定和关闭Socket</li><li>按照配置生成管理和结束进程</li><li>接收外界指令，比如重启，升级及退出服务器等指令</li><li>不中断服务，实现平滑重启，升级及退出服务</li><li>开启日志文件，获取文件描述符</li><li>编译和处理Perl脚本<h3 id="工作进程："><a href="#工作进程：" class="headerlink" title="工作进程："></a>工作进程：</h3></li><li>接收客户端请求</li><li>将请求一次送入各个功能模块进行过滤处理</li><li>IO调用，获取响应数据</li><li>与后端服务器通信，接收后端服务器处理结果</li><li>数据缓存，访问索引，查询和调用缓存数据</li><li>发送请求结果，响应客户端请求</li><li>接收主程序指令，比如重启升级和退出<h3 id="缓存索引重建及管理进程"><a href="#缓存索引重建及管理进程" class="headerlink" title="缓存索引重建及管理进程"></a>缓存索引重建及管理进程</h3>缓存索引重建:在Nginx启动一段时间后由主进程生成，在缓存元数据重建完成后退出,根据本地磁盘在内存中建立索引元数据<br>魂村索引管理:存在主进程的整个生命周期，主要在索引数据更新后，判断是否过期<h2 id="优化配置"><a href="#优化配置" class="headerlink" title="优化配置"></a>优化配置</h2><h3 id="针对ipv4的内核参数配置优化"><a href="#针对ipv4的内核参数配置优化" class="headerlink" title="针对ipv4的内核参数配置优化"></a>针对ipv4的内核参数配置优化</h3>在/etc/sysctl.conf中追加下面的参数,然后使用<em>/sbin/sysctl -p</em>命令使配置生效</li><li>net.core.netdev_max_backlog=262144 #表示当每个接收数据包的速率比内核处理这些包的速率快时，允许发送到队列的数据包的最大数目</li><li>net.core.somaxconn=262144 #TCP连接数，高并发下，可能导致连接超时或重传问题</li><li>net.ipv4.tcp_max_orphans=262144 #允许最多Tcp套接字关联到用户文件句柄上，防止Dos攻击</li><li>net.ipv4.tcp_timestamps=0 # 禁用对时间戳的支持</li><li>net.ipv4.tcp_synack_retries=1 # 放弃tcp连接之前发送一次SYN+ACK包 </li><li>net.ipv4.tcp_syn_retries=1 # 设置放弃连接之前发送SYN包的数量<h3 id="针对CPU的Nginx配置优化"><a href="#针对CPU的Nginx配置优化" class="headerlink" title="针对CPU的Nginx配置优化"></a>针对CPU的Nginx配置优化</h3></li><li>worker_processes 4; #针对cpu核数</li><li>worker_cpu_affinity 0001 0100 1000 0010 #为每个分配分配他的cpu<h3 id="与网络连接相关的配置"><a href="#与网络连接相关的配置" class="headerlink" title="与网络连接相关的配置"></a>与网络连接相关的配置</h3></li><li>keepalive_timeout 60 50 #（1）服务端与客户端保持连接的超时时间 （2）Keep-Alive消息头，客户端连接事件</li><li>send_timeout 10s # 设置Nginx服务器响应客户端的超时事件，某次会话等待客户端响应超过10s，断开连接</li><li>client_header_buffer_size 4k #客户端响应头部的缓冲区大小<h3 id="与事件驱动相关-event模块"><a href="#与事件驱动相关-event模块" class="headerlink" title="与事件驱动相关(event模块)"></a>与事件驱动相关(event模块)</h3>use epoll #事件驱动模型<br>worker_connections 65535 #每个工作进程允许同时连接客户端的最大数量，Client=worker_processes * worker_connections /2<br>worker_rlimit_sigpending 1024 #Linux事件信号队列长度上限<h4 id="poll事件驱动"><a href="#poll事件驱动" class="headerlink" title="poll事件驱动"></a>poll事件驱动</h4>devpoll_change 32 #传递给内核的事件数<br>devpoll_events 32 #从内核获取事件数量<h4 id="kqueue事件驱动"><a href="#kqueue事件驱动" class="headerlink" title="kqueue事件驱动"></a>kqueue事件驱动</h4>kqueue_changes 512 #传递给内核的事件数<br>kqueue_events 512 #从内核获取事件数量<h4 id="epoll-events驱动"><a href="#epoll-events驱动" class="headerlink" title="epoll_events驱动"></a>epoll_events驱动</h4>epoll_changes 512 #发送和收到内核的事件数<h4 id="rtsig"><a href="#rtsig" class="headerlink" title="rtsig"></a>rtsig</h4>rtsig_signo signo<br>###Gzip压缩(http模块)<h4 id="ngx-http-gip-module模块-适用于大文件下载"><a href="#ngx-http-gip-module模块-适用于大文件下载" class="headerlink" title="ngx_http_gip_module模块(适用于大文件下载)"></a>ngx_http_gip_module模块(适用于大文件下载)</h4>gzip on #开启压缩功能<br>gzip_buffers 32 4k | 16 8k #number*size存储压缩空间<br>gzip_comp_level 1 #压缩基本，1-9 1:压缩程度低，压缩效率高 9：压缩程度最高，压缩效率最低<br>gzip_disable MSIE [4-6]. #ie4-6不进行gzip压缩<br>gzip_http_version 1.0|1.1; # 开启Gzip功能的最低http协议版本<br>gzip_min_length 1024 #开启页面压缩的最小值,页面大于这个值才开启压缩<br>gzip_proxied on #开启对后端服务器返回结构的Gzip压缩<br>gzip_proxied expired #当后端服务器响应页头部包含只是响应数据过期时间的expired头域时，开启对响应数据的压缩<br>gzip_proxied no-cache #当后端服务器响应页头部包含只是响应数据过期时间的expired头域时，开启对响应数据的压缩<br>gzip_proxied no-store #当后端服务器响应页头部Cache-Control的指令为no-store时，开启对响应数据的Gzip压缩<br>gzip_proxied private #当后端服务器响应页头部Cache-Control的指令为private时，开启对响应数据的Gzip压缩<br>gzip_proxied no_last_modified #当后端服务器响应页头部不包含Last-Modified时，开启对响应数据的压缩<br>gzip_proxied no_etag #当后端服务器响应页头部不包含ETag时，开启对响应数据的压缩<br>gzip_proxied auth #当后端服务器响应页头部用于标示HTTP授权证书时，开启对响应数据的压缩<br>gzip_proxied any #无条件开启对响应数据的压缩<br>gzip_types text/plain application/x-javascript text/css text/html application/xml #根据响应页的MIME-TYPE选择性地开启Gzip压缩功能<br>gzip_vary on #经过压缩处理的响应会在头部添加”Vary:Accept-Encoding:gizp”也可用add_header Vary Accept-Encoding gzip<h4 id="ngx-http-gzip-static-module模块-可确定数据长度"><a href="#ngx-http-gzip-static-module模块-可确定数据长度" class="headerlink" title="ngx_http_gzip_static_module模块(可确定数据长度)"></a>ngx_http_gzip_static_module模块(可确定数据长度)</h4>编译添加–with-http_gzip_static_module<br>gzip_static on | off | aways; #开启 | 关闭 | 不检查客户端是否支持压缩,直接发送压缩文件<br>gzip_proxied no-cache no-store private auth;<h4 id="ngx-http-gunzip-module模块-不支持解压的浏览器，对数据进行解压"><a href="#ngx-http-gunzip-module模块-不支持解压的浏览器，对数据进行解压" class="headerlink" title="ngx_http_gunzip_module模块(不支持解压的浏览器，对数据进行解压)"></a>ngx_http_gunzip_module模块(不支持解压的浏览器，对数据进行解压)</h4>编译添加–with-http_gunzip_module<br>gunzip_static on<br>gunzip_buffers 32 4k | 16 8k</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于刚看完nginx高性能web服务器详解，就想结合自己工作的经历，对nginx的优化配置做一个系统的总结，这篇是初级篇，是单机的nginx优化配置&lt;br&gt;首先我们看一份较简单的nginx.conf配置文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#### 全局块开始 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user nobody nobody; #配置允许Nginx服务器的用户和用户组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;worker_processes 3; #配置Nginx进程生成的worker_processes数目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;error_log logs/error_log; #配置Nginx服务器允许对错误日志存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pid nginx.pid; #配置Nginx服务允许时的错误日志存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 全局块结束 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### event开始 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        use epoll; #配置事件驱动模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        worker_connections 1024; #配置最大连接数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### event结束 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### http块开始 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        include mime.types; #定义MIME-TYPE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        default_type application/octet-stream; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sendfile on; #配置允许使用sendfile方式传输&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keepalive_timeout 65; #配置连接超时&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        log_format access.log #配置请求处理日志的分格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;apos;$remote_addr-[$time_local]-&amp;quot;$request&amp;quot;-&amp;quot;$http_user_agent&amp;quot;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip on; #gzip功能设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_min_length 1024; #响应页数据上限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_buffers 4 16k; # 缓存空间大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_comp_level 2; # 压缩级别为2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_types text/plain application/x-javascript text/css application/xml; #压缩文件类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_vary on #启用压缩标识&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_disable &amp;quot;MISIE[1-6]&amp;quot;; #ie1-6不开启压缩功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gunzip_static no #检查预压缩文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzip_static on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gzup_http_version 1.0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### server块开始 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server &amp;#123; #配置虚拟主机1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                listen 8081; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server_name myServer1; #监听端口和主机名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                access_log /myweb/server1/log/access_log; #配置请求处理日志存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                error_page 404 /404.html; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location /server1/location1 &amp;#123; #配置处理/server1/location1 请求的location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        root /myweb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        index index.svr1-local.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location /server2/location2 &amp;#123; #配置处理/server2/location2 请求的location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        root /myweb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server &amp;#123; #配置虚拟主机2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                listen 8082; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                gzip off; #主机2关闭压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                server_name 192.168.1.3; #监听端口和主机名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                access_log /myweb/server2/log/access_log; #配置请求处理日志存放路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                error_page 404 /404.html; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location /server2/location1 &amp;#123; #配置处理/server2/location1 请求的location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        root /myweb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location /server2/loc2 &amp;#123; #配置处理/server2/location2 请求的location&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        root /myweb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        index index.svr2-local.htm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                location = /404.html &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        root /myweb/;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        index 404.html;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### server块结束 ####&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### http块结束 ####&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过这个我们认识了nginx配置的基本组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局块：配置整体允许的配置指令，包括用户组，worker process数，Nginx进程,日志存放路径，配置文件引入&lt;/li&gt;
&lt;li&gt;event块：与用户的网络连接,事件模型的选择，worker process下的网络序列化,是否允许同事接受多个网络连接，每个worker process最大支持连接数&lt;/li&gt;
&lt;li&gt;http块：代理,缓存,日志定义,第三方模块的配置&lt;/li&gt;
&lt;li&gt;server块：虚拟主机&lt;/li&gt;
&lt;li&gt;location块: 基于请求对除虚拟主机之外的字符串进行匹配,包括地址定向，数据缓存，应答控制
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>swoole利用websocket进行wss访问</title>
    <link href="http://yoursite.com/2018/01/03/websocket%E7%BB%93%E5%90%88swoole%E8%BF%9B%E8%A1%8Cwss%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2018/01/03/websocket结合swoole进行wss访问/</id>
    <published>2018-01-03T13:32:26.000Z</published>
    <updated>2018-05-27T09:59:36.033Z</updated>
    
    <content type="html"><![CDATA[<p>最近利用swoole的websocket对扫码登录进行重构，原本是利用长轮循监听用户的的扫码，但对服务器的资源消耗太大，所以改用websocket节省带宽和服务器资源。</p><blockquote><p><strong>websocket</strong>: 一种在单个 TCP 连接上进行全双工通讯的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></blockquote><h2 id="在docker中搭建swoole的环境"><a href="#在docker中搭建swoole的环境" class="headerlink" title="在docker中搭建swoole的环境"></a>在docker中搭建swoole的环境</h2><ul><li><p>先建立build_swoole.sh这样的安装shell文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apk add git autoconf build-base linux-headers libaio-dev pcre-dev openssl-dev icu-dev</span><br><span class="line">ln -s /usr/bin/php-config7 /usr/bin/php-config</span><br><span class="line">ln -s /usr/bin/phpize7 /usr/bin/phpize</span><br><span class="line">cd /root/</span><br><span class="line">git clone https://github.com/swoole/swoole-src.git</span><br><span class="line">cd /root/swoole-src</span><br><span class="line">phpize</span><br><span class="line">./configure --enable-openssl</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">apk del libaio-dev php-dev git autoconf build-base linux-headers pcre-dev</span><br><span class="line">apk del --no-cache php-dev</span><br><span class="line">apk del --no-cache git</span><br><span class="line">apk del --no-cache build-base</span><br><span class="line">apk del --no-cache make</span><br><span class="line">apk del --no-cache openssl-dev</span><br><span class="line">apk del --no-cache linux-headers</span><br><span class="line">apk del --no-cache libaio-dev</span><br><span class="line">apk del --no-cache pcre-dev</span><br><span class="line">apk del --no-cache autoconf</span><br><span class="line">apk del --no-cache .persistent-deps</span><br><span class="line">apk del --no-cache libmcrypt-dev</span><br><span class="line">apk del --no-cache g++</span><br><span class="line"><span class="meta">#</span><span class="bash"> apk del --no-cache icu-dev</span></span><br><span class="line">apk info</span><br><span class="line">php -m</span><br><span class="line">rm -rf /var/cache/apk/*</span><br><span class="line">rm -rf /root/swoole-src/</span><br><span class="line">rm -rf /tmp/*</span><br></pre></td></tr></table></figure></li><li><p>然后在Dockerfile中使用我们的安装脚本,编译安装成功后，修改php.ini加入<code>extension=swoole.so</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM zacksleo/php:7.1-alpine-fpm-supervisor</span><br><span class="line">COPY build_swoole.sh /root</span><br><span class="line">RUN sh /root/build_swoole.sh</span><br></pre></td></tr></table></figure></li><li><p>接着<code>docker-composer build 创建对应的docker镜像</code>，并且运行<code>docker-composer up</code>，在进入对应的docker容器中<code>docker exec 你的镜像名</code>,执行命令<code>php -m</code>,如果出现swoole，那我们的swoole扩展就安装好了</p><a id="more"></a><h2 id="创建服务器的swoole的监听"><a href="#创建服务器的swoole的监听" class="headerlink" title="创建服务器的swoole的监听"></a>创建服务器的swoole的监听</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">console</span>\<span class="title">controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">models</span>\<span class="title">QrcodeToken</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">common</span>\<span class="title">models</span>\<span class="title">User</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">console</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Swoole</span>\<span class="title">WebSocket</span>\<span class="title">Server</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class PremiumController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> console\controllers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auth</span> graychen &lt;455803034<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSocketController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * websocket 监听扫码登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionListenLogin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $setConfig = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'ssl_key_file'</span> =&gt; <span class="string">'/var/www/html/services/nginx/ssl-cert/ssl.key'</span>,</span><br><span class="line">            <span class="string">'ssl_cert_file'</span> =&gt; <span class="string">'/var/www/html/services/nginx/ssl-cert/ssl.crt'</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server = <span class="keyword">new</span> Server(<span class="string">'0.0.0.0'</span>, <span class="number">9502</span>, SWOOLE_PROCESS, SWOOLE_SOCK_TCP | SWOOLE_SSL);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server-&gt;set($setConfig);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'open'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $request)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"server: handshake success with fd&#123;$request-&gt;fd&#125;\n"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $frame)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"receive from &#123;$frame-&gt;fd&#125;:&#123;$frame-&gt;data&#125;,opcode:&#123;$frame-&gt;opcode&#125;,fin:&#123;$frame-&gt;finish&#125;\n"</span>;</span><br><span class="line">            $message = json_decode($frame-&gt;data);</span><br><span class="line">            $timestamp = $message-&gt;timestamp;</span><br><span class="line">            $token = $message-&gt;token;</span><br><span class="line">            swoole_timer_tick(<span class="number">1000</span>, <span class="function"><span class="keyword">function</span> <span class="params">($timerId)</span> <span class="title">use</span> <span class="params">($token, $server, $frame)</span> </span>&#123;</span><br><span class="line">                $token = <span class="keyword">$this</span>-&gt;findModel($token);</span><br><span class="line">                <span class="keyword">if</span> ($token === <span class="keyword">null</span> || $token-&gt;status == QrcodeToken::STATUS_EXPIRED) &#123;</span><br><span class="line">                    $response = json_encode([</span><br><span class="line">                        <span class="string">'timestamp'</span> =&gt; time(),</span><br><span class="line">                        <span class="string">'status'</span> =&gt; QrcodeToken::STATUS_EXPIRED</span><br><span class="line">                    ]);</span><br><span class="line">                    $server-&gt;push($frame-&gt;fd, $response);</span><br><span class="line">                    swoole_timer_clear($timerId);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ($server-&gt;exist($frame-&gt;fd) &amp;&amp; in_array($token-&gt;status, [QrcodeToken::STATUS_SCANNED, QrcodeToken::STATUS_LOGGED_IN])) &#123;</span><br><span class="line">                        $response = json_encode([</span><br><span class="line">                            <span class="string">'timestamp'</span> =&gt; $token-&gt;updated_at,</span><br><span class="line">                            <span class="string">'status'</span> =&gt; $token-&gt;status</span><br><span class="line">                        ]);</span><br><span class="line">                        $server-&gt;push($frame-&gt;fd, $response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server-&gt;on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Server $server, $fd)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"client &#123;$fd&#125; closed\n"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;server-&gt;start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">findModel</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        clearstatcache();</span><br><span class="line">        $token = QrcodeToken::findOne([<span class="string">'id'</span> =&gt; $id]);</span><br><span class="line">        <span class="keyword">return</span> $token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果你的网站本身是https，那必须要用wss，就是在原来的ws连接的基础上加入对应的ssl连接证书,注意如果你是在本地连接的话，因为证书需要对应的域名，可以通过修改linux环境下的hosts文件，将127.0.0.1的对应域名改成你证书的域名即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> error = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> timestamp = &#123;$timestamp&#125;;</span><br><span class="line">    <span class="keyword">var</span> _t = <span class="string">'&#123;$token&#125;'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startWebSocket</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> host=<span class="built_in">document</span>.domain;</span><br><span class="line">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">'wss://'</span> + host + <span class="string">':9502'</span>);</span><br><span class="line">        websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> message=&#123;</span><br><span class="line">                timestamp:timestamp,</span><br><span class="line">                token:_t</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">if</span>(message!==<span class="literal">null</span>)&#123;</span><br><span class="line">                websocket.send(<span class="built_in">JSON</span>.stringify(message));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(\<span class="string">"关闭连接\");</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        websocket.onmessage = function (evt) &#123;</span></span><br><span class="line"><span class="string">            var response=JSON.parse(evt.data);</span></span><br><span class="line"><span class="string">            if(response.status==1)&#123;                  </span></span><br><span class="line"><span class="string">              $('#fn-tips').text('已扫码, 请点击确认');</span></span><br><span class="line"><span class="string">              timestamp = response.timestamp;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if(response.status==2)&#123;</span></span><br><span class="line"><span class="string">              $('#fn-tips').text('已登录, 正在跳转···');</span></span><br><span class="line"><span class="string">              setTimeout(function()&#123;</span></span><br><span class="line"><span class="string">                $('#ff-qrcode-token').submit();                    </span></span><br><span class="line"><span class="string">              &#125;,500);                  </span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if(response.status==-2)&#123;</span></span><br><span class="line"><span class="string">              alert('二维码已失效, 请刷新页面');</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            error = false;</span></span><br><span class="line"><span class="string">            timestamp = response.timestamp;                </span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        websocket.onerror = function (evt, e) &#123;</span></span><br><span class="line"><span class="string">            console.log('错误代码: ' + evt.data);</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近利用swoole的websocket对扫码登录进行重构，原本是利用长轮循监听用户的的扫码，但对服务器的资源消耗太大，所以改用websocket节省带宽和服务器资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;websocket&lt;/strong&gt;: 一种在单个 TCP 连接上进行全双工通讯的协议。使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;在docker中搭建swoole的环境&quot;&gt;&lt;a href=&quot;#在docker中搭建swoole的环境&quot; class=&quot;headerlink&quot; title=&quot;在docker中搭建swoole的环境&quot;&gt;&lt;/a&gt;在docker中搭建swoole的环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先建立build_swoole.sh这样的安装shell文件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apk add git autoconf build-base linux-headers libaio-dev pcre-dev openssl-dev icu-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s /usr/bin/php-config7 /usr/bin/php-config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s /usr/bin/phpize7 /usr/bin/phpize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /root/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/swoole/swoole-src.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd /root/swoole-src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;phpize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure --enable-openssl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del libaio-dev php-dev git autoconf build-base linux-headers pcre-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache php-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache build-base&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache openssl-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache linux-headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache libaio-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache pcre-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache autoconf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache .persistent-deps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache libmcrypt-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk del --no-cache g++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; apk del --no-cache icu-dev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apk info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;php -m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /var/cache/apk/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /root/swoole-src/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf /tmp/*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后在Dockerfile中使用我们的安装脚本,编译安装成功后，修改php.ini加入&lt;code&gt;extension=swoole.so&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM zacksleo/php:7.1-alpine-fpm-supervisor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COPY build_swoole.sh /root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN sh /root/build_swoole.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接着&lt;code&gt;docker-composer build 创建对应的docker镜像&lt;/code&gt;，并且运行&lt;code&gt;docker-composer up&lt;/code&gt;，在进入对应的docker容器中&lt;code&gt;docker exec 你的镜像名&lt;/code&gt;,执行命令&lt;code&gt;php -m&lt;/code&gt;,如果出现swoole，那我们的swoole扩展就安装好了&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用Prometheus+Grafana监控</title>
    <link href="http://yoursite.com/2017/12/10/%E4%BD%BF%E7%94%A8Prometheus-Grafana%E7%9B%91%E6%8E%A7/"/>
    <id>http://yoursite.com/2017/12/10/使用Prometheus-Grafana监控/</id>
    <published>2017-12-10T10:09:37.000Z</published>
    <updated>2018-05-27T09:59:36.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。<br>Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。<br>Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。</p><p>输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：<a href="https://github.com/prometheus。" target="_blank" rel="noopener">https://github.com/prometheus。</a></p><p>与其他监控系统相比，Prometheus的主要特点是：</p><ul><li>一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。</li><li>非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。</li><li>一种灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点。</li><li>时间集合通过HTTP上的PULL模型进行。</li><li>通过中间网关支持推送时间。</li><li>通过服务发现或静态配置发现目标。</li><li>多种模式的图形和仪表板支持。</li></ul><h2 id="Prometheus架构概览"><a href="#Prometheus架构概览" class="headerlink" title="Prometheus架构概览"></a>Prometheus架构概览</h2><p>该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：<br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4pg7j25ej30l60dw40p.jpg" alt="Prometheus架构概览"><br>它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。</p><ul><li><p>Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。</p></li><li><p>Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。</p></li><li><p>PushGateway：这个组件是支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。</p></li></ul><h2 id="Prometheus的数据模型"><a href="#Prometheus的数据模型" class="headerlink" title="Prometheus的数据模型"></a>Prometheus的数据模型</h2><p>Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。<br>metrics name&amp;label指标名称和标签</p><p>每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。</p><h3 id="指标名称："><a href="#指标名称：" class="headerlink" title="指标名称："></a>指标名称：</h3><p>一般是给监测对像起一名字，例如http_requests_total这样，它有一些命名规则，可以包字母数字<em>之类的的。通常是以应用名称开头</em>监测对像<em>数值类型</em>单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。</p><h3 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h3><p>就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。</p><p>记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。</p><p>查询语句就可以跟据上面标签的组合来查询聚合结果了。</p><p>如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。</p><a id="more"></a><h2 id="Prometheus四种数据类型"><a href="#Prometheus四种数据类型" class="headerlink" title="Prometheus四种数据类型"></a>Prometheus四种数据类型</h2><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>Counter用于累计值，例如记录请求次数、任务完成数、错误发生次数。一直增加，不会减少。重启进程后，会被重置。</p><p>例如：http_response_total{method=”GET”,endpoint=”/api/tracks”} 100，10秒后抓取http_response_total{method=”GET”,endpoint=”/api/tracks”} 100。</p><h3 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h3><p>Gauge常规数值，例如 温度变化、内存使用变化。可变大，可变小。重启进程后，会被重置。</p><p>例如： memory_usage_bytes{host=”master-01″} 100 &lt; 抓取值、memory_usage_bytes{host=”master-01″} 30、memory_usage_bytes{host=”master-01″} 50、memory_usage_bytes{host=”master-01″} 80 &lt; 抓取值。</p><h3 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h3><p>Histogram（直方图）可以理解为柱状图的意思，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。它特别之处是可以对记录的内容进行分组，提供count和sum全部值的功能。</p><p>例如：{小于10=5次，小于20=1次，小于30=2次}，count=7次，sum=7次的求和值。</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Summary和Histogram十分相似，常用于跟踪事件发生的规模，例如：请求耗时、响应大小。同样提供 count 和 sum 全部值的功能。</p><p>例如：count=7次，sum=7次的值求值。</p><p>它提供一个quantiles的功能，可以按%比划分跟踪的结果。例如：quantile取值0.95，表示取采样值里面的95%数据。</p><h2 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h2><p>###下面的例子以这个项目为例(promethes项目)[<a href="https://mops-gitlab.lianluo.com/chenjiahui/Prometheus/tree/master]" target="_blank" rel="noopener">https://mops-gitlab.lianluo.com/chenjiahui/Prometheus/tree/master]</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  prometheus:</span> </span><br><span class="line"><span class="attr">    image:</span> prom/prometheus:v1<span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">        -</span> ./prometheus.yml:/etc/prometheus/prometheus.yml</span><br><span class="line"><span class="attr">        - prometheus_data:</span>/prometheus</span><br><span class="line"><span class="bullet">        -</span> ./alert.rules:/etc/prometheus/alert.rules</span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'-config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'-alertmanager.url=http://alertmanager:9093'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'9090:9090'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  grafana:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"grafana/grafana:3.1.1"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">        -</span> GF_SECURITY_ADMIN_PASSWORD=pass</span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">        -</span> prometheus</span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">        - grafana_data:</span>/var/lib/grafana</span><br><span class="line"><span class="bullet">        -</span> ./alert.rules:/etc/prometheus/alert.rules</span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"3000:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  alertmanager:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">"prom/alertmanager:v0.8.0"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">        -</span> ./alertmanager.yml:/alertmanager.yml</span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">'-config.file=/alertmanager.yml'</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  prometheus_data:</span> &#123;&#125;</span><br><span class="line"><span class="attr">  grafana_data:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Prometheus内置了一个web界面，我们可通过<a href="http://monitor_host:9090进行访问：" target="_blank" rel="noopener">http://monitor_host:9090进行访问：</a><br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4tb10am7j30mh093jsh.jpg" alt><br>但是自带的图形工具过于简陋，grafana是他的替代品，您可以通过http：// localhost：3000 / login访问Grafana,<br><img src="http://ww1.sinaimg.cn/large/0060OHG5gy1fm4tbxey4xj30mo08k3zm.jpg" alt></p><p>在状态页面的“配置”下方，您会看到一个“目标”部分，其中列出了“prometheus”端点。<br>这相当于scrape_configs相同的设置，job_name 并且是普罗米修斯提供的指标的来源。换句话说，普罗米修斯服务器带有一个度量端点<br>或者上面所说的出口商，它报告普罗米修斯服务器本身的统计数据。</p><h3 id="cAdvisor-容器数据采集"><a href="#cAdvisor-容器数据采集" class="headerlink" title="cAdvisor 容器数据采集"></a>cAdvisor 容器数据采集</h3><p>因为promethus是通过主动去指定的地址拉取数据，所以要监听的项目需要配置导出器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cadvisor:</span><br><span class="line"> image: google/cadvisor</span><br><span class="line"> volumes:</span><br><span class="line">   - /:/rootfs:ro</span><br><span class="line">   - /var/run:/var/run:rw</span><br><span class="line">   - /sys:/sys:ro</span><br><span class="line">   - /var/lib/docker/:/var/lib/docker:ro</span><br><span class="line"> ports:</span><br><span class="line">     - &quot;8080:8080&quot;</span><br><span class="line"> expose:</span><br><span class="line">     - &quot;8080&quot;</span><br></pre></td></tr></table></figure><h3 id="prometheus-yaml-配置监听数据地址"><a href="#prometheus-yaml-配置监听数据地址" class="headerlink" title="prometheus.yaml 配置监听数据地址"></a>prometheus.yaml 配置监听数据地址</h3><p>prometheus通过在这些目标上抓取指标HTTP端点来从监控目标收集指标,监听的就是数据导出器的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># my global config</span><br><span class="line">global:</span><br><span class="line">  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br><span class="line">  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.</span><br><span class="line">  # scrape_timeout is set to the global default (10s).</span><br><span class="line"></span><br><span class="line">  # Attach these labels to any time series or alerts when communicating with</span><br><span class="line">  # external systems (federation, remote storage, Alertmanager).</span><br><span class="line">  external_labels:</span><br><span class="line">      monitor: &apos;codelab-monitor&apos;</span><br><span class="line"></span><br><span class="line"># Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.</span><br><span class="line">rule_files:</span><br><span class="line">    - &apos;alert.rules&apos;</span><br><span class="line"></span><br><span class="line"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="line"># Here it&apos;s Prometheus itself.</span><br><span class="line">scrape_configs:</span><br><span class="line">  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span><br><span class="line">  - job_name: &apos;prometheus&apos;</span><br><span class="line">    #scrape_interval: 5s</span><br><span class="line">    # metrics_path defaults to &apos;/metrics&apos;</span><br><span class="line">    # scheme defaults to &apos;http&apos;.</span><br><span class="line"></span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.1.162:9090&apos;]</span><br><span class="line">        labels:</span><br><span class="line">          instance: prometheus</span><br><span class="line"></span><br><span class="line">  - job_name: &apos;docker-online&apos;</span><br><span class="line">    #scrape_interval: 5s</span><br><span class="line">    #scheme: http</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;192.168.1.162:8080&apos;]</span><br><span class="line">        labels:</span><br><span class="line">         group: &apos;port&apos;</span><br></pre></td></tr></table></figure><h3 id="Alertmanager报警组件"><a href="#Alertmanager报警组件" class="headerlink" title="Alertmanager报警组件"></a>Alertmanager报警组件</h3><p>Alertmanager通过命令行flag和一个配置文件进行配置。命令行flag配置不变的系统参数、配置文件定义的禁止规则、通知路由和通知接收器。<br>要查看所有可用的命令行flag，运行alertmanager -h。<br>Alertmanager在运行时加载配置，如果不能很好的形成新的配置，更改将不会被应用，并记录错误。<br>配置文件<br>要指定加载的配置文件，需要使用-config.file标志。该文件使用YAML来完成，通过下面的描述来定义。括号内的参数是可选的，对于非列表的参数的值设置为指定的缺省值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">global:</span><br><span class="line">  # ResolveTimeout is the time after which an alert is declared resolved</span><br><span class="line">  # if it has not been updated.</span><br><span class="line">  [ resolve_timeout: &lt;duration&gt; | default = 5m ]</span><br><span class="line"></span><br><span class="line">  # The default SMTP From header field.</span><br><span class="line">  [ smtp_from: &lt;tmpl_string&gt; ]</span><br><span class="line">  # The default SMTP smarthost used for sending emails.</span><br><span class="line">  [ smtp_smarthost: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line">  # The API URL to use for Slack notifications.</span><br><span class="line">  [ slack_api_url: &lt;string&gt; ]</span><br><span class="line"></span><br><span class="line">  [ pagerduty_url: &lt;string&gt; | default = &quot;https://events.pagerduty.com/generic/2010-04-15/create_event.json&quot; ]</span><br><span class="line">  [ opsgenie_api_host: &lt;string&gt; | default = &quot;https://api.opsgenie.com/&quot; ]</span><br><span class="line"></span><br><span class="line"># Files from which custom notification template definitions are read.</span><br><span class="line"># The last component may use a wildcard matcher, e.g. &apos;templates/*.tmpl&apos;.</span><br><span class="line">templates:</span><br><span class="line">  [ - &lt;filepath&gt; ... ]</span><br><span class="line"></span><br><span class="line"># The root node of the routing tree.</span><br><span class="line">route: &lt;route&gt;</span><br><span class="line"></span><br><span class="line"># A list of notification receivers.</span><br><span class="line">receivers:</span><br><span class="line">  - &lt;receiver&gt; ...</span><br><span class="line"></span><br><span class="line"># A list of inhibition rules.</span><br><span class="line">inhibit_rules:</span><br><span class="line">  [ - &lt;inhibit_rule&gt; ... ]</span><br></pre></td></tr></table></figure></p><p>路由 route<br>路由块定义了路由树及其子节点。如果没有设置的话，子节点的可选配置参数从其父节点继承。<br>每个警报进入配置的路由树的顶级路径，顶级路径必须匹配所有警报（即没有任何形式的匹配）。然后匹配子节点。如果continue的值设置为false，它在匹配第一个孩子后就停止；如果在子节点匹配，continue的值为true，警报将继续进行后续兄弟姐妹的匹配。如果警报不匹配任何节点的任何子节点（没有匹配的子节点，或不存在），该警报基于当前节点的配置处理。<br>路由配置格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[ receiver: &lt;string&gt; ]</span><br><span class="line">[ group_by: &apos;[&apos; &lt;labelname&gt;, ... &apos;]&apos; ]</span><br><span class="line"></span><br><span class="line"># Whether an alert should continue matching subsequent sibling nodes.</span><br><span class="line">[ continue: &lt;boolean&gt; | default = false ]</span><br><span class="line"></span><br><span class="line"># A set of equality matchers an alert has to fulfill to match the node.</span><br><span class="line">match:</span><br><span class="line">  [ &lt;labelname&gt;: &lt;labelvalue&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># A set of regex-matchers an alert has to fulfill to match the node.</span><br><span class="line">match_re:</span><br><span class="line">  [ &lt;labelname&gt;: &lt;regex&gt;, ... ]</span><br><span class="line"></span><br><span class="line"># How long to initially wait to send a notification for a group</span><br><span class="line"># of alerts. Allows to wait for an inhibiting alert to arrive or collect</span><br><span class="line"># more initial alerts for the same group. (Usually ~0s to few minutes.)</span><br><span class="line">[ group_wait: &lt;duration&gt; ]</span><br><span class="line"></span><br><span class="line"># How long to wait before sending notification about new alerts that are</span><br><span class="line"># in are added to a group of alerts for which an initial notification</span><br><span class="line"># has already been sent. (Usually ~5min or more.)</span><br><span class="line">[ group_interval: &lt;duration&gt; ]</span><br><span class="line"></span><br><span class="line"># How long to wait before sending a notification again if it has already</span><br><span class="line"># been sent successfully for an alert. (Usually ~3h or more).</span><br><span class="line">[ repeat_interval: &lt;duration&gt; ]</span><br><span class="line"></span><br><span class="line"># Zero or more child routes.</span><br><span class="line">routes:</span><br><span class="line">  [ - &lt;route&gt; ... ]</span><br></pre></td></tr></table></figure><p>在alertmanager这个配置文件配置任何警报报警alertmanager.yml，这看起来如下,这个例子是用slack(一款聊天工具),也可以用邮件,短信等其它方式报警：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">route:</span></span><br><span class="line"><span class="attr">    receiver:</span> <span class="string">'slack'</span></span><br><span class="line"><span class="attr">receivers:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">'slack'</span></span><br><span class="line"><span class="attr">      slack_configs:</span></span><br><span class="line"><span class="attr">          - send_resolved:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            username:</span> <span class="string">'Prometheus'</span></span><br><span class="line"><span class="attr">            channel:</span> <span class="string">'#random'</span></span><br><span class="line"><span class="attr">            api_url:</span> <span class="string">'https://hooks.slack.com/services/&lt;your&gt;/&lt;stuff&gt;/&lt;here&gt;'</span></span><br></pre></td></tr></table></figure><h3 id="报警规则"><a href="#报警规则" class="headerlink" title="报警规则"></a>报警规则</h3><p>报警规则允许你定义基于Prometheus语言表达的报警条件，并发送报警通知到外部服务。<br>报警规则通过以下格式定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALERT &lt;alert name&gt;</span><br><span class="line">  IF &lt;expression&gt;</span><br><span class="line">  [ FOR &lt;duration&gt; ]</span><br><span class="line">  [ LABELS &lt;label set&gt; ]</span><br><span class="line">  [ ANNOTATIONS &lt;label set&gt; ]</span><br></pre></td></tr></table></figure><p>FOR子句使得Prometheus等待第一个传进来的向量元素（例如高HTTP错误的实例），并计数一个警报。如果元素是active，但是没有firing的，就处于pending状态。<br>LABELS（标签）子句允许指定一组附加的标签附到警报上。现有的任何标签都会被覆盖，标签值可以被模板化。<br>ANNOTATIONS（注释）子句指定另一组未查明警报实例的标签，它们被用于存储更长的其他信息，例如警报描述或者链接，注释值可以被模板化。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># alert.rules</span><br><span class="line">ALERT service_down</span><br><span class="line">  IF up == 0</span><br><span class="line">ALERT high_load</span><br><span class="line">  IF node_load1 &gt; 0.5</span><br><span class="line">  ANNOTATIONS &#123;</span><br><span class="line">      summary = &quot;Instance &#123;&#123; $labels.instance &#125;&#125; under high load&quot;,</span><br><span class="line">      description = &quot;&#123;&#123; $labels.instance &#125;&#125; of job &#123;&#123; $labels.job &#125;&#125; is under highload.&quot;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://prometheus.io" target="_blank" rel="noopener">prometheus</a></li><li><a href="http://grafana.org" target="_blank" rel="noopener">grafana</a></li><li><a href="https://sagittariusyx.github.io/2016/03/07/prometheus-alertmanager/index.html" target="_blank" rel="noopener">Prometheus监控 - Alertmanager报警模块</a></li><li><a href="https://www.ctl.io/developers/blog/post/monitoring-docker-services-with-prometheus/" target="_blank" rel="noopener">Monitoring Docker Services with Prometheus - CenturyLink Cloud Developer Center</a></li><li><a href="http://www.ywnds.com/?p=9656" target="_blank" rel="noopener">使用Prometheus+Grafana监控MySQL实践 – 运维那点事</a></li><li><a href="http://blog.frognew.com/2017/02/use-prometheus-on-centos7.html" target="_blank" rel="noopener">使用Prometheus监控服务器</a></li><li><a href="http://yunlzheng.github.io/2017/07/04/prometheus-kubernates/" target="_blank" rel="noopener">Prometheus在Kubernetes下的监控实践</a></li><li><a href="https://finestructure.co/blog/2016/5/16/monitoring-with-prometheus-grafana-docker-part-1" target="_blank" rel="noopener">通过Prometheus，Grafana和Docker进行监控</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Prometheus（普罗米修斯）是一套开源的监控&amp;amp;报警&amp;amp;时间序列数据库的组合，起始是由SoundCloud公司开发的。随着发展，越来越多公司和组织接受采用Prometheus，社会也十分活跃，他们便将它独立成开源项目，并且有公司来运作。Google SRE的书内也曾提到跟他们BorgMon监控系统相似的实现是Prometheus。现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。&lt;br&gt;Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。&lt;br&gt;Prometheus应该是为数不多的适合Docker、Mesos、Kubernetes环境的监控系统之一。&lt;/p&gt;
&lt;p&gt;输出被监控组件信息的HTTP接口被叫做exporter 。目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux 系统信息 (包括磁盘、内存、CPU、网络等等)，具体支持的源看：&lt;a href=&quot;https://github.com/prometheus。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/prometheus。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;与其他监控系统相比，Prometheus的主要特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个多维数据模型（时间序列由指标名称定义和设置键/值尺寸）。&lt;/li&gt;
&lt;li&gt;非常高效的存储，平均一个采样数据占~3.5bytes左右，320万的时间序列，每30秒采样，保持60天，消耗磁盘大概228G。&lt;/li&gt;
&lt;li&gt;一种灵活的查询语言。&lt;/li&gt;
&lt;li&gt;不依赖分布式存储，单个服务器节点。&lt;/li&gt;
&lt;li&gt;时间集合通过HTTP上的PULL模型进行。&lt;/li&gt;
&lt;li&gt;通过中间网关支持推送时间。&lt;/li&gt;
&lt;li&gt;通过服务发现或静态配置发现目标。&lt;/li&gt;
&lt;li&gt;多种模式的图形和仪表板支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prometheus架构概览&quot;&gt;&lt;a href=&quot;#Prometheus架构概览&quot; class=&quot;headerlink&quot; title=&quot;Prometheus架构概览&quot;&gt;&lt;/a&gt;Prometheus架构概览&lt;/h2&gt;&lt;p&gt;该图说明了普罗米修斯（Prometheus）及其一些生态系统组件的整体架构：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/0060OHG5gy1fm4pg7j25ej30l60dw40p.jpg&quot; alt=&quot;Prometheus架构概览&quot;&gt;&lt;br&gt;它的服务过程是这样的Prometheus daemon负责定时去目标上抓取metrics(指标) 数据，每个抓取目标需要暴露一个http服务的接口给它定时抓取。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prometheus：支持通过配置文件、文本文件、zookeeper、Consul、DNS SRV lookup等方式指定抓取目标。支持很多方式的图表可视化，例如十分精美的Grafana，自带的Promdash，以及自身提供的模版引擎等等，还提供HTTP API的查询方式，自定义所需要的输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alertmanager：是独立于Prometheus的一个组件，可以支持Prometheus的查询语句，提供十分灵活的报警方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PushGateway：这个组件是支持Client主动推送metrics到PushGateway，而Prometheus只是定时去Gateway上抓取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Prometheus的数据模型&quot;&gt;&lt;a href=&quot;#Prometheus的数据模型&quot; class=&quot;headerlink&quot; title=&quot;Prometheus的数据模型&quot;&gt;&lt;/a&gt;Prometheus的数据模型&lt;/h2&gt;&lt;p&gt;Prometheus从根本上所有的存储都是按时间序列去实现的，相同的metrics(指标名称) 和label(一个或多个标签) 组成一条时间序列，不同的label表示不同的时间序列。为了支持一些查询，有时还会临时产生一些时间序列存储。&lt;br&gt;metrics name&amp;amp;label指标名称和标签&lt;/p&gt;
&lt;p&gt;每条时间序列是由唯一的”指标名称”和一组”标签（key=value）”的形式组成。&lt;/p&gt;
&lt;h3 id=&quot;指标名称：&quot;&gt;&lt;a href=&quot;#指标名称：&quot; class=&quot;headerlink&quot; title=&quot;指标名称：&quot;&gt;&lt;/a&gt;指标名称：&lt;/h3&gt;&lt;p&gt;一般是给监测对像起一名字，例如http_requests_total这样，它有一些命名规则，可以包字母数字&lt;em&gt;之类的的。通常是以应用名称开头&lt;/em&gt;监测对像&lt;em&gt;数值类型&lt;/em&gt;单位这样。例如：push_total、userlogin_mysql_duration_seconds、app_memory_usage_bytes。&lt;/p&gt;
&lt;h3 id=&quot;标签：&quot;&gt;&lt;a href=&quot;#标签：&quot; class=&quot;headerlink&quot; title=&quot;标签：&quot;&gt;&lt;/a&gt;标签：&lt;/h3&gt;&lt;p&gt;就是对一条时间序列不同维度的识别了，例如一个http请求用的是POST还是GET，它的endpoint是什么，这时候就要用标签去标记了。最终形成的标识便是这样了：http_requests_total{method=”POST”,endpoint=”/api/tracks”}。&lt;/p&gt;
&lt;p&gt;记住，针对http_requests_total这个metrics name无论是增加标签还是删除标签都会形成一条新的时间序列。&lt;/p&gt;
&lt;p&gt;查询语句就可以跟据上面标签的组合来查询聚合结果了。&lt;/p&gt;
&lt;p&gt;如果以传统数据库的理解来看这条语句，则可以考虑http_requests_total是表名，标签是字段，而timestamp是主键，还有一个float64字段是值了。（Prometheus里面所有值都是按float64存储）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="devops" scheme="http://yoursite.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>github上composer自动化测试</title>
    <link href="http://yoursite.com/2017/09/27/github%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2017/09/27/github自动化测试/</id>
    <published>2017-09-27T14:39:54.000Z</published>
    <updated>2018-05-27T09:59:36.033Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间我们组对项目进行重构，将多个项目中例如log，app的更新这些重复的内容抽出来做了composer包，为了保证这些composer包的代码质量，<br>使用了github上的一些工具。下面我以自己的一个利用经纬度查询地理位置的composer包geolocation[<a href="https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。" target="_blank" rel="noopener">https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。</a></p><h2 id="Style-CI-php格式检查"><a href="#Style-CI-php格式检查" class="headerlink" title="Style CI(php格式检查)"></a>Style CI(php格式检查)</h2><p>在项目根目录，新建.styleci.yml 配置文件，并编写配置内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preset: psr2</span><br></pre></td></tr></table></figure></p><p>打开 <a href="https://styleci.io/" target="_blank" rel="noopener">https://styleci.io/</a> ，使用Gitlab账号登录，找到对应的项目，点击右侧的 ENABLE STYLECI 启用按钮，即可使用，<br>每次提交代码，都会看到检测结果<br>如果没有找到自己的项目，打开 <a href="https://styleci.io/account#repos" target="_blank" rel="noopener">https://styleci.io/account#repos</a> 点击 Sync With GitHub 同步，就会看到</p><h2 id="Travis-CI-自动化测试"><a href="#Travis-CI-自动化测试" class="headerlink" title="Travis-CI(自动化测试)"></a>Travis-CI(自动化测试)</h2><h3 id="配置单元测试"><a href="#配置单元测试" class="headerlink" title="配置单元测试"></a>配置单元测试</h3><p>1先引入phpunit单元测试包,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require --dev phpunit/phpunit ^6.2</span><br></pre></td></tr></table></figure></p><p>2编写配置文件phpunit.xml.dist,放到根根根目录<br>白名单是你要测试的目录文件，用于生成代码覆盖率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;phpunit bootstrap=&quot;./tests/bootstrap.php&quot;</span><br><span class="line">         colors=&quot;true&quot;</span><br><span class="line">         verbose=&quot;true&quot;</span><br><span class="line">         convertErrorsToExceptions=&quot;true&quot;</span><br><span class="line">         convertNoticesToExceptions=&quot;true&quot;</span><br><span class="line">         convertWarningsToExceptions=&quot;true&quot;</span><br><span class="line">         processIsolation=&quot;false&quot;</span><br><span class="line">         stopOnFailure=&quot;false&quot;&gt;</span><br><span class="line">    &lt;testsuites&gt;</span><br><span class="line">        &lt;testsuite name=&quot;Test Suite&quot;&gt;</span><br><span class="line">            &lt;directory&gt;./tests&lt;/directory&gt;</span><br><span class="line">        &lt;/testsuite&gt;</span><br><span class="line">    &lt;/testsuites&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;whitelist&gt;</span><br><span class="line">            &lt;directory suffix=&quot;.php&quot;&gt;./src&lt;/directory&gt;</span><br><span class="line">        &lt;/whitelist&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">&lt;/phpunit&gt;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>3然后建立测试目录test，并在里面建立bootstrap.php来引入composer中的引导文件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// ensure we get report on all possible php errors</span></span><br><span class="line">error_reporting(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">require_once</span>(<span class="keyword">__DIR__</span> . <span class="string">'/../vendor/autoload.php'</span>);</span><br></pre></td></tr></table></figure></p><p>4composerjson.json文件里自动载入,否则找不到tests里面的TestCase<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;autoload-dev&quot;: &#123;</span><br><span class="line">       &quot;psr-4&quot;: &#123;</span><br><span class="line">           &quot;graychen\\Test\\&quot;: &quot;tests/&quot;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></p><p>5编写.travil.yml文件(在<a href="https://travis-ci.com/" target="_blank" rel="noopener">https://travis-ci.com/</a> 注册账号,然后在github添加service,这样每次提交代码就会自动同步到travis)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">php:</span><br><span class="line">  - 5.6</span><br><span class="line"></span><br><span class="line">  - 7.1</span><br><span class="line"></span><br><span class="line"> # cache vendor dirs</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - $HOME/.composer/cache</span><br><span class="line">    - vendor</span><br><span class="line"></span><br><span class="line">#安装依赖</span><br><span class="line">install:</span><br><span class="line"></span><br><span class="line">  - travis_retry composer self-update</span><br><span class="line"></span><br><span class="line">  - travis_retry composer install --prefer-dist --no-interaction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line"></span><br><span class="line">  - travis_retry composer self-update</span><br><span class="line"></span><br><span class="line">  - travis_retry composer install --no-interaction --prefer-source --dev</span><br><span class="line"></span><br><span class="line">#单元测试</span><br><span class="line">script:</span><br><span class="line"></span><br><span class="line">  - phpunit --coverage-text --coverage-clover=coverage.clover --debug</span><br><span class="line"></span><br><span class="line">#需要在https://scrutinizer-ci.com注册账号 并绑定github账号同步github项目</span><br><span class="line">after_script:</span><br><span class="line"></span><br><span class="line">  - wget https://scrutinizer-ci.com/ocular.phar</span><br><span class="line"></span><br><span class="line">  - php ocular.phar code-coverage:upload  --format=php-clover coverage.clover</span><br></pre></td></tr></table></figure><h2 id="Scrutinizer-（单元测试覆盖率）"><a href="#Scrutinizer-（单元测试覆盖率）" class="headerlink" title="Scrutinizer （单元测试覆盖率）"></a>Scrutinizer （单元测试覆盖率）</h2><p>Scrutinizer具有可用于PHP代码的最先进的静态分析引擎。 它能跟踪数据如何流经我们的应用程序以检测代码安全，错误，未使用的代码等。默认情况下，Scrutinizer将分析项目中以.php结尾的所有文件。</p><p>1.Scrutinizer测试以后会有三个指标供我们对代码来改进</p><p>Code Quality</p><p>   代码质量评测来源主要是代码耦合度,代码的复杂度,冗余,未使用变量等.<br>Code Coverage</p><p>  提高单元测试覆盖率， 如果方法里有多个条件分支，尽可能传递不同参数或者使用其它方法让每一行都执行<br>Build Status</p><p>  这一项由代码分析来决定，比如依赖是否可以加载，测试报告是否接收到（travis-ci提供）<br>  如果travis-ci已经build成功，Scrutinizer中却因为某些依赖无法加载可通过以下配置来过滤依赖分析<br>  excluded_dependencies:</p><pre><code>- phpunit/php-timer- or-another/package-name</code></pre><p>2.基本配置文件</p><p>   #测试项目根目录创建.scrutinizer.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imports:</span><br><span class="line">      - php</span><br><span class="line"> tools:</span><br><span class="line">     external_code_coverage:</span><br><span class="line">         timeout: 1800 # Timeout in seconds.</span><br><span class="line">     # disable copy paste detector and similarity analyzer as they have no real value</span><br><span class="line">     # and a huge bunch of false-positives</span><br><span class="line">     php_sim: false</span><br><span class="line">     php_cpd: false</span><br></pre></td></tr></table></figure></p><p>参考文档地址<a href="https://scrutinizer-ci.com/docs/guides/php/automated-code-reviews" target="_blank" rel="noopener">https://scrutinizer-ci.com/docs/guides/php/automated-code-reviews</a></p><h2 id="Codeclimate简介及使用-漏洞排查"><a href="#Codeclimate简介及使用-漏洞排查" class="headerlink" title="Codeclimate简介及使用 (漏洞排查)"></a>Codeclimate简介及使用 (漏洞排查)</h2><p>Code Climate可以看作是开发团队的云机器人，无需执行代码就可对代码进行标准化测试，为项目提供静态分析功能，与GitHub集成可以进行漏洞排查工作 每个人都可能用正确的风格写出质量低下的代码，这其中可能包括：</p><p>重复的代码，它们可能存在于同一个类或不同类中<br>不一致或没有标识性的对象、变量或方法命名<br>过长的代码段<br>让人费解的布尔表达式<br>过于复杂的逻辑判断<br>对象错误地暴露其内部状态<br>遭废弃但没有删除的类或方法 Code Climate可以帮我们 Review 这部分代码</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先在项目中添加配置文件 。codeclimate.yml配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">engines:</span><br><span class="line">  duplication:</span><br><span class="line">    enabled: true</span><br><span class="line">    config:</span><br><span class="line">      languages:</span><br><span class="line">      - php</span><br><span class="line">  eslint:</span><br><span class="line">    enabled: true</span><br><span class="line">  fixme:</span><br><span class="line">    enabled: true</span><br><span class="line">  phpmd:</span><br><span class="line">    enabled: true</span><br><span class="line">    config:</span><br><span class="line">    checks:</span><br><span class="line">      UnusedLocalVariable:</span><br><span class="line">        enabled: false</span><br><span class="line">ratings:</span><br><span class="line">  paths:</span><br><span class="line">  - &quot;**.php&quot;</span><br><span class="line">exclude_paths:</span><br><span class="line">- tests/</span><br></pre></td></tr></table></figure></p><p>配置分析</p><p>引擎通道将您的分析映射到引擎的特定发行版本。例如，发动机可具有四个可用信道：stable，alpha，v1，和v2。未指定，分析运行发动机的稳定通道。</p><p>engines:<br>  some-engine:<br>    enabled: true<br>    channel: “new-hotness”<br>Github 集成<br>1首先登录[climatecode网站]<a href="https://codeclimate.com/dashboard" target="_blank" rel="noopener">https://codeclimate.com/dashboard</a><br>2 添加仓库<br>3入库<br>4显示成功,这些是分析数据</p><h2 id="github徽章-测试保证"><a href="#github徽章-测试保证" class="headerlink" title="github徽章 (测试保证)"></a>github徽章 (测试保证)</h2><p>修改README.md 在工具页面找这些徽章<br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/version" alt="Latest Stable Version"></a><br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/downloads" alt="Total Downloads"></a><br><a href="https://packagist.org/packages/graychen/geolocation" target="_blank" rel="noopener"><img src="https://poser.pugx.org/graychen/geolocation/license" alt="License"></a><br><a href="https://styleci.io/repos/92368125" target="_blank" rel="noopener"><img src="https://styleci.io/repos/92368125/shield?branch=master" alt="StyleCI"></a><br><a href="https://travis-ci.org/Graychen/yii2-post" target="_blank" rel="noopener"><img src="https://travis-ci.org/Graychen/yii2-post.svg?branch=master" alt="Build Status"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/?branch=master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/quality-score.png?b=master" alt="Scrutinizer Code Quality"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/?branch=master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/coverage.png?b=master" alt="Code Coverage"></a><br><a href="https://scrutinizer-ci.com/g/Graychen/geolocation/build-status/master" target="_blank" rel="noopener"><img src="https://scrutinizer-ci.com/g/Graychen/geolocation/badges/build.png?b=master" alt="Build Status"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间我们组对项目进行重构，将多个项目中例如log，app的更新这些重复的内容抽出来做了composer包，为了保证这些composer包的代码质量，&lt;br&gt;使用了github上的一些工具。下面我以自己的一个利用经纬度查询地理位置的composer包geolocation[&lt;a href=&quot;https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Graychen/geolocation/tree/master/tests]为例来详细描述下我们的做法。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Style-CI-php格式检查&quot;&gt;&lt;a href=&quot;#Style-CI-php格式检查&quot; class=&quot;headerlink&quot; title=&quot;Style CI(php格式检查)&quot;&gt;&lt;/a&gt;Style CI(php格式检查)&lt;/h2&gt;&lt;p&gt;在项目根目录，新建.styleci.yml 配置文件，并编写配置内容：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;preset: psr2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打开 &lt;a href=&quot;https://styleci.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://styleci.io/&lt;/a&gt; ，使用Gitlab账号登录，找到对应的项目，点击右侧的 ENABLE STYLECI 启用按钮，即可使用，&lt;br&gt;每次提交代码，都会看到检测结果&lt;br&gt;如果没有找到自己的项目，打开 &lt;a href=&quot;https://styleci.io/account#repos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://styleci.io/account#repos&lt;/a&gt; 点击 Sync With GitHub 同步，就会看到&lt;/p&gt;
&lt;h2 id=&quot;Travis-CI-自动化测试&quot;&gt;&lt;a href=&quot;#Travis-CI-自动化测试&quot; class=&quot;headerlink&quot; title=&quot;Travis-CI(自动化测试)&quot;&gt;&lt;/a&gt;Travis-CI(自动化测试)&lt;/h2&gt;&lt;h3 id=&quot;配置单元测试&quot;&gt;&lt;a href=&quot;#配置单元测试&quot; class=&quot;headerlink&quot; title=&quot;配置单元测试&quot;&gt;&lt;/a&gt;配置单元测试&lt;/h3&gt;&lt;p&gt;1先引入phpunit单元测试包,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;composer require --dev phpunit/phpunit ^6.2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2编写配置文件phpunit.xml.dist,放到根根根目录&lt;br&gt;白名单是你要测试的目录文件，用于生成代码覆盖率&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;phpunit bootstrap=&amp;quot;./tests/bootstrap.php&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         colors=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         verbose=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         convertErrorsToExceptions=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         convertNoticesToExceptions=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         convertWarningsToExceptions=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         processIsolation=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         stopOnFailure=&amp;quot;false&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;testsuites&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;testsuite name=&amp;quot;Test Suite&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;directory&amp;gt;./tests&amp;lt;/directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/testsuite&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/testsuites&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;whitelist&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;directory suffix=&amp;quot;.php&amp;quot;&amp;gt;./src&amp;lt;/directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/whitelist&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/phpunit&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术 php" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF-php/"/>
    
  </entry>
  
</feed>
